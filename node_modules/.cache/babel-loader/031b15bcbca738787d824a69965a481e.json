{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\nvar bcrypto = require('./crypto');\nvar bscript = require('./script');\nvar _a = require('./bufferutils'),\n  BufferReader = _a.BufferReader,\n  BufferWriter = _a.BufferWriter;\nvar coins = require('./coins');\nvar opcodes = require('bitcoin-ops');\nvar networks = require('./networks');\nvar typeforce = require('typeforce');\nvar types = require('./types');\nvar varuint = require('varuint-bitcoin');\nvar blake2b = require('@bitgo/blake2b');\nvar zcashVersion = require('./forks/zcash/version');\nfunction varSliceSize(someScript) {\n  var length = someScript.length;\n  return varuint.encodingLength(length) + length;\n}\nfunction vectorSize(someVector) {\n  var length = someVector.length;\n  return varuint.encodingLength(length) + someVector.reduce(function (sum, witness) {\n    return sum + varSliceSize(witness);\n  }, 0);\n}\n// By default, assume is a bitcoin transaction\nfunction Transaction(network) {\n  if (network === void 0) {\n    network = networks.bitcoin;\n  }\n  this.version = 1;\n  this.locktime = 0;\n  this.ins = [];\n  this.outs = [];\n  this.network = network;\n  if (coins.isZcashCompatible(network)) {\n    // ZCash version >= 2\n    this.joinsplits = [];\n    this.joinsplitPubkey = [];\n    this.joinsplitSig = [];\n    // ZCash version >= 3\n    this.overwintered = 0; // 1 if the transaction is post overwinter upgrade, 0 otherwise\n    this.versionGroupId = 0; // 0x03C48270 (63210096) for overwinter and 0x892F2085 (2301567109) for sapling\n    this.expiryHeight = 0; // Block height after which this transactions will expire, or 0 to disable expiry\n    // Must be updated along with version\n    this.consensusBranchId = network.consensusBranchId[this.version];\n  }\n  if (coins.isDash(network)) {\n    // Dash version = 3\n    this.type = 0;\n    this.extraPayload = Buffer.alloc(0);\n  }\n}\nTransaction.DEFAULT_SEQUENCE = 0xffffffff;\nTransaction.SIGHASH_ALL = 0x01;\nTransaction.SIGHASH_NONE = 0x02;\nTransaction.SIGHASH_SINGLE = 0x03;\nTransaction.SIGHASH_ANYONECANPAY = 0x80;\n/**\n * Enable BIP143 hashing with custom forkID\n * https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/replay-protected-sighash.md\n */\nTransaction.SIGHASH_FORKID = 0x40;\n/** @deprecated use SIGHASH_FORKID */\nTransaction.SIGHASH_BITCOINCASHBIP143 = Transaction.SIGHASH_FORKID;\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00;\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01;\nvar EMPTY_SCRIPT = Buffer.allocUnsafe(0);\nvar EMPTY_WITNESS = [];\nvar ZERO = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex');\nvar ONE = Buffer.from('0000000000000000000000000000000000000000000000000000000000000001', 'hex');\n// Used to represent the absence of a value\nvar VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');\nvar VALUE_INT64_ZERO = Buffer.from('0000000000000000', 'hex');\nvar BLANK_OUTPUT = {\n  script: EMPTY_SCRIPT,\n  valueBuffer: VALUE_UINT64_MAX\n};\nTransaction.DASH_NORMAL = 0;\nTransaction.DASH_PROVIDER_REGISTER = 1;\nTransaction.DASH_PROVIDER_UPDATE_SERVICE = 2;\nTransaction.DASH_PROVIDER_UPDATE_REGISTRAR = 3;\nTransaction.DASH_PROVIDER_UPDATE_REVOKE = 4;\nTransaction.DASH_COINBASE = 5;\nTransaction.DASH_QUORUM_COMMITMENT = 6;\nTransaction.fromBuffer = function (buffer, network, __noStrict) {\n  if (network === void 0) {\n    network = networks.bitcoin;\n  }\n  var bufferReader = new BufferReader(buffer);\n  var tx = new Transaction(network);\n  tx.version = bufferReader.readInt32();\n  if (coins.isZcashCompatible(network)) {\n    // Split the header into fOverwintered and nVersion\n    tx.overwintered = tx.version >>> 31; // Must be 1 for version 3 and up\n    tx.version = tx.version & 0x07FFFFFFF; // 3 for overwinter\n    if (tx.overwintered && !network.consensusBranchId.hasOwnProperty(tx.version)) {\n      throw new Error('Unsupported Zcash transaction');\n    }\n    tx.consensusBranchId = network.consensusBranchId[tx.version];\n  }\n  if (coins.isDash(network)) {\n    tx.type = tx.version >> 16;\n    tx.version = tx.version & 0xffff;\n    if (tx.version === 3 && (tx.type < Transaction.DASH_NORMAL || tx.type > Transaction.DASH_QUORUM_COMMITMENT)) {\n      throw new Error('Unsupported Dash transaction type');\n    }\n  }\n  var marker = bufferReader.readUInt8();\n  var flag = bufferReader.readUInt8();\n  var hasWitnesses = false;\n  if (marker === Transaction.ADVANCED_TRANSACTION_MARKER && flag === Transaction.ADVANCED_TRANSACTION_FLAG && !coins.isZcashCompatible(network)) {\n    hasWitnesses = true;\n  } else {\n    bufferReader.offset -= 2;\n  }\n  if (tx.isOverwinterCompatible()) {\n    tx.versionGroupId = bufferReader.readUInt32();\n  }\n  var vinLen = bufferReader.readVarInt();\n  for (var i = 0; i < vinLen; ++i) {\n    tx.ins.push({\n      hash: bufferReader.readSlice(32),\n      index: bufferReader.readUInt32(),\n      script: bufferReader.readVarSlice(),\n      sequence: bufferReader.readUInt32(),\n      witness: EMPTY_WITNESS\n    });\n  }\n  var voutLen = bufferReader.readVarInt();\n  for (i = 0; i < voutLen; ++i) {\n    tx.outs.push({\n      value: bufferReader.readUInt64(),\n      script: bufferReader.readVarSlice()\n    });\n  }\n  if (hasWitnesses) {\n    for (i = 0; i < vinLen; ++i) {\n      tx.ins[i].witness = bufferReader.readVector();\n    }\n    // was this pointless?\n    if (!tx.hasWitnesses()) throw new Error('Transaction has superfluous witness data');\n  }\n  tx.locktime = bufferReader.readUInt32();\n  if (coins.isZcashCompatible(network)) {\n    if (tx.isOverwinterCompatible()) {\n      tx.expiryHeight = bufferReader.readUInt32();\n    }\n    if (tx.isSaplingCompatible()) {\n      tx.valueBalance = bufferReader.readSlice(8);\n      if (!tx.valueBalance.equals(VALUE_INT64_ZERO)) {\n        /* istanbul ignore next */\n        throw new Error(\"unsupported valueBalance\");\n      }\n      var nShieldedSpend = bufferReader.readVarInt();\n      if (nShieldedSpend !== 0) {\n        /* istanbul ignore next */\n        throw new Error(\"shielded spend not supported\");\n      }\n      var nShieldedOutput = bufferReader.readVarInt();\n      if (nShieldedOutput !== 0) {\n        /* istanbul ignore next */\n        throw new Error(\"shielded output not supported\");\n      }\n    }\n    if (tx.supportsJoinSplits()) {\n      var joinSplitsLen = bufferReader.readVarInt();\n      if (joinSplitsLen !== 0) {\n        /* istanbul ignore next */\n        throw new Error(\"joinSplits not supported\");\n      }\n    }\n  }\n  if (tx.isDashSpecialTransaction()) {\n    tx.extraPayload = bufferReader.readVarSlice();\n  }\n  tx.network = network;\n  if (__noStrict) return tx;\n  if (bufferReader.offset !== buffer.length) throw new Error('Transaction has unexpected data');\n  return tx;\n};\nTransaction.fromHex = function (hex, network) {\n  return Transaction.fromBuffer(Buffer.from(hex, 'hex'), network);\n};\nTransaction.isCoinbaseHash = function (buffer) {\n  typeforce(types.Hash256bit, buffer);\n  for (var i = 0; i < 32; ++i) {\n    if (buffer[i] !== 0) return false;\n  }\n  return true;\n};\nTransaction.prototype.isSaplingCompatible = function () {\n  return coins.isZcashCompatible(this.network) && this.version >= zcashVersion.SAPLING;\n};\nTransaction.prototype.isOverwinterCompatible = function () {\n  return coins.isZcashCompatible(this.network) && this.version >= zcashVersion.OVERWINTER;\n};\nTransaction.prototype.supportsJoinSplits = function () {\n  return coins.isZcashCompatible(this.network) && this.version >= zcashVersion.JOINSPLITS_SUPPORT;\n};\nTransaction.prototype.versionSupportsDashSpecialTransactions = function () {\n  return coins.isDash(this.network) && this.version >= 3;\n};\nTransaction.prototype.isDashSpecialTransaction = function () {\n  return this.versionSupportsDashSpecialTransactions() && this.type !== Transaction.DASH_NORMAL;\n};\nTransaction.prototype.isCoinbase = function () {\n  return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash);\n};\nTransaction.prototype.addInput = function (hash, index, sequence, scriptSig) {\n  typeforce(types.tuple(types.Hash256bit, types.UInt32, types.maybe(types.UInt32), types.maybe(types.Buffer)), arguments);\n  if (types.Null(sequence)) {\n    sequence = Transaction.DEFAULT_SEQUENCE;\n  }\n  // Add the input and return the input's index\n  return this.ins.push({\n    hash: hash,\n    index: index,\n    script: scriptSig || EMPTY_SCRIPT,\n    sequence: sequence,\n    witness: EMPTY_WITNESS\n  }) - 1;\n};\nTransaction.prototype.addOutput = function (scriptPubKey, value) {\n  typeforce(types.tuple(types.Buffer, types.Satoshi), arguments);\n  // Add the output and return the output's index\n  return this.outs.push({\n    script: scriptPubKey,\n    value: value\n  }) - 1;\n};\nTransaction.prototype.hasWitnesses = function () {\n  return this.ins.some(function (x) {\n    return x.witness.length !== 0;\n  });\n};\nTransaction.prototype.weight = function () {\n  var base = this.__byteLength(false);\n  var total = this.__byteLength(true);\n  return base * 3 + total;\n};\nTransaction.prototype.virtualSize = function () {\n  return Math.ceil(this.weight() / 4);\n};\nTransaction.prototype.byteLength = function () {\n  return this.__byteLength(true);\n};\nTransaction.prototype.zcashTransactionByteLength = function () {\n  if (!coins.isZcashCompatible(this.network)) {\n    throw new Error('zcashTransactionByteLength can only be called when using Zcash or compatible network');\n  }\n  var byteLength = 0;\n  byteLength += 4; // Header\n  if (this.isOverwinterCompatible()) {\n    byteLength += 4; // nVersionGroupId\n  }\n  byteLength += varuint.encodingLength(this.ins.length); // tx_in_count\n  byteLength += this.ins.reduce(function (sum, input) {\n    return sum + 40 + varSliceSize(input.script);\n  }, 0); // tx_in\n  byteLength += varuint.encodingLength(this.outs.length); // tx_out_count\n  byteLength += this.outs.reduce(function (sum, output) {\n    return sum + 8 + varSliceSize(output.script);\n  }, 0); // tx_out\n  byteLength += 4; // lock_time\n  if (this.isOverwinterCompatible()) {\n    byteLength += 4; // nExpiryHeight\n  }\n  if (this.isSaplingCompatible()) {\n    byteLength += 8; // valueBalance\n    byteLength += varuint.encodingLength(0); // inputs\n    byteLength += varuint.encodingLength(0); // outputs\n  }\n  if (this.supportsJoinSplits()) {\n    byteLength += varuint.encodingLength(0); // joinsplits\n  }\n  return byteLength;\n};\nTransaction.prototype.__byteLength = function (__allowWitness) {\n  var hasWitnesses = __allowWitness && this.hasWitnesses();\n  if (coins.isZcashCompatible(this.network)) {\n    return this.zcashTransactionByteLength();\n  }\n  return (hasWitnesses ? 10 : 8) + varuint.encodingLength(this.ins.length) + varuint.encodingLength(this.outs.length) + this.ins.reduce(function (sum, input) {\n    return sum + 40 + varSliceSize(input.script);\n  }, 0) + this.outs.reduce(function (sum, output) {\n    return sum + 8 + varSliceSize(output.script);\n  }, 0) + (this.isDashSpecialTransaction() ? varSliceSize(this.extraPayload) : 0) + (hasWitnesses ? this.ins.reduce(function (sum, input) {\n    return sum + vectorSize(input.witness);\n  }, 0) : 0);\n};\nTransaction.prototype.clone = function () {\n  var newTx = new Transaction(this.network);\n  newTx.version = this.version;\n  newTx.locktime = this.locktime;\n  newTx.network = this.network;\n  if (coins.isDash(this.network)) {\n    newTx.type = this.type;\n    newTx.extraPayload = this.extraPayload;\n  }\n  if (coins.isZcashCompatible(this.network)) {\n    newTx.consensusBranchId = this.consensusBranchId;\n  }\n  if (this.isOverwinterCompatible()) {\n    newTx.overwintered = this.overwintered;\n    newTx.versionGroupId = this.versionGroupId;\n    newTx.expiryHeight = this.expiryHeight;\n  }\n  if (this.isSaplingCompatible()) {\n    newTx.valueBalance = this.valueBalance;\n  }\n  newTx.ins = this.ins.map(function (txIn) {\n    return {\n      hash: txIn.hash,\n      index: txIn.index,\n      script: txIn.script,\n      sequence: txIn.sequence,\n      witness: txIn.witness\n    };\n  });\n  newTx.outs = this.outs.map(function (txOut) {\n    return {\n      script: txOut.script,\n      value: txOut.value\n    };\n  });\n  return newTx;\n};\n/**\n * Get Zcash header or version\n * @returns {number}\n */\nTransaction.prototype.getHeader = function () {\n  var mask = this.overwintered ? 1 : 0;\n  var header = this.version | mask << 31;\n  return header;\n};\n/**\n * Hash transaction for signing a specific input.\n *\n * Bitcoin uses a different hash for each signed transaction input.\n * This method copies the transaction, makes the necessary changes based on the\n * hashType, and then hashes the result.\n * This hash can then be used to sign the provided transaction input.\n */\nTransaction.prototype.hashForSignature = function (inIndex, prevOutScript, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */types.Number), arguments);\n  // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n  if (inIndex >= this.ins.length) return ONE;\n  // ignore OP_CODESEPARATOR\n  var ourScript = bscript.compile(bscript.decompile(prevOutScript).filter(function (x) {\n    return x !== opcodes.OP_CODESEPARATOR;\n  }));\n  var txTmp = this.clone();\n  // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n  if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n    txTmp.outs = [];\n    // ignore sequence numbers (except at inIndex)\n    txTmp.ins.forEach(function (input, i) {\n      if (i === inIndex) return;\n      input.sequence = 0;\n    });\n    // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n    if (inIndex >= this.outs.length) return ONE;\n    // truncate outputs after\n    txTmp.outs.length = inIndex + 1;\n    // \"blank\" outputs before\n    for (var i = 0; i < inIndex; i++) {\n      txTmp.outs[i] = BLANK_OUTPUT;\n    }\n    // ignore sequence numbers (except at inIndex)\n    txTmp.ins.forEach(function (input, y) {\n      if (y === inIndex) return;\n      input.sequence = 0;\n    });\n  }\n  // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n  if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n    txTmp.ins = [txTmp.ins[inIndex]];\n    txTmp.ins[0].script = ourScript;\n    // SIGHASH_ALL: only ignore input scripts\n  } else {\n    // \"blank\" others input scripts\n    txTmp.ins.forEach(function (input) {\n      input.script = EMPTY_SCRIPT;\n    });\n    txTmp.ins[inIndex].script = ourScript;\n  }\n  // serialize and hash\n  var buffer = Buffer.allocUnsafe(txTmp.__byteLength(false) + 4);\n  buffer.writeInt32LE(hashType, buffer.length - 4);\n  txTmp.__toBuffer(buffer, 0, false);\n  return bcrypto.hash256(buffer);\n};\n/**\n * Calculate the hash to verify the signature against\n * @param inIndex\n * @param prevoutScript\n * @param value - The previous output's amount\n * @param hashType\n * @param isSegwit\n * @returns {*}\n */\nTransaction.prototype.hashForSignatureByNetwork = function (inIndex, prevoutScript, value, hashType, isSegwit) {\n  switch (coins.getMainnet(this.network)) {\n    case networks.zcash:\n    case networks.verus:\n    case networks.kmd:\n    case networks[\"default\"]:\n      return this.hashForZcashSignature(inIndex, prevoutScript, value, hashType);\n    case networks.bitcoincash:\n    case networks.bitcoinsv:\n    case networks.bitcoingold:\n      /*\n        Bitcoin Cash supports a FORKID flag. When set, we hash using hashing algorithm\n         that is used for segregated witness transactions (defined in BIP143).\n               The flag is also used by BitcoinSV and BitcoinGold\n               https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/replay-protected-sighash.md\n       */\n      var addForkId = (hashType & Transaction.SIGHASH_FORKID) > 0;\n      if (addForkId) {\n        /*\n          ``The sighash type is altered to include a 24-bit fork id in its most significant bits.''\n          We also use unsigned right shift operator `>>>` to cast to UInt32\n          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\n         */\n        hashType = (hashType | this.network.forkId << 8) >>> 0;\n        return this.hashForWitnessV0(inIndex, prevoutScript, value, hashType);\n      }\n  }\n  if (isSegwit) {\n    return this.hashForWitnessV0(inIndex, prevoutScript, value, hashType);\n  } else {\n    return this.hashForSignature(inIndex, prevoutScript, hashType);\n  }\n};\n/** @deprecated use hashForSignatureByNetwork */\n/* istanbul ignore next */\nTransaction.prototype.hashForCashSignature = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (coins.getMainnet(this.network) !== networks.bitcoincash && coins.getMainnet(this.network) !== networks.bitcoinsv) {\n    throw new Error(\"called hashForCashSignature on transaction with network \" + coins.getNetworkName(this.network));\n  }\n  return this.hashForSignatureByNetwork.apply(this, args);\n};\n/** @deprecated use hashForSignatureByNetwork */\n/* istanbul ignore next */\nTransaction.prototype.hashForGoldSignature = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (coins.getMainnet(this.network) !== networks.bitcoingold) {\n    throw new Error(\"called hashForGoldSignature on transaction with network \" + coins.getNetworkName(this.network));\n  }\n  return this.hashForSignatureByNetwork.apply(this, args);\n};\n/**\n * Blake2b hashing algorithm for Zcash\n * @param bufferToHash\n * @param personalization\n * @returns 256-bit BLAKE2b hash\n */\nTransaction.prototype.getBlake2bHash = function (bufferToHash, personalization) {\n  var out = Buffer.allocUnsafe(32);\n  return blake2b(out.length, null, null, Buffer.from(personalization)).update(bufferToHash).digest(out);\n};\n/**\n * Build a hash for all or none of the transaction inputs depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getPrevoutHash = function (hashType) {\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n    var bufferWriter = new BufferWriter(Buffer.allocUnsafe(36 * this.ins.length));\n    this.ins.forEach(function (txIn) {\n      bufferWriter.writeSlice(txIn.hash);\n      bufferWriter.writeUInt32(txIn.index);\n    });\n    if (coins.isZcashCompatible(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashPrevoutHash');\n    }\n    return bcrypto.hash256(bufferWriter.buffer);\n  }\n  return ZERO;\n};\n/**\n * Build a hash for all or none of the transactions inputs sequence numbers depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getSequenceHash = function (hashType) {\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) && (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    var bufferWriter = new BufferWriter(Buffer.allocUnsafe(4 * this.ins.length));\n    this.ins.forEach(function (txIn) {\n      bufferWriter.writeUInt32(txIn.sequence);\n    });\n    if (coins.isZcashCompatible(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashSequencHash');\n    }\n    return bcrypto.hash256(bufferWriter.buffer);\n  }\n  return ZERO;\n};\n/**\n * Build a hash for one, all or none of the transaction outputs depending on the hashtype\n * @param hashType\n * @param inIndex\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getOutputsHash = function (hashType, inIndex) {\n  var bufferWriter;\n  if ((hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    // Find out the size of the outputs and write them\n    var txOutsSize = this.outs.reduce(function (sum, output) {\n      return sum + 8 + varSliceSize(output.script);\n    }, 0);\n    bufferWriter = new BufferWriter(Buffer.allocUnsafe(txOutsSize));\n    this.outs.forEach(function (out) {\n      bufferWriter.writeUInt64(out.value);\n      bufferWriter.writeVarSlice(out.script);\n    });\n    if (coins.isZcashCompatible(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash');\n    }\n    return bcrypto.hash256(bufferWriter.buffer);\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {\n    // Write only the output specified in inIndex\n    var output = this.outs[inIndex];\n    bufferWriter = new BufferWriter(Buffer.allocUnsafe(8 + varSliceSize(output.script)));\n    bufferWriter.writeUInt64(output.value);\n    bufferWriter.writeVarSlice(output.script);\n    if (coins.isZcashCompatible(this.network)) {\n      return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash');\n    }\n    return bcrypto.hash256(bufferWriter.buffer);\n  }\n  return ZERO;\n};\n/**\n * Hash transaction for signing a transparent transaction in Zcash. Protected transactions are not supported.\n * @param inIndex\n * @param prevOutScript\n * @param value\n * @param hashType\n * @returns double SHA-256 or 256-bit BLAKE2b hash\n */\nTransaction.prototype.hashForZcashSignature = function (inIndex, prevOutScript, value, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);\n  if (!coins.isZcashCompatible(this.network)) {\n    throw new Error('hashForZcashSignature can only be called when using Zcash or compatible network');\n  }\n  if (inIndex >= this.ins.length && inIndex !== VALUE_UINT64_MAX) {\n    /* istanbul ignore next */\n    throw new Error('Input index is out of range');\n  }\n  if (this.isOverwinterCompatible()) {\n    var hashPrevouts = this.getPrevoutHash(hashType);\n    var hashSequence = this.getSequenceHash(hashType);\n    var hashOutputs = this.getOutputsHash(hashType, inIndex);\n    var hashJoinSplits = ZERO;\n    var hashShieldedSpends = ZERO;\n    var hashShieldedOutputs = ZERO;\n    var bufferWriter;\n    var baseBufferSize = 0;\n    baseBufferSize += 4 * 5; // header, nVersionGroupId, lock_time, nExpiryHeight, hashType\n    baseBufferSize += 32 * 4; // 256 hashes: hashPrevouts, hashSequence, hashOutputs, hashJoinSplits\n    if (inIndex !== VALUE_UINT64_MAX) {\n      // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig), we need extra space\n      baseBufferSize += 4 * 2; // input.index, input.sequence\n      baseBufferSize += 8; // value\n      baseBufferSize += 32; // input.hash\n      baseBufferSize += varSliceSize(prevOutScript); // prevOutScript\n    }\n    if (this.isSaplingCompatible()) {\n      baseBufferSize += 32 * 2; // hashShieldedSpends and hashShieldedOutputs\n      baseBufferSize += 8; // valueBalance\n    }\n    bufferWriter = new BufferWriter(Buffer.alloc(baseBufferSize));\n    bufferWriter.writeInt32(this.getHeader());\n    bufferWriter.writeUInt32(this.versionGroupId);\n    bufferWriter.writeSlice(hashPrevouts);\n    bufferWriter.writeSlice(hashSequence);\n    bufferWriter.writeSlice(hashOutputs);\n    bufferWriter.writeSlice(hashJoinSplits);\n    if (this.isSaplingCompatible()) {\n      bufferWriter.writeSlice(hashShieldedSpends);\n      bufferWriter.writeSlice(hashShieldedOutputs);\n    }\n    bufferWriter.writeUInt32(this.locktime);\n    bufferWriter.writeUInt32(this.expiryHeight);\n    if (this.isSaplingCompatible()) {\n      bufferWriter.writeSlice(VALUE_INT64_ZERO);\n    }\n    bufferWriter.writeUInt32(hashType);\n    // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig):\n    if (inIndex !== VALUE_UINT64_MAX) {\n      // The input being signed (replacing the scriptSig with scriptCode + amount)\n      // The prevout may already be contained in hashPrevout, and the nSequence\n      // may already be contained in hashSequence.\n      var input = this.ins[inIndex];\n      bufferWriter.writeSlice(input.hash);\n      bufferWriter.writeUInt32(input.index);\n      bufferWriter.writeVarSlice(prevOutScript);\n      bufferWriter.writeUInt64(value);\n      bufferWriter.writeUInt32(input.sequence);\n    }\n    var personalization = Buffer.alloc(16);\n    var prefix = 'ZcashSigHash';\n    personalization.write(prefix);\n    personalization.writeUInt32LE(this.consensusBranchId, prefix.length);\n    return this.getBlake2bHash(bufferWriter.buffer, personalization);\n  }\n  /* istanbul ignore next */\n  throw new Error(\"unsupported version\");\n};\nTransaction.prototype.hashForWitnessV0 = function (inIndex, prevOutScript, value, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);\n  var hashPrevouts = this.getPrevoutHash(hashType);\n  var hashSequence = this.getSequenceHash(hashType);\n  var hashOutputs = this.getOutputsHash(hashType, inIndex);\n  var bufferWriter = new BufferWriter(Buffer.allocUnsafe(156 + varSliceSize(prevOutScript)));\n  var input = this.ins[inIndex];\n  bufferWriter.writeInt32(this.version);\n  bufferWriter.writeSlice(hashPrevouts);\n  bufferWriter.writeSlice(hashSequence);\n  bufferWriter.writeSlice(input.hash);\n  bufferWriter.writeUInt32(input.index);\n  bufferWriter.writeVarSlice(prevOutScript);\n  bufferWriter.writeUInt64(value);\n  bufferWriter.writeUInt32(input.sequence);\n  bufferWriter.writeSlice(hashOutputs);\n  bufferWriter.writeUInt32(this.locktime);\n  bufferWriter.writeUInt32(hashType);\n  return bcrypto.hash256(bufferWriter.buffer);\n};\nTransaction.prototype.getHash = function () {\n  return bcrypto.hash256(this.__toBuffer(undefined, undefined, false));\n};\nTransaction.prototype.getId = function () {\n  // transaction hash's are displayed in reverse order\n  return this.getHash().reverse().toString('hex');\n};\nTransaction.prototype.toBuffer = function (buffer, initialOffset) {\n  return this.__toBuffer(buffer, initialOffset, true);\n};\nTransaction.prototype.__toBuffer = function (buffer, initialOffset, __allowWitness) {\n  if (!buffer) buffer = Buffer.allocUnsafe(this.__byteLength(__allowWitness));\n  var bufferWriter = new BufferWriter(buffer, initialOffset || 0);\n  function writeUInt16(i) {\n    bufferWriter.offset = bufferWriter.buffer.writeUInt16LE(i, bufferWriter.offset);\n  }\n  if (this.isOverwinterCompatible()) {\n    var mask = this.overwintered ? 1 : 0;\n    bufferWriter.writeInt32(this.version | mask << 31); // Set overwinter bit\n    bufferWriter.writeUInt32(this.versionGroupId);\n  } else if (this.isDashSpecialTransaction()) {\n    writeUInt16(this.version);\n    writeUInt16(this.type);\n  } else {\n    bufferWriter.writeInt32(this.version);\n  }\n  var hasWitnesses = __allowWitness && this.hasWitnesses();\n  if (hasWitnesses) {\n    bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);\n    bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);\n  }\n  bufferWriter.writeVarInt(this.ins.length);\n  this.ins.forEach(function (txIn) {\n    bufferWriter.writeSlice(txIn.hash);\n    bufferWriter.writeUInt32(txIn.index);\n    bufferWriter.writeVarSlice(txIn.script);\n    bufferWriter.writeUInt32(txIn.sequence);\n  });\n  bufferWriter.writeVarInt(this.outs.length);\n  this.outs.forEach(function (txOut) {\n    if (!txOut.valueBuffer) {\n      bufferWriter.writeUInt64(txOut.value);\n    } else {\n      bufferWriter.writeSlice(txOut.valueBuffer);\n    }\n    bufferWriter.writeVarSlice(txOut.script);\n  });\n  if (hasWitnesses) {\n    this.ins.forEach(function (input) {\n      bufferWriter.writeVector(input.witness);\n    });\n  }\n  bufferWriter.writeUInt32(this.locktime);\n  if (this.isOverwinterCompatible()) {\n    bufferWriter.writeUInt32(this.expiryHeight);\n  }\n  if (this.isSaplingCompatible()) {\n    bufferWriter.writeSlice(VALUE_INT64_ZERO);\n    bufferWriter.writeVarInt(0); // vShieldedSpendLength\n    bufferWriter.writeVarInt(0); // vShieldedOutputLength\n  }\n  if (this.supportsJoinSplits()) {\n    bufferWriter.writeVarInt(0); // joinsSplits length\n  }\n  if (this.isDashSpecialTransaction()) {\n    bufferWriter.writeVarSlice(this.extraPayload);\n  }\n  if (initialOffset !== undefined) return buffer.slice(initialOffset, bufferWriter.offset);\n  // avoid slicing unless necessary\n  // TODO (https://github.com/BitGo/bitgo-utxo-lib/issues/11): we shouldn't have to slice the final buffer\n  return buffer.slice(0, bufferWriter.offset);\n};\nTransaction.prototype.toHex = function () {\n  return this.toBuffer().toString('hex');\n};\nTransaction.prototype.setInputScript = function (index, scriptSig) {\n  typeforce(types.tuple(types.Number, types.Buffer), arguments);\n  this.ins[index].script = scriptSig;\n};\nTransaction.prototype.setWitness = function (index, witness) {\n  typeforce(types.tuple(types.Number, [types.Buffer]), arguments);\n  this.ins[index].witness = witness;\n};\nmodule.exports = Transaction;","map":{"version":3,"names":["Buffer","require","bcrypto","bscript","_a","BufferReader","BufferWriter","coins","opcodes","networks","typeforce","types","varuint","blake2b","zcashVersion","varSliceSize","someScript","length","encodingLength","vectorSize","someVector","reduce","sum","witness","Transaction","network","bitcoin","version","locktime","ins","outs","isZcashCompatible","joinsplits","joinsplitPubkey","joinsplitSig","overwintered","versionGroupId","expiryHeight","consensusBranchId","isDash","type","extraPayload","alloc","DEFAULT_SEQUENCE","SIGHASH_ALL","SIGHASH_NONE","SIGHASH_SINGLE","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","SIGHASH_BITCOINCASHBIP143","ADVANCED_TRANSACTION_MARKER","ADVANCED_TRANSACTION_FLAG","EMPTY_SCRIPT","allocUnsafe","EMPTY_WITNESS","ZERO","from","ONE","VALUE_UINT64_MAX","VALUE_INT64_ZERO","BLANK_OUTPUT","script","valueBuffer","DASH_NORMAL","DASH_PROVIDER_REGISTER","DASH_PROVIDER_UPDATE_SERVICE","DASH_PROVIDER_UPDATE_REGISTRAR","DASH_PROVIDER_UPDATE_REVOKE","DASH_COINBASE","DASH_QUORUM_COMMITMENT","fromBuffer","buffer","__noStrict","bufferReader","tx","readInt32","hasOwnProperty","Error","marker","readUInt8","flag","hasWitnesses","offset","isOverwinterCompatible","readUInt32","vinLen","readVarInt","i","push","hash","readSlice","index","readVarSlice","sequence","voutLen","value","readUInt64","readVector","isSaplingCompatible","valueBalance","equals","nShieldedSpend","nShieldedOutput","supportsJoinSplits","joinSplitsLen","isDashSpecialTransaction","fromHex","hex","isCoinbaseHash","Hash256bit","prototype","SAPLING","OVERWINTER","JOINSPLITS_SUPPORT","versionSupportsDashSpecialTransactions","isCoinbase","addInput","scriptSig","tuple","UInt32","maybe","arguments","Null","addOutput","scriptPubKey","Satoshi","some","x","weight","base","__byteLength","total","virtualSize","Math","ceil","byteLength","zcashTransactionByteLength","input","output","__allowWitness","clone","newTx","map","txIn","txOut","getHeader","mask","header","hashForSignature","inIndex","prevOutScript","hashType","Number","ourScript","compile","decompile","filter","OP_CODESEPARATOR","txTmp","forEach","y","writeInt32LE","__toBuffer","hash256","hashForSignatureByNetwork","prevoutScript","isSegwit","getMainnet","zcash","verus","kmd","hashForZcashSignature","bitcoincash","bitcoinsv","bitcoingold","addForkId","forkId","hashForWitnessV0","hashForCashSignature","args","_i","getNetworkName","apply","hashForGoldSignature","getBlake2bHash","bufferToHash","personalization","out","update","digest","getPrevoutHash","bufferWriter","writeSlice","writeUInt32","getSequenceHash","getOutputsHash","txOutsSize","writeUInt64","writeVarSlice","hashPrevouts","hashSequence","hashOutputs","hashJoinSplits","hashShieldedSpends","hashShieldedOutputs","baseBufferSize","writeInt32","prefix","write","writeUInt32LE","getHash","undefined","getId","reverse","toString","toBuffer","initialOffset","writeUInt16","writeUInt16LE","writeUInt8","writeVarInt","writeVector","slice","toHex","setInputScript","setWitness","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATIBridgeWebsite-main/node_modules/@bitgo/utxo-lib/dist/src/transaction.js"],"sourcesContent":["var Buffer = require('safe-buffer').Buffer;\nvar bcrypto = require('./crypto');\nvar bscript = require('./script');\nvar _a = require('./bufferutils'), BufferReader = _a.BufferReader, BufferWriter = _a.BufferWriter;\nvar coins = require('./coins');\nvar opcodes = require('bitcoin-ops');\nvar networks = require('./networks');\nvar typeforce = require('typeforce');\nvar types = require('./types');\nvar varuint = require('varuint-bitcoin');\nvar blake2b = require('@bitgo/blake2b');\nvar zcashVersion = require('./forks/zcash/version');\nfunction varSliceSize(someScript) {\n    var length = someScript.length;\n    return varuint.encodingLength(length) + length;\n}\nfunction vectorSize(someVector) {\n    var length = someVector.length;\n    return varuint.encodingLength(length) + someVector.reduce(function (sum, witness) {\n        return sum + varSliceSize(witness);\n    }, 0);\n}\n// By default, assume is a bitcoin transaction\nfunction Transaction(network) {\n    if (network === void 0) { network = networks.bitcoin; }\n    this.version = 1;\n    this.locktime = 0;\n    this.ins = [];\n    this.outs = [];\n    this.network = network;\n    if (coins.isZcashCompatible(network)) {\n        // ZCash version >= 2\n        this.joinsplits = [];\n        this.joinsplitPubkey = [];\n        this.joinsplitSig = [];\n        // ZCash version >= 3\n        this.overwintered = 0; // 1 if the transaction is post overwinter upgrade, 0 otherwise\n        this.versionGroupId = 0; // 0x03C48270 (63210096) for overwinter and 0x892F2085 (2301567109) for sapling\n        this.expiryHeight = 0; // Block height after which this transactions will expire, or 0 to disable expiry\n        // Must be updated along with version\n        this.consensusBranchId = network.consensusBranchId[this.version];\n    }\n    if (coins.isDash(network)) {\n        // Dash version = 3\n        this.type = 0;\n        this.extraPayload = Buffer.alloc(0);\n    }\n}\nTransaction.DEFAULT_SEQUENCE = 0xffffffff;\nTransaction.SIGHASH_ALL = 0x01;\nTransaction.SIGHASH_NONE = 0x02;\nTransaction.SIGHASH_SINGLE = 0x03;\nTransaction.SIGHASH_ANYONECANPAY = 0x80;\n/**\n * Enable BIP143 hashing with custom forkID\n * https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/replay-protected-sighash.md\n */\nTransaction.SIGHASH_FORKID = 0x40;\n/** @deprecated use SIGHASH_FORKID */\nTransaction.SIGHASH_BITCOINCASHBIP143 = Transaction.SIGHASH_FORKID;\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00;\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01;\nvar EMPTY_SCRIPT = Buffer.allocUnsafe(0);\nvar EMPTY_WITNESS = [];\nvar ZERO = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex');\nvar ONE = Buffer.from('0000000000000000000000000000000000000000000000000000000000000001', 'hex');\n// Used to represent the absence of a value\nvar VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');\nvar VALUE_INT64_ZERO = Buffer.from('0000000000000000', 'hex');\nvar BLANK_OUTPUT = {\n    script: EMPTY_SCRIPT,\n    valueBuffer: VALUE_UINT64_MAX\n};\nTransaction.DASH_NORMAL = 0;\nTransaction.DASH_PROVIDER_REGISTER = 1;\nTransaction.DASH_PROVIDER_UPDATE_SERVICE = 2;\nTransaction.DASH_PROVIDER_UPDATE_REGISTRAR = 3;\nTransaction.DASH_PROVIDER_UPDATE_REVOKE = 4;\nTransaction.DASH_COINBASE = 5;\nTransaction.DASH_QUORUM_COMMITMENT = 6;\nTransaction.fromBuffer = function (buffer, network, __noStrict) {\n    if (network === void 0) { network = networks.bitcoin; }\n    var bufferReader = new BufferReader(buffer);\n    var tx = new Transaction(network);\n    tx.version = bufferReader.readInt32();\n    if (coins.isZcashCompatible(network)) {\n        // Split the header into fOverwintered and nVersion\n        tx.overwintered = tx.version >>> 31; // Must be 1 for version 3 and up\n        tx.version = tx.version & 0x07FFFFFFF; // 3 for overwinter\n        if (tx.overwintered && !network.consensusBranchId.hasOwnProperty(tx.version)) {\n            throw new Error('Unsupported Zcash transaction');\n        }\n        tx.consensusBranchId = network.consensusBranchId[tx.version];\n    }\n    if (coins.isDash(network)) {\n        tx.type = tx.version >> 16;\n        tx.version = tx.version & 0xffff;\n        if (tx.version === 3 && (tx.type < Transaction.DASH_NORMAL || tx.type > Transaction.DASH_QUORUM_COMMITMENT)) {\n            throw new Error('Unsupported Dash transaction type');\n        }\n    }\n    var marker = bufferReader.readUInt8();\n    var flag = bufferReader.readUInt8();\n    var hasWitnesses = false;\n    if (marker === Transaction.ADVANCED_TRANSACTION_MARKER &&\n        flag === Transaction.ADVANCED_TRANSACTION_FLAG &&\n        !coins.isZcashCompatible(network)) {\n        hasWitnesses = true;\n    }\n    else {\n        bufferReader.offset -= 2;\n    }\n    if (tx.isOverwinterCompatible()) {\n        tx.versionGroupId = bufferReader.readUInt32();\n    }\n    var vinLen = bufferReader.readVarInt();\n    for (var i = 0; i < vinLen; ++i) {\n        tx.ins.push({\n            hash: bufferReader.readSlice(32),\n            index: bufferReader.readUInt32(),\n            script: bufferReader.readVarSlice(),\n            sequence: bufferReader.readUInt32(),\n            witness: EMPTY_WITNESS\n        });\n    }\n    var voutLen = bufferReader.readVarInt();\n    for (i = 0; i < voutLen; ++i) {\n        tx.outs.push({\n            value: bufferReader.readUInt64(),\n            script: bufferReader.readVarSlice()\n        });\n    }\n    if (hasWitnesses) {\n        for (i = 0; i < vinLen; ++i) {\n            tx.ins[i].witness = bufferReader.readVector();\n        }\n        // was this pointless?\n        if (!tx.hasWitnesses())\n            throw new Error('Transaction has superfluous witness data');\n    }\n    tx.locktime = bufferReader.readUInt32();\n    if (coins.isZcashCompatible(network)) {\n        if (tx.isOverwinterCompatible()) {\n            tx.expiryHeight = bufferReader.readUInt32();\n        }\n        if (tx.isSaplingCompatible()) {\n            tx.valueBalance = bufferReader.readSlice(8);\n            if (!tx.valueBalance.equals(VALUE_INT64_ZERO)) {\n                /* istanbul ignore next */\n                throw new Error(\"unsupported valueBalance\");\n            }\n            var nShieldedSpend = bufferReader.readVarInt();\n            if (nShieldedSpend !== 0) {\n                /* istanbul ignore next */\n                throw new Error(\"shielded spend not supported\");\n            }\n            var nShieldedOutput = bufferReader.readVarInt();\n            if (nShieldedOutput !== 0) {\n                /* istanbul ignore next */\n                throw new Error(\"shielded output not supported\");\n            }\n        }\n        if (tx.supportsJoinSplits()) {\n            var joinSplitsLen = bufferReader.readVarInt();\n            if (joinSplitsLen !== 0) {\n                /* istanbul ignore next */\n                throw new Error(\"joinSplits not supported\");\n            }\n        }\n    }\n    if (tx.isDashSpecialTransaction()) {\n        tx.extraPayload = bufferReader.readVarSlice();\n    }\n    tx.network = network;\n    if (__noStrict)\n        return tx;\n    if (bufferReader.offset !== buffer.length)\n        throw new Error('Transaction has unexpected data');\n    return tx;\n};\nTransaction.fromHex = function (hex, network) {\n    return Transaction.fromBuffer(Buffer.from(hex, 'hex'), network);\n};\nTransaction.isCoinbaseHash = function (buffer) {\n    typeforce(types.Hash256bit, buffer);\n    for (var i = 0; i < 32; ++i) {\n        if (buffer[i] !== 0)\n            return false;\n    }\n    return true;\n};\nTransaction.prototype.isSaplingCompatible = function () {\n    return coins.isZcashCompatible(this.network) && this.version >= zcashVersion.SAPLING;\n};\nTransaction.prototype.isOverwinterCompatible = function () {\n    return coins.isZcashCompatible(this.network) && this.version >= zcashVersion.OVERWINTER;\n};\nTransaction.prototype.supportsJoinSplits = function () {\n    return coins.isZcashCompatible(this.network) && this.version >= zcashVersion.JOINSPLITS_SUPPORT;\n};\nTransaction.prototype.versionSupportsDashSpecialTransactions = function () {\n    return coins.isDash(this.network) && this.version >= 3;\n};\nTransaction.prototype.isDashSpecialTransaction = function () {\n    return this.versionSupportsDashSpecialTransactions() && this.type !== Transaction.DASH_NORMAL;\n};\nTransaction.prototype.isCoinbase = function () {\n    return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash);\n};\nTransaction.prototype.addInput = function (hash, index, sequence, scriptSig) {\n    typeforce(types.tuple(types.Hash256bit, types.UInt32, types.maybe(types.UInt32), types.maybe(types.Buffer)), arguments);\n    if (types.Null(sequence)) {\n        sequence = Transaction.DEFAULT_SEQUENCE;\n    }\n    // Add the input and return the input's index\n    return (this.ins.push({\n        hash: hash,\n        index: index,\n        script: scriptSig || EMPTY_SCRIPT,\n        sequence: sequence,\n        witness: EMPTY_WITNESS\n    }) - 1);\n};\nTransaction.prototype.addOutput = function (scriptPubKey, value) {\n    typeforce(types.tuple(types.Buffer, types.Satoshi), arguments);\n    // Add the output and return the output's index\n    return (this.outs.push({\n        script: scriptPubKey,\n        value: value\n    }) - 1);\n};\nTransaction.prototype.hasWitnesses = function () {\n    return this.ins.some(function (x) {\n        return x.witness.length !== 0;\n    });\n};\nTransaction.prototype.weight = function () {\n    var base = this.__byteLength(false);\n    var total = this.__byteLength(true);\n    return base * 3 + total;\n};\nTransaction.prototype.virtualSize = function () {\n    return Math.ceil(this.weight() / 4);\n};\nTransaction.prototype.byteLength = function () {\n    return this.__byteLength(true);\n};\nTransaction.prototype.zcashTransactionByteLength = function () {\n    if (!coins.isZcashCompatible(this.network)) {\n        throw new Error('zcashTransactionByteLength can only be called when using Zcash or compatible network');\n    }\n    var byteLength = 0;\n    byteLength += 4; // Header\n    if (this.isOverwinterCompatible()) {\n        byteLength += 4; // nVersionGroupId\n    }\n    byteLength += varuint.encodingLength(this.ins.length); // tx_in_count\n    byteLength += this.ins.reduce(function (sum, input) { return sum + 40 + varSliceSize(input.script); }, 0); // tx_in\n    byteLength += varuint.encodingLength(this.outs.length); // tx_out_count\n    byteLength += this.outs.reduce(function (sum, output) { return sum + 8 + varSliceSize(output.script); }, 0); // tx_out\n    byteLength += 4; // lock_time\n    if (this.isOverwinterCompatible()) {\n        byteLength += 4; // nExpiryHeight\n    }\n    if (this.isSaplingCompatible()) {\n        byteLength += 8; // valueBalance\n        byteLength += varuint.encodingLength(0); // inputs\n        byteLength += varuint.encodingLength(0); // outputs\n    }\n    if (this.supportsJoinSplits()) {\n        byteLength += varuint.encodingLength(0); // joinsplits\n    }\n    return byteLength;\n};\nTransaction.prototype.__byteLength = function (__allowWitness) {\n    var hasWitnesses = __allowWitness && this.hasWitnesses();\n    if (coins.isZcashCompatible(this.network)) {\n        return this.zcashTransactionByteLength();\n    }\n    return ((hasWitnesses ? 10 : 8) +\n        varuint.encodingLength(this.ins.length) +\n        varuint.encodingLength(this.outs.length) +\n        this.ins.reduce(function (sum, input) { return sum + 40 + varSliceSize(input.script); }, 0) +\n        this.outs.reduce(function (sum, output) { return sum + 8 + varSliceSize(output.script); }, 0) +\n        (this.isDashSpecialTransaction() ? varSliceSize(this.extraPayload) : 0) +\n        (hasWitnesses ? this.ins.reduce(function (sum, input) { return sum + vectorSize(input.witness); }, 0) : 0));\n};\nTransaction.prototype.clone = function () {\n    var newTx = new Transaction(this.network);\n    newTx.version = this.version;\n    newTx.locktime = this.locktime;\n    newTx.network = this.network;\n    if (coins.isDash(this.network)) {\n        newTx.type = this.type;\n        newTx.extraPayload = this.extraPayload;\n    }\n    if (coins.isZcashCompatible(this.network)) {\n        newTx.consensusBranchId = this.consensusBranchId;\n    }\n    if (this.isOverwinterCompatible()) {\n        newTx.overwintered = this.overwintered;\n        newTx.versionGroupId = this.versionGroupId;\n        newTx.expiryHeight = this.expiryHeight;\n    }\n    if (this.isSaplingCompatible()) {\n        newTx.valueBalance = this.valueBalance;\n    }\n    newTx.ins = this.ins.map(function (txIn) {\n        return {\n            hash: txIn.hash,\n            index: txIn.index,\n            script: txIn.script,\n            sequence: txIn.sequence,\n            witness: txIn.witness\n        };\n    });\n    newTx.outs = this.outs.map(function (txOut) {\n        return {\n            script: txOut.script,\n            value: txOut.value\n        };\n    });\n    return newTx;\n};\n/**\n * Get Zcash header or version\n * @returns {number}\n */\nTransaction.prototype.getHeader = function () {\n    var mask = (this.overwintered ? 1 : 0);\n    var header = this.version | (mask << 31);\n    return header;\n};\n/**\n * Hash transaction for signing a specific input.\n *\n * Bitcoin uses a different hash for each signed transaction input.\n * This method copies the transaction, makes the necessary changes based on the\n * hashType, and then hashes the result.\n * This hash can then be used to sign the provided transaction input.\n */\nTransaction.prototype.hashForSignature = function (inIndex, prevOutScript, hashType) {\n    typeforce(types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number), arguments);\n    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n    if (inIndex >= this.ins.length)\n        return ONE;\n    // ignore OP_CODESEPARATOR\n    var ourScript = bscript.compile(bscript.decompile(prevOutScript).filter(function (x) {\n        return x !== opcodes.OP_CODESEPARATOR;\n    }));\n    var txTmp = this.clone();\n    // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n    if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n        txTmp.outs = [];\n        // ignore sequence numbers (except at inIndex)\n        txTmp.ins.forEach(function (input, i) {\n            if (i === inIndex)\n                return;\n            input.sequence = 0;\n        });\n        // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n    }\n    else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n        // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n        if (inIndex >= this.outs.length)\n            return ONE;\n        // truncate outputs after\n        txTmp.outs.length = inIndex + 1;\n        // \"blank\" outputs before\n        for (var i = 0; i < inIndex; i++) {\n            txTmp.outs[i] = BLANK_OUTPUT;\n        }\n        // ignore sequence numbers (except at inIndex)\n        txTmp.ins.forEach(function (input, y) {\n            if (y === inIndex)\n                return;\n            input.sequence = 0;\n        });\n    }\n    // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n    if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n        txTmp.ins = [txTmp.ins[inIndex]];\n        txTmp.ins[0].script = ourScript;\n        // SIGHASH_ALL: only ignore input scripts\n    }\n    else {\n        // \"blank\" others input scripts\n        txTmp.ins.forEach(function (input) { input.script = EMPTY_SCRIPT; });\n        txTmp.ins[inIndex].script = ourScript;\n    }\n    // serialize and hash\n    var buffer = Buffer.allocUnsafe(txTmp.__byteLength(false) + 4);\n    buffer.writeInt32LE(hashType, buffer.length - 4);\n    txTmp.__toBuffer(buffer, 0, false);\n    return bcrypto.hash256(buffer);\n};\n/**\n * Calculate the hash to verify the signature against\n * @param inIndex\n * @param prevoutScript\n * @param value - The previous output's amount\n * @param hashType\n * @param isSegwit\n * @returns {*}\n */\nTransaction.prototype.hashForSignatureByNetwork = function (inIndex, prevoutScript, value, hashType, isSegwit) {\n    switch (coins.getMainnet(this.network)) {\n        case networks.zcash:\n        case networks.verus:\n        case networks.kmd:\n        case networks[\"default\"]:\n            return this.hashForZcashSignature(inIndex, prevoutScript, value, hashType);\n        case networks.bitcoincash:\n        case networks.bitcoinsv:\n        case networks.bitcoingold:\n            /*\n              Bitcoin Cash supports a FORKID flag. When set, we hash using hashing algorithm\n               that is used for segregated witness transactions (defined in BIP143).\n      \n              The flag is also used by BitcoinSV and BitcoinGold\n      \n              https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/replay-protected-sighash.md\n             */\n            var addForkId = (hashType & Transaction.SIGHASH_FORKID) > 0;\n            if (addForkId) {\n                /*\n                  ``The sighash type is altered to include a 24-bit fork id in its most significant bits.''\n                  We also use unsigned right shift operator `>>>` to cast to UInt32\n                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\n                 */\n                hashType = (hashType | this.network.forkId << 8) >>> 0;\n                return this.hashForWitnessV0(inIndex, prevoutScript, value, hashType);\n            }\n    }\n    if (isSegwit) {\n        return this.hashForWitnessV0(inIndex, prevoutScript, value, hashType);\n    }\n    else {\n        return this.hashForSignature(inIndex, prevoutScript, hashType);\n    }\n};\n/** @deprecated use hashForSignatureByNetwork */\n/* istanbul ignore next */\nTransaction.prototype.hashForCashSignature = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (coins.getMainnet(this.network) !== networks.bitcoincash &&\n        coins.getMainnet(this.network) !== networks.bitcoinsv) {\n        throw new Error(\"called hashForCashSignature on transaction with network \" + coins.getNetworkName(this.network));\n    }\n    return this.hashForSignatureByNetwork.apply(this, args);\n};\n/** @deprecated use hashForSignatureByNetwork */\n/* istanbul ignore next */\nTransaction.prototype.hashForGoldSignature = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (coins.getMainnet(this.network) !== networks.bitcoingold) {\n        throw new Error(\"called hashForGoldSignature on transaction with network \" + coins.getNetworkName(this.network));\n    }\n    return this.hashForSignatureByNetwork.apply(this, args);\n};\n/**\n * Blake2b hashing algorithm for Zcash\n * @param bufferToHash\n * @param personalization\n * @returns 256-bit BLAKE2b hash\n */\nTransaction.prototype.getBlake2bHash = function (bufferToHash, personalization) {\n    var out = Buffer.allocUnsafe(32);\n    return blake2b(out.length, null, null, Buffer.from(personalization)).update(bufferToHash).digest(out);\n};\n/**\n * Build a hash for all or none of the transaction inputs depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getPrevoutHash = function (hashType) {\n    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n        var bufferWriter = new BufferWriter(Buffer.allocUnsafe(36 * this.ins.length));\n        this.ins.forEach(function (txIn) {\n            bufferWriter.writeSlice(txIn.hash);\n            bufferWriter.writeUInt32(txIn.index);\n        });\n        if (coins.isZcashCompatible(this.network)) {\n            return this.getBlake2bHash(bufferWriter.buffer, 'ZcashPrevoutHash');\n        }\n        return bcrypto.hash256(bufferWriter.buffer);\n    }\n    return ZERO;\n};\n/**\n * Build a hash for all or none of the transactions inputs sequence numbers depending on the hashtype\n * @param hashType\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getSequenceHash = function (hashType) {\n    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) &&\n        (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n        (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n        var bufferWriter = new BufferWriter(Buffer.allocUnsafe(4 * this.ins.length));\n        this.ins.forEach(function (txIn) {\n            bufferWriter.writeUInt32(txIn.sequence);\n        });\n        if (coins.isZcashCompatible(this.network)) {\n            return this.getBlake2bHash(bufferWriter.buffer, 'ZcashSequencHash');\n        }\n        return bcrypto.hash256(bufferWriter.buffer);\n    }\n    return ZERO;\n};\n/**\n * Build a hash for one, all or none of the transaction outputs depending on the hashtype\n * @param hashType\n * @param inIndex\n * @returns double SHA-256, 256-bit BLAKE2b hash or 256-bit zero if doesn't apply\n */\nTransaction.prototype.getOutputsHash = function (hashType, inIndex) {\n    var bufferWriter;\n    if ((hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n        // Find out the size of the outputs and write them\n        var txOutsSize = this.outs.reduce(function (sum, output) {\n            return sum + 8 + varSliceSize(output.script);\n        }, 0);\n        bufferWriter = new BufferWriter(Buffer.allocUnsafe(txOutsSize));\n        this.outs.forEach(function (out) {\n            bufferWriter.writeUInt64(out.value);\n            bufferWriter.writeVarSlice(out.script);\n        });\n        if (coins.isZcashCompatible(this.network)) {\n            return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash');\n        }\n        return bcrypto.hash256(bufferWriter.buffer);\n    }\n    else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {\n        // Write only the output specified in inIndex\n        var output = this.outs[inIndex];\n        bufferWriter = new BufferWriter(Buffer.allocUnsafe(8 + varSliceSize(output.script)));\n        bufferWriter.writeUInt64(output.value);\n        bufferWriter.writeVarSlice(output.script);\n        if (coins.isZcashCompatible(this.network)) {\n            return this.getBlake2bHash(bufferWriter.buffer, 'ZcashOutputsHash');\n        }\n        return bcrypto.hash256(bufferWriter.buffer);\n    }\n    return ZERO;\n};\n/**\n * Hash transaction for signing a transparent transaction in Zcash. Protected transactions are not supported.\n * @param inIndex\n * @param prevOutScript\n * @param value\n * @param hashType\n * @returns double SHA-256 or 256-bit BLAKE2b hash\n */\nTransaction.prototype.hashForZcashSignature = function (inIndex, prevOutScript, value, hashType) {\n    typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);\n    if (!coins.isZcashCompatible(this.network)) {\n        throw new Error('hashForZcashSignature can only be called when using Zcash or compatible network');\n    }\n    if (inIndex >= this.ins.length && inIndex !== VALUE_UINT64_MAX) {\n        /* istanbul ignore next */\n        throw new Error('Input index is out of range');\n    }\n    if (this.isOverwinterCompatible()) {\n        var hashPrevouts = this.getPrevoutHash(hashType);\n        var hashSequence = this.getSequenceHash(hashType);\n        var hashOutputs = this.getOutputsHash(hashType, inIndex);\n        var hashJoinSplits = ZERO;\n        var hashShieldedSpends = ZERO;\n        var hashShieldedOutputs = ZERO;\n        var bufferWriter;\n        var baseBufferSize = 0;\n        baseBufferSize += 4 * 5; // header, nVersionGroupId, lock_time, nExpiryHeight, hashType\n        baseBufferSize += 32 * 4; // 256 hashes: hashPrevouts, hashSequence, hashOutputs, hashJoinSplits\n        if (inIndex !== VALUE_UINT64_MAX) {\n            // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig), we need extra space\n            baseBufferSize += 4 * 2; // input.index, input.sequence\n            baseBufferSize += 8; // value\n            baseBufferSize += 32; // input.hash\n            baseBufferSize += varSliceSize(prevOutScript); // prevOutScript\n        }\n        if (this.isSaplingCompatible()) {\n            baseBufferSize += 32 * 2; // hashShieldedSpends and hashShieldedOutputs\n            baseBufferSize += 8; // valueBalance\n        }\n        bufferWriter = new BufferWriter(Buffer.alloc(baseBufferSize));\n        bufferWriter.writeInt32(this.getHeader());\n        bufferWriter.writeUInt32(this.versionGroupId);\n        bufferWriter.writeSlice(hashPrevouts);\n        bufferWriter.writeSlice(hashSequence);\n        bufferWriter.writeSlice(hashOutputs);\n        bufferWriter.writeSlice(hashJoinSplits);\n        if (this.isSaplingCompatible()) {\n            bufferWriter.writeSlice(hashShieldedSpends);\n            bufferWriter.writeSlice(hashShieldedOutputs);\n        }\n        bufferWriter.writeUInt32(this.locktime);\n        bufferWriter.writeUInt32(this.expiryHeight);\n        if (this.isSaplingCompatible()) {\n            bufferWriter.writeSlice(VALUE_INT64_ZERO);\n        }\n        bufferWriter.writeUInt32(hashType);\n        // If this hash is for a transparent input signature (i.e. not for txTo.joinSplitSig):\n        if (inIndex !== VALUE_UINT64_MAX) {\n            // The input being signed (replacing the scriptSig with scriptCode + amount)\n            // The prevout may already be contained in hashPrevout, and the nSequence\n            // may already be contained in hashSequence.\n            var input = this.ins[inIndex];\n            bufferWriter.writeSlice(input.hash);\n            bufferWriter.writeUInt32(input.index);\n            bufferWriter.writeVarSlice(prevOutScript);\n            bufferWriter.writeUInt64(value);\n            bufferWriter.writeUInt32(input.sequence);\n        }\n        var personalization = Buffer.alloc(16);\n        var prefix = 'ZcashSigHash';\n        personalization.write(prefix);\n        personalization.writeUInt32LE(this.consensusBranchId, prefix.length);\n        return this.getBlake2bHash(bufferWriter.buffer, personalization);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"unsupported version\");\n};\nTransaction.prototype.hashForWitnessV0 = function (inIndex, prevOutScript, value, hashType) {\n    typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments);\n    var hashPrevouts = this.getPrevoutHash(hashType);\n    var hashSequence = this.getSequenceHash(hashType);\n    var hashOutputs = this.getOutputsHash(hashType, inIndex);\n    var bufferWriter = new BufferWriter(Buffer.allocUnsafe(156 + varSliceSize(prevOutScript)));\n    var input = this.ins[inIndex];\n    bufferWriter.writeInt32(this.version);\n    bufferWriter.writeSlice(hashPrevouts);\n    bufferWriter.writeSlice(hashSequence);\n    bufferWriter.writeSlice(input.hash);\n    bufferWriter.writeUInt32(input.index);\n    bufferWriter.writeVarSlice(prevOutScript);\n    bufferWriter.writeUInt64(value);\n    bufferWriter.writeUInt32(input.sequence);\n    bufferWriter.writeSlice(hashOutputs);\n    bufferWriter.writeUInt32(this.locktime);\n    bufferWriter.writeUInt32(hashType);\n    return bcrypto.hash256(bufferWriter.buffer);\n};\nTransaction.prototype.getHash = function () {\n    return bcrypto.hash256(this.__toBuffer(undefined, undefined, false));\n};\nTransaction.prototype.getId = function () {\n    // transaction hash's are displayed in reverse order\n    return this.getHash().reverse().toString('hex');\n};\nTransaction.prototype.toBuffer = function (buffer, initialOffset) {\n    return this.__toBuffer(buffer, initialOffset, true);\n};\nTransaction.prototype.__toBuffer = function (buffer, initialOffset, __allowWitness) {\n    if (!buffer)\n        buffer = Buffer.allocUnsafe(this.__byteLength(__allowWitness));\n    var bufferWriter = new BufferWriter(buffer, initialOffset || 0);\n    function writeUInt16(i) {\n        bufferWriter.offset = bufferWriter.buffer.writeUInt16LE(i, bufferWriter.offset);\n    }\n    if (this.isOverwinterCompatible()) {\n        var mask = (this.overwintered ? 1 : 0);\n        bufferWriter.writeInt32(this.version | (mask << 31)); // Set overwinter bit\n        bufferWriter.writeUInt32(this.versionGroupId);\n    }\n    else if (this.isDashSpecialTransaction()) {\n        writeUInt16(this.version);\n        writeUInt16(this.type);\n    }\n    else {\n        bufferWriter.writeInt32(this.version);\n    }\n    var hasWitnesses = __allowWitness && this.hasWitnesses();\n    if (hasWitnesses) {\n        bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);\n        bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);\n    }\n    bufferWriter.writeVarInt(this.ins.length);\n    this.ins.forEach(function (txIn) {\n        bufferWriter.writeSlice(txIn.hash);\n        bufferWriter.writeUInt32(txIn.index);\n        bufferWriter.writeVarSlice(txIn.script);\n        bufferWriter.writeUInt32(txIn.sequence);\n    });\n    bufferWriter.writeVarInt(this.outs.length);\n    this.outs.forEach(function (txOut) {\n        if (!txOut.valueBuffer) {\n            bufferWriter.writeUInt64(txOut.value);\n        }\n        else {\n            bufferWriter.writeSlice(txOut.valueBuffer);\n        }\n        bufferWriter.writeVarSlice(txOut.script);\n    });\n    if (hasWitnesses) {\n        this.ins.forEach(function (input) {\n            bufferWriter.writeVector(input.witness);\n        });\n    }\n    bufferWriter.writeUInt32(this.locktime);\n    if (this.isOverwinterCompatible()) {\n        bufferWriter.writeUInt32(this.expiryHeight);\n    }\n    if (this.isSaplingCompatible()) {\n        bufferWriter.writeSlice(VALUE_INT64_ZERO);\n        bufferWriter.writeVarInt(0); // vShieldedSpendLength\n        bufferWriter.writeVarInt(0); // vShieldedOutputLength\n    }\n    if (this.supportsJoinSplits()) {\n        bufferWriter.writeVarInt(0); // joinsSplits length\n    }\n    if (this.isDashSpecialTransaction()) {\n        bufferWriter.writeVarSlice(this.extraPayload);\n    }\n    if (initialOffset !== undefined)\n        return buffer.slice(initialOffset, bufferWriter.offset);\n    // avoid slicing unless necessary\n    // TODO (https://github.com/BitGo/bitgo-utxo-lib/issues/11): we shouldn't have to slice the final buffer\n    return buffer.slice(0, bufferWriter.offset);\n};\nTransaction.prototype.toHex = function () {\n    return this.toBuffer().toString('hex');\n};\nTransaction.prototype.setInputScript = function (index, scriptSig) {\n    typeforce(types.tuple(types.Number, types.Buffer), arguments);\n    this.ins[index].script = scriptSig;\n};\nTransaction.prototype.setWitness = function (index, witness) {\n    typeforce(types.tuple(types.Number, [types.Buffer]), arguments);\n    this.ins[index].witness = witness;\n};\nmodule.exports = Transaction;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,MAAM;AAC1C,IAAIE,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACjC,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAU,CAAC;AACjC,IAAIG,EAAE,GAAGH,OAAO,CAAC,eAAe,CAAC;EAAEI,YAAY,GAAGD,EAAE,CAACC,YAAY;EAAEC,YAAY,GAAGF,EAAE,CAACE,YAAY;AACjG,IAAIC,KAAK,GAAGN,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIO,OAAO,GAAGP,OAAO,CAAC,aAAa,CAAC;AACpC,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,YAAY,CAAC;AACpC,IAAIS,SAAS,GAAGT,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIU,KAAK,GAAGV,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIW,OAAO,GAAGX,OAAO,CAAC,iBAAiB,CAAC;AACxC,IAAIY,OAAO,GAAGZ,OAAO,CAAC,gBAAgB,CAAC;AACvC,IAAIa,YAAY,GAAGb,OAAO,CAAC,uBAAuB,CAAC;AACnD,SAASc,YAAYA,CAACC,UAAU,EAAE;EAC9B,IAAIC,MAAM,GAAGD,UAAU,CAACC,MAAM;EAC9B,OAAOL,OAAO,CAACM,cAAc,CAACD,MAAM,CAAC,GAAGA,MAAM;AAClD;AACA,SAASE,UAAUA,CAACC,UAAU,EAAE;EAC5B,IAAIH,MAAM,GAAGG,UAAU,CAACH,MAAM;EAC9B,OAAOL,OAAO,CAACM,cAAc,CAACD,MAAM,CAAC,GAAGG,UAAU,CAACC,MAAM,CAAC,UAAUC,GAAG,EAAEC,OAAO,EAAE;IAC9E,OAAOD,GAAG,GAAGP,YAAY,CAACQ,OAAO,CAAC;EACtC,CAAC,EAAE,CAAC,CAAC;AACT;AACA;AACA,SAASC,WAAWA,CAACC,OAAO,EAAE;EAC1B,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAGhB,QAAQ,CAACiB,OAAO;EAAE;EACtD,IAAI,CAACC,OAAO,GAAG,CAAC;EAChB,IAAI,CAACC,QAAQ,GAAG,CAAC;EACjB,IAAI,CAACC,GAAG,GAAG,EAAE;EACb,IAAI,CAACC,IAAI,GAAG,EAAE;EACd,IAAI,CAACL,OAAO,GAAGA,OAAO;EACtB,IAAIlB,KAAK,CAACwB,iBAAiB,CAACN,OAAO,CAAC,EAAE;IAClC;IACA,IAAI,CAACO,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB;IACA,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC,CAAC;IACvB,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC,CAAC;IACzB,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC,CAAC;IACvB;IACA,IAAI,CAACC,iBAAiB,GAAGb,OAAO,CAACa,iBAAiB,CAAC,IAAI,CAACX,OAAO,CAAC;EACpE;EACA,IAAIpB,KAAK,CAACgC,MAAM,CAACd,OAAO,CAAC,EAAE;IACvB;IACA,IAAI,CAACe,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,YAAY,GAAGzC,MAAM,CAAC0C,KAAK,CAAC,CAAC,CAAC;EACvC;AACJ;AACAlB,WAAW,CAACmB,gBAAgB,GAAG,UAAU;AACzCnB,WAAW,CAACoB,WAAW,GAAG,IAAI;AAC9BpB,WAAW,CAACqB,YAAY,GAAG,IAAI;AAC/BrB,WAAW,CAACsB,cAAc,GAAG,IAAI;AACjCtB,WAAW,CAACuB,oBAAoB,GAAG,IAAI;AACvC;AACA;AACA;AACA;AACAvB,WAAW,CAACwB,cAAc,GAAG,IAAI;AACjC;AACAxB,WAAW,CAACyB,yBAAyB,GAAGzB,WAAW,CAACwB,cAAc;AAClExB,WAAW,CAAC0B,2BAA2B,GAAG,IAAI;AAC9C1B,WAAW,CAAC2B,yBAAyB,GAAG,IAAI;AAC5C,IAAIC,YAAY,GAAGpD,MAAM,CAACqD,WAAW,CAAC,CAAC,CAAC;AACxC,IAAIC,aAAa,GAAG,EAAE;AACtB,IAAIC,IAAI,GAAGvD,MAAM,CAACwD,IAAI,CAAC,kEAAkE,EAAE,KAAK,CAAC;AACjG,IAAIC,GAAG,GAAGzD,MAAM,CAACwD,IAAI,CAAC,kEAAkE,EAAE,KAAK,CAAC;AAChG;AACA,IAAIE,gBAAgB,GAAG1D,MAAM,CAACwD,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC;AAC7D,IAAIG,gBAAgB,GAAG3D,MAAM,CAACwD,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC;AAC7D,IAAII,YAAY,GAAG;EACfC,MAAM,EAAET,YAAY;EACpBU,WAAW,EAAEJ;AACjB,CAAC;AACDlC,WAAW,CAACuC,WAAW,GAAG,CAAC;AAC3BvC,WAAW,CAACwC,sBAAsB,GAAG,CAAC;AACtCxC,WAAW,CAACyC,4BAA4B,GAAG,CAAC;AAC5CzC,WAAW,CAAC0C,8BAA8B,GAAG,CAAC;AAC9C1C,WAAW,CAAC2C,2BAA2B,GAAG,CAAC;AAC3C3C,WAAW,CAAC4C,aAAa,GAAG,CAAC;AAC7B5C,WAAW,CAAC6C,sBAAsB,GAAG,CAAC;AACtC7C,WAAW,CAAC8C,UAAU,GAAG,UAAUC,MAAM,EAAE9C,OAAO,EAAE+C,UAAU,EAAE;EAC5D,IAAI/C,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAGhB,QAAQ,CAACiB,OAAO;EAAE;EACtD,IAAI+C,YAAY,GAAG,IAAIpE,YAAY,CAACkE,MAAM,CAAC;EAC3C,IAAIG,EAAE,GAAG,IAAIlD,WAAW,CAACC,OAAO,CAAC;EACjCiD,EAAE,CAAC/C,OAAO,GAAG8C,YAAY,CAACE,SAAS,CAAC,CAAC;EACrC,IAAIpE,KAAK,CAACwB,iBAAiB,CAACN,OAAO,CAAC,EAAE;IAClC;IACAiD,EAAE,CAACvC,YAAY,GAAGuC,EAAE,CAAC/C,OAAO,KAAK,EAAE,CAAC,CAAC;IACrC+C,EAAE,CAAC/C,OAAO,GAAG+C,EAAE,CAAC/C,OAAO,GAAG,WAAW,CAAC,CAAC;IACvC,IAAI+C,EAAE,CAACvC,YAAY,IAAI,CAACV,OAAO,CAACa,iBAAiB,CAACsC,cAAc,CAACF,EAAE,CAAC/C,OAAO,CAAC,EAAE;MAC1E,MAAM,IAAIkD,KAAK,CAAC,+BAA+B,CAAC;IACpD;IACAH,EAAE,CAACpC,iBAAiB,GAAGb,OAAO,CAACa,iBAAiB,CAACoC,EAAE,CAAC/C,OAAO,CAAC;EAChE;EACA,IAAIpB,KAAK,CAACgC,MAAM,CAACd,OAAO,CAAC,EAAE;IACvBiD,EAAE,CAAClC,IAAI,GAAGkC,EAAE,CAAC/C,OAAO,IAAI,EAAE;IAC1B+C,EAAE,CAAC/C,OAAO,GAAG+C,EAAE,CAAC/C,OAAO,GAAG,MAAM;IAChC,IAAI+C,EAAE,CAAC/C,OAAO,KAAK,CAAC,KAAK+C,EAAE,CAAClC,IAAI,GAAGhB,WAAW,CAACuC,WAAW,IAAIW,EAAE,CAAClC,IAAI,GAAGhB,WAAW,CAAC6C,sBAAsB,CAAC,EAAE;MACzG,MAAM,IAAIQ,KAAK,CAAC,mCAAmC,CAAC;IACxD;EACJ;EACA,IAAIC,MAAM,GAAGL,YAAY,CAACM,SAAS,CAAC,CAAC;EACrC,IAAIC,IAAI,GAAGP,YAAY,CAACM,SAAS,CAAC,CAAC;EACnC,IAAIE,YAAY,GAAG,KAAK;EACxB,IAAIH,MAAM,KAAKtD,WAAW,CAAC0B,2BAA2B,IAClD8B,IAAI,KAAKxD,WAAW,CAAC2B,yBAAyB,IAC9C,CAAC5C,KAAK,CAACwB,iBAAiB,CAACN,OAAO,CAAC,EAAE;IACnCwD,YAAY,GAAG,IAAI;EACvB,CAAC,MACI;IACDR,YAAY,CAACS,MAAM,IAAI,CAAC;EAC5B;EACA,IAAIR,EAAE,CAACS,sBAAsB,CAAC,CAAC,EAAE;IAC7BT,EAAE,CAACtC,cAAc,GAAGqC,YAAY,CAACW,UAAU,CAAC,CAAC;EACjD;EACA,IAAIC,MAAM,GAAGZ,YAAY,CAACa,UAAU,CAAC,CAAC;EACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAE,EAAEE,CAAC,EAAE;IAC7Bb,EAAE,CAAC7C,GAAG,CAAC2D,IAAI,CAAC;MACRC,IAAI,EAAEhB,YAAY,CAACiB,SAAS,CAAC,EAAE,CAAC;MAChCC,KAAK,EAAElB,YAAY,CAACW,UAAU,CAAC,CAAC;MAChCvB,MAAM,EAAEY,YAAY,CAACmB,YAAY,CAAC,CAAC;MACnCC,QAAQ,EAAEpB,YAAY,CAACW,UAAU,CAAC,CAAC;MACnC7D,OAAO,EAAE+B;IACb,CAAC,CAAC;EACN;EACA,IAAIwC,OAAO,GAAGrB,YAAY,CAACa,UAAU,CAAC,CAAC;EACvC,KAAKC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,OAAO,EAAE,EAAEP,CAAC,EAAE;IAC1Bb,EAAE,CAAC5C,IAAI,CAAC0D,IAAI,CAAC;MACTO,KAAK,EAAEtB,YAAY,CAACuB,UAAU,CAAC,CAAC;MAChCnC,MAAM,EAAEY,YAAY,CAACmB,YAAY,CAAC;IACtC,CAAC,CAAC;EACN;EACA,IAAIX,YAAY,EAAE;IACd,KAAKM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAE,EAAEE,CAAC,EAAE;MACzBb,EAAE,CAAC7C,GAAG,CAAC0D,CAAC,CAAC,CAAChE,OAAO,GAAGkD,YAAY,CAACwB,UAAU,CAAC,CAAC;IACjD;IACA;IACA,IAAI,CAACvB,EAAE,CAACO,YAAY,CAAC,CAAC,EAClB,MAAM,IAAIJ,KAAK,CAAC,0CAA0C,CAAC;EACnE;EACAH,EAAE,CAAC9C,QAAQ,GAAG6C,YAAY,CAACW,UAAU,CAAC,CAAC;EACvC,IAAI7E,KAAK,CAACwB,iBAAiB,CAACN,OAAO,CAAC,EAAE;IAClC,IAAIiD,EAAE,CAACS,sBAAsB,CAAC,CAAC,EAAE;MAC7BT,EAAE,CAACrC,YAAY,GAAGoC,YAAY,CAACW,UAAU,CAAC,CAAC;IAC/C;IACA,IAAIV,EAAE,CAACwB,mBAAmB,CAAC,CAAC,EAAE;MAC1BxB,EAAE,CAACyB,YAAY,GAAG1B,YAAY,CAACiB,SAAS,CAAC,CAAC,CAAC;MAC3C,IAAI,CAAChB,EAAE,CAACyB,YAAY,CAACC,MAAM,CAACzC,gBAAgB,CAAC,EAAE;QAC3C;QACA,MAAM,IAAIkB,KAAK,CAAC,0BAA0B,CAAC;MAC/C;MACA,IAAIwB,cAAc,GAAG5B,YAAY,CAACa,UAAU,CAAC,CAAC;MAC9C,IAAIe,cAAc,KAAK,CAAC,EAAE;QACtB;QACA,MAAM,IAAIxB,KAAK,CAAC,8BAA8B,CAAC;MACnD;MACA,IAAIyB,eAAe,GAAG7B,YAAY,CAACa,UAAU,CAAC,CAAC;MAC/C,IAAIgB,eAAe,KAAK,CAAC,EAAE;QACvB;QACA,MAAM,IAAIzB,KAAK,CAAC,+BAA+B,CAAC;MACpD;IACJ;IACA,IAAIH,EAAE,CAAC6B,kBAAkB,CAAC,CAAC,EAAE;MACzB,IAAIC,aAAa,GAAG/B,YAAY,CAACa,UAAU,CAAC,CAAC;MAC7C,IAAIkB,aAAa,KAAK,CAAC,EAAE;QACrB;QACA,MAAM,IAAI3B,KAAK,CAAC,0BAA0B,CAAC;MAC/C;IACJ;EACJ;EACA,IAAIH,EAAE,CAAC+B,wBAAwB,CAAC,CAAC,EAAE;IAC/B/B,EAAE,CAACjC,YAAY,GAAGgC,YAAY,CAACmB,YAAY,CAAC,CAAC;EACjD;EACAlB,EAAE,CAACjD,OAAO,GAAGA,OAAO;EACpB,IAAI+C,UAAU,EACV,OAAOE,EAAE;EACb,IAAID,YAAY,CAACS,MAAM,KAAKX,MAAM,CAACtD,MAAM,EACrC,MAAM,IAAI4D,KAAK,CAAC,iCAAiC,CAAC;EACtD,OAAOH,EAAE;AACb,CAAC;AACDlD,WAAW,CAACkF,OAAO,GAAG,UAAUC,GAAG,EAAElF,OAAO,EAAE;EAC1C,OAAOD,WAAW,CAAC8C,UAAU,CAACtE,MAAM,CAACwD,IAAI,CAACmD,GAAG,EAAE,KAAK,CAAC,EAAElF,OAAO,CAAC;AACnE,CAAC;AACDD,WAAW,CAACoF,cAAc,GAAG,UAAUrC,MAAM,EAAE;EAC3C7D,SAAS,CAACC,KAAK,CAACkG,UAAU,EAAEtC,MAAM,CAAC;EACnC,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;IACzB,IAAIhB,MAAM,CAACgB,CAAC,CAAC,KAAK,CAAC,EACf,OAAO,KAAK;EACpB;EACA,OAAO,IAAI;AACf,CAAC;AACD/D,WAAW,CAACsF,SAAS,CAACZ,mBAAmB,GAAG,YAAY;EACpD,OAAO3F,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,IAAI,IAAI,CAACE,OAAO,IAAIb,YAAY,CAACiG,OAAO;AACxF,CAAC;AACDvF,WAAW,CAACsF,SAAS,CAAC3B,sBAAsB,GAAG,YAAY;EACvD,OAAO5E,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,IAAI,IAAI,CAACE,OAAO,IAAIb,YAAY,CAACkG,UAAU;AAC3F,CAAC;AACDxF,WAAW,CAACsF,SAAS,CAACP,kBAAkB,GAAG,YAAY;EACnD,OAAOhG,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,IAAI,IAAI,CAACE,OAAO,IAAIb,YAAY,CAACmG,kBAAkB;AACnG,CAAC;AACDzF,WAAW,CAACsF,SAAS,CAACI,sCAAsC,GAAG,YAAY;EACvE,OAAO3G,KAAK,CAACgC,MAAM,CAAC,IAAI,CAACd,OAAO,CAAC,IAAI,IAAI,CAACE,OAAO,IAAI,CAAC;AAC1D,CAAC;AACDH,WAAW,CAACsF,SAAS,CAACL,wBAAwB,GAAG,YAAY;EACzD,OAAO,IAAI,CAACS,sCAAsC,CAAC,CAAC,IAAI,IAAI,CAAC1E,IAAI,KAAKhB,WAAW,CAACuC,WAAW;AACjG,CAAC;AACDvC,WAAW,CAACsF,SAAS,CAACK,UAAU,GAAG,YAAY;EAC3C,OAAO,IAAI,CAACtF,GAAG,CAACZ,MAAM,KAAK,CAAC,IAAIO,WAAW,CAACoF,cAAc,CAAC,IAAI,CAAC/E,GAAG,CAAC,CAAC,CAAC,CAAC4D,IAAI,CAAC;AAChF,CAAC;AACDjE,WAAW,CAACsF,SAAS,CAACM,QAAQ,GAAG,UAAU3B,IAAI,EAAEE,KAAK,EAAEE,QAAQ,EAAEwB,SAAS,EAAE;EACzE3G,SAAS,CAACC,KAAK,CAAC2G,KAAK,CAAC3G,KAAK,CAACkG,UAAU,EAAElG,KAAK,CAAC4G,MAAM,EAAE5G,KAAK,CAAC6G,KAAK,CAAC7G,KAAK,CAAC4G,MAAM,CAAC,EAAE5G,KAAK,CAAC6G,KAAK,CAAC7G,KAAK,CAACX,MAAM,CAAC,CAAC,EAAEyH,SAAS,CAAC;EACvH,IAAI9G,KAAK,CAAC+G,IAAI,CAAC7B,QAAQ,CAAC,EAAE;IACtBA,QAAQ,GAAGrE,WAAW,CAACmB,gBAAgB;EAC3C;EACA;EACA,OAAQ,IAAI,CAACd,GAAG,CAAC2D,IAAI,CAAC;IAClBC,IAAI,EAAEA,IAAI;IACVE,KAAK,EAAEA,KAAK;IACZ9B,MAAM,EAAEwD,SAAS,IAAIjE,YAAY;IACjCyC,QAAQ,EAAEA,QAAQ;IAClBtE,OAAO,EAAE+B;EACb,CAAC,CAAC,GAAG,CAAC;AACV,CAAC;AACD9B,WAAW,CAACsF,SAAS,CAACa,SAAS,GAAG,UAAUC,YAAY,EAAE7B,KAAK,EAAE;EAC7DrF,SAAS,CAACC,KAAK,CAAC2G,KAAK,CAAC3G,KAAK,CAACX,MAAM,EAAEW,KAAK,CAACkH,OAAO,CAAC,EAAEJ,SAAS,CAAC;EAC9D;EACA,OAAQ,IAAI,CAAC3F,IAAI,CAAC0D,IAAI,CAAC;IACnB3B,MAAM,EAAE+D,YAAY;IACpB7B,KAAK,EAAEA;EACX,CAAC,CAAC,GAAG,CAAC;AACV,CAAC;AACDvE,WAAW,CAACsF,SAAS,CAAC7B,YAAY,GAAG,YAAY;EAC7C,OAAO,IAAI,CAACpD,GAAG,CAACiG,IAAI,CAAC,UAAUC,CAAC,EAAE;IAC9B,OAAOA,CAAC,CAACxG,OAAO,CAACN,MAAM,KAAK,CAAC;EACjC,CAAC,CAAC;AACN,CAAC;AACDO,WAAW,CAACsF,SAAS,CAACkB,MAAM,GAAG,YAAY;EACvC,IAAIC,IAAI,GAAG,IAAI,CAACC,YAAY,CAAC,KAAK,CAAC;EACnC,IAAIC,KAAK,GAAG,IAAI,CAACD,YAAY,CAAC,IAAI,CAAC;EACnC,OAAOD,IAAI,GAAG,CAAC,GAAGE,KAAK;AAC3B,CAAC;AACD3G,WAAW,CAACsF,SAAS,CAACsB,WAAW,GAAG,YAAY;EAC5C,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACN,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;AACvC,CAAC;AACDxG,WAAW,CAACsF,SAAS,CAACyB,UAAU,GAAG,YAAY;EAC3C,OAAO,IAAI,CAACL,YAAY,CAAC,IAAI,CAAC;AAClC,CAAC;AACD1G,WAAW,CAACsF,SAAS,CAAC0B,0BAA0B,GAAG,YAAY;EAC3D,IAAI,CAACjI,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;IACxC,MAAM,IAAIoD,KAAK,CAAC,sFAAsF,CAAC;EAC3G;EACA,IAAI0D,UAAU,GAAG,CAAC;EAClBA,UAAU,IAAI,CAAC,CAAC,CAAC;EACjB,IAAI,IAAI,CAACpD,sBAAsB,CAAC,CAAC,EAAE;IAC/BoD,UAAU,IAAI,CAAC,CAAC,CAAC;EACrB;EACAA,UAAU,IAAI3H,OAAO,CAACM,cAAc,CAAC,IAAI,CAACW,GAAG,CAACZ,MAAM,CAAC,CAAC,CAAC;EACvDsH,UAAU,IAAI,IAAI,CAAC1G,GAAG,CAACR,MAAM,CAAC,UAAUC,GAAG,EAAEmH,KAAK,EAAE;IAAE,OAAOnH,GAAG,GAAG,EAAE,GAAGP,YAAY,CAAC0H,KAAK,CAAC5E,MAAM,CAAC;EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC3G0E,UAAU,IAAI3H,OAAO,CAACM,cAAc,CAAC,IAAI,CAACY,IAAI,CAACb,MAAM,CAAC,CAAC,CAAC;EACxDsH,UAAU,IAAI,IAAI,CAACzG,IAAI,CAACT,MAAM,CAAC,UAAUC,GAAG,EAAEoH,MAAM,EAAE;IAAE,OAAOpH,GAAG,GAAG,CAAC,GAAGP,YAAY,CAAC2H,MAAM,CAAC7E,MAAM,CAAC;EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC7G0E,UAAU,IAAI,CAAC,CAAC,CAAC;EACjB,IAAI,IAAI,CAACpD,sBAAsB,CAAC,CAAC,EAAE;IAC/BoD,UAAU,IAAI,CAAC,CAAC,CAAC;EACrB;EACA,IAAI,IAAI,CAACrC,mBAAmB,CAAC,CAAC,EAAE;IAC5BqC,UAAU,IAAI,CAAC,CAAC,CAAC;IACjBA,UAAU,IAAI3H,OAAO,CAACM,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACzCqH,UAAU,IAAI3H,OAAO,CAACM,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C;EACA,IAAI,IAAI,CAACqF,kBAAkB,CAAC,CAAC,EAAE;IAC3BgC,UAAU,IAAI3H,OAAO,CAACM,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C;EACA,OAAOqH,UAAU;AACrB,CAAC;AACD/G,WAAW,CAACsF,SAAS,CAACoB,YAAY,GAAG,UAAUS,cAAc,EAAE;EAC3D,IAAI1D,YAAY,GAAG0D,cAAc,IAAI,IAAI,CAAC1D,YAAY,CAAC,CAAC;EACxD,IAAI1E,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;IACvC,OAAO,IAAI,CAAC+G,0BAA0B,CAAC,CAAC;EAC5C;EACA,OAAQ,CAACvD,YAAY,GAAG,EAAE,GAAG,CAAC,IAC1BrE,OAAO,CAACM,cAAc,CAAC,IAAI,CAACW,GAAG,CAACZ,MAAM,CAAC,GACvCL,OAAO,CAACM,cAAc,CAAC,IAAI,CAACY,IAAI,CAACb,MAAM,CAAC,GACxC,IAAI,CAACY,GAAG,CAACR,MAAM,CAAC,UAAUC,GAAG,EAAEmH,KAAK,EAAE;IAAE,OAAOnH,GAAG,GAAG,EAAE,GAAGP,YAAY,CAAC0H,KAAK,CAAC5E,MAAM,CAAC;EAAE,CAAC,EAAE,CAAC,CAAC,GAC3F,IAAI,CAAC/B,IAAI,CAACT,MAAM,CAAC,UAAUC,GAAG,EAAEoH,MAAM,EAAE;IAAE,OAAOpH,GAAG,GAAG,CAAC,GAAGP,YAAY,CAAC2H,MAAM,CAAC7E,MAAM,CAAC;EAAE,CAAC,EAAE,CAAC,CAAC,IAC5F,IAAI,CAAC4C,wBAAwB,CAAC,CAAC,GAAG1F,YAAY,CAAC,IAAI,CAAC0B,YAAY,CAAC,GAAG,CAAC,CAAC,IACtEwC,YAAY,GAAG,IAAI,CAACpD,GAAG,CAACR,MAAM,CAAC,UAAUC,GAAG,EAAEmH,KAAK,EAAE;IAAE,OAAOnH,GAAG,GAAGH,UAAU,CAACsH,KAAK,CAAClH,OAAO,CAAC;EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;AAClH,CAAC;AACDC,WAAW,CAACsF,SAAS,CAAC8B,KAAK,GAAG,YAAY;EACtC,IAAIC,KAAK,GAAG,IAAIrH,WAAW,CAAC,IAAI,CAACC,OAAO,CAAC;EACzCoH,KAAK,CAAClH,OAAO,GAAG,IAAI,CAACA,OAAO;EAC5BkH,KAAK,CAACjH,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9BiH,KAAK,CAACpH,OAAO,GAAG,IAAI,CAACA,OAAO;EAC5B,IAAIlB,KAAK,CAACgC,MAAM,CAAC,IAAI,CAACd,OAAO,CAAC,EAAE;IAC5BoH,KAAK,CAACrG,IAAI,GAAG,IAAI,CAACA,IAAI;IACtBqG,KAAK,CAACpG,YAAY,GAAG,IAAI,CAACA,YAAY;EAC1C;EACA,IAAIlC,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;IACvCoH,KAAK,CAACvG,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;EACpD;EACA,IAAI,IAAI,CAAC6C,sBAAsB,CAAC,CAAC,EAAE;IAC/B0D,KAAK,CAAC1G,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC0G,KAAK,CAACzG,cAAc,GAAG,IAAI,CAACA,cAAc;IAC1CyG,KAAK,CAACxG,YAAY,GAAG,IAAI,CAACA,YAAY;EAC1C;EACA,IAAI,IAAI,CAAC6D,mBAAmB,CAAC,CAAC,EAAE;IAC5B2C,KAAK,CAAC1C,YAAY,GAAG,IAAI,CAACA,YAAY;EAC1C;EACA0C,KAAK,CAAChH,GAAG,GAAG,IAAI,CAACA,GAAG,CAACiH,GAAG,CAAC,UAAUC,IAAI,EAAE;IACrC,OAAO;MACHtD,IAAI,EAAEsD,IAAI,CAACtD,IAAI;MACfE,KAAK,EAAEoD,IAAI,CAACpD,KAAK;MACjB9B,MAAM,EAAEkF,IAAI,CAAClF,MAAM;MACnBgC,QAAQ,EAAEkD,IAAI,CAAClD,QAAQ;MACvBtE,OAAO,EAAEwH,IAAI,CAACxH;IAClB,CAAC;EACL,CAAC,CAAC;EACFsH,KAAK,CAAC/G,IAAI,GAAG,IAAI,CAACA,IAAI,CAACgH,GAAG,CAAC,UAAUE,KAAK,EAAE;IACxC,OAAO;MACHnF,MAAM,EAAEmF,KAAK,CAACnF,MAAM;MACpBkC,KAAK,EAAEiD,KAAK,CAACjD;IACjB,CAAC;EACL,CAAC,CAAC;EACF,OAAO8C,KAAK;AAChB,CAAC;AACD;AACA;AACA;AACA;AACArH,WAAW,CAACsF,SAAS,CAACmC,SAAS,GAAG,YAAY;EAC1C,IAAIC,IAAI,GAAI,IAAI,CAAC/G,YAAY,GAAG,CAAC,GAAG,CAAE;EACtC,IAAIgH,MAAM,GAAG,IAAI,CAACxH,OAAO,GAAIuH,IAAI,IAAI,EAAG;EACxC,OAAOC,MAAM;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3H,WAAW,CAACsF,SAAS,CAACsC,gBAAgB,GAAG,UAAUC,OAAO,EAAEC,aAAa,EAAEC,QAAQ,EAAE;EACjF7I,SAAS,CAACC,KAAK,CAAC2G,KAAK,CAAC3G,KAAK,CAAC4G,MAAM,EAAE5G,KAAK,CAACX,MAAM,EAAE,iBAAkBW,KAAK,CAAC6I,MAAM,CAAC,EAAE/B,SAAS,CAAC;EAC7F;EACA,IAAI4B,OAAO,IAAI,IAAI,CAACxH,GAAG,CAACZ,MAAM,EAC1B,OAAOwC,GAAG;EACd;EACA,IAAIgG,SAAS,GAAGtJ,OAAO,CAACuJ,OAAO,CAACvJ,OAAO,CAACwJ,SAAS,CAACL,aAAa,CAAC,CAACM,MAAM,CAAC,UAAU7B,CAAC,EAAE;IACjF,OAAOA,CAAC,KAAKvH,OAAO,CAACqJ,gBAAgB;EACzC,CAAC,CAAC,CAAC;EACH,IAAIC,KAAK,GAAG,IAAI,CAAClB,KAAK,CAAC,CAAC;EACxB;EACA,IAAI,CAACW,QAAQ,GAAG,IAAI,MAAM/H,WAAW,CAACqB,YAAY,EAAE;IAChDiH,KAAK,CAAChI,IAAI,GAAG,EAAE;IACf;IACAgI,KAAK,CAACjI,GAAG,CAACkI,OAAO,CAAC,UAAUtB,KAAK,EAAElD,CAAC,EAAE;MAClC,IAAIA,CAAC,KAAK8D,OAAO,EACb;MACJZ,KAAK,CAAC5C,QAAQ,GAAG,CAAC;IACtB,CAAC,CAAC;IACF;EACJ,CAAC,MACI,IAAI,CAAC0D,QAAQ,GAAG,IAAI,MAAM/H,WAAW,CAACsB,cAAc,EAAE;IACvD;IACA,IAAIuG,OAAO,IAAI,IAAI,CAACvH,IAAI,CAACb,MAAM,EAC3B,OAAOwC,GAAG;IACd;IACAqG,KAAK,CAAChI,IAAI,CAACb,MAAM,GAAGoI,OAAO,GAAG,CAAC;IAC/B;IACA,KAAK,IAAI9D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8D,OAAO,EAAE9D,CAAC,EAAE,EAAE;MAC9BuE,KAAK,CAAChI,IAAI,CAACyD,CAAC,CAAC,GAAG3B,YAAY;IAChC;IACA;IACAkG,KAAK,CAACjI,GAAG,CAACkI,OAAO,CAAC,UAAUtB,KAAK,EAAEuB,CAAC,EAAE;MAClC,IAAIA,CAAC,KAAKX,OAAO,EACb;MACJZ,KAAK,CAAC5C,QAAQ,GAAG,CAAC;IACtB,CAAC,CAAC;EACN;EACA;EACA,IAAI0D,QAAQ,GAAG/H,WAAW,CAACuB,oBAAoB,EAAE;IAC7C+G,KAAK,CAACjI,GAAG,GAAG,CAACiI,KAAK,CAACjI,GAAG,CAACwH,OAAO,CAAC,CAAC;IAChCS,KAAK,CAACjI,GAAG,CAAC,CAAC,CAAC,CAACgC,MAAM,GAAG4F,SAAS;IAC/B;EACJ,CAAC,MACI;IACD;IACAK,KAAK,CAACjI,GAAG,CAACkI,OAAO,CAAC,UAAUtB,KAAK,EAAE;MAAEA,KAAK,CAAC5E,MAAM,GAAGT,YAAY;IAAE,CAAC,CAAC;IACpE0G,KAAK,CAACjI,GAAG,CAACwH,OAAO,CAAC,CAACxF,MAAM,GAAG4F,SAAS;EACzC;EACA;EACA,IAAIlF,MAAM,GAAGvE,MAAM,CAACqD,WAAW,CAACyG,KAAK,CAAC5B,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAC9D3D,MAAM,CAAC0F,YAAY,CAACV,QAAQ,EAAEhF,MAAM,CAACtD,MAAM,GAAG,CAAC,CAAC;EAChD6I,KAAK,CAACI,UAAU,CAAC3F,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC;EAClC,OAAOrE,OAAO,CAACiK,OAAO,CAAC5F,MAAM,CAAC;AAClC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/C,WAAW,CAACsF,SAAS,CAACsD,yBAAyB,GAAG,UAAUf,OAAO,EAAEgB,aAAa,EAAEtE,KAAK,EAAEwD,QAAQ,EAAEe,QAAQ,EAAE;EAC3G,QAAQ/J,KAAK,CAACgK,UAAU,CAAC,IAAI,CAAC9I,OAAO,CAAC;IAClC,KAAKhB,QAAQ,CAAC+J,KAAK;IACnB,KAAK/J,QAAQ,CAACgK,KAAK;IACnB,KAAKhK,QAAQ,CAACiK,GAAG;IACjB,KAAKjK,QAAQ,CAAC,SAAS,CAAC;MACpB,OAAO,IAAI,CAACkK,qBAAqB,CAACtB,OAAO,EAAEgB,aAAa,EAAEtE,KAAK,EAAEwD,QAAQ,CAAC;IAC9E,KAAK9I,QAAQ,CAACmK,WAAW;IACzB,KAAKnK,QAAQ,CAACoK,SAAS;IACvB,KAAKpK,QAAQ,CAACqK,WAAW;MACrB;AACZ;AACA;AACA;AACA;AACA;MAGY,IAAIC,SAAS,GAAG,CAACxB,QAAQ,GAAG/H,WAAW,CAACwB,cAAc,IAAI,CAAC;MAC3D,IAAI+H,SAAS,EAAE;QACX;AAChB;AACA;AACA;AACA;QACgBxB,QAAQ,GAAG,CAACA,QAAQ,GAAG,IAAI,CAAC9H,OAAO,CAACuJ,MAAM,IAAI,CAAC,MAAM,CAAC;QACtD,OAAO,IAAI,CAACC,gBAAgB,CAAC5B,OAAO,EAAEgB,aAAa,EAAEtE,KAAK,EAAEwD,QAAQ,CAAC;MACzE;EACR;EACA,IAAIe,QAAQ,EAAE;IACV,OAAO,IAAI,CAACW,gBAAgB,CAAC5B,OAAO,EAAEgB,aAAa,EAAEtE,KAAK,EAAEwD,QAAQ,CAAC;EACzE,CAAC,MACI;IACD,OAAO,IAAI,CAACH,gBAAgB,CAACC,OAAO,EAAEgB,aAAa,EAAEd,QAAQ,CAAC;EAClE;AACJ,CAAC;AACD;AACA;AACA/H,WAAW,CAACsF,SAAS,CAACoE,oBAAoB,GAAG,YAAY;EACrD,IAAIC,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG3D,SAAS,CAACxG,MAAM,EAAEmK,EAAE,EAAE,EAAE;IAC1CD,IAAI,CAACC,EAAE,CAAC,GAAG3D,SAAS,CAAC2D,EAAE,CAAC;EAC5B;EACA,IAAI7K,KAAK,CAACgK,UAAU,CAAC,IAAI,CAAC9I,OAAO,CAAC,KAAKhB,QAAQ,CAACmK,WAAW,IACvDrK,KAAK,CAACgK,UAAU,CAAC,IAAI,CAAC9I,OAAO,CAAC,KAAKhB,QAAQ,CAACoK,SAAS,EAAE;IACvD,MAAM,IAAIhG,KAAK,CAAC,0DAA0D,GAAGtE,KAAK,CAAC8K,cAAc,CAAC,IAAI,CAAC5J,OAAO,CAAC,CAAC;EACpH;EACA,OAAO,IAAI,CAAC2I,yBAAyB,CAACkB,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;AAC3D,CAAC;AACD;AACA;AACA3J,WAAW,CAACsF,SAAS,CAACyE,oBAAoB,GAAG,YAAY;EACrD,IAAIJ,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG3D,SAAS,CAACxG,MAAM,EAAEmK,EAAE,EAAE,EAAE;IAC1CD,IAAI,CAACC,EAAE,CAAC,GAAG3D,SAAS,CAAC2D,EAAE,CAAC;EAC5B;EACA,IAAI7K,KAAK,CAACgK,UAAU,CAAC,IAAI,CAAC9I,OAAO,CAAC,KAAKhB,QAAQ,CAACqK,WAAW,EAAE;IACzD,MAAM,IAAIjG,KAAK,CAAC,0DAA0D,GAAGtE,KAAK,CAAC8K,cAAc,CAAC,IAAI,CAAC5J,OAAO,CAAC,CAAC;EACpH;EACA,OAAO,IAAI,CAAC2I,yBAAyB,CAACkB,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;AAC3D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA3J,WAAW,CAACsF,SAAS,CAAC0E,cAAc,GAAG,UAAUC,YAAY,EAAEC,eAAe,EAAE;EAC5E,IAAIC,GAAG,GAAG3L,MAAM,CAACqD,WAAW,CAAC,EAAE,CAAC;EAChC,OAAOxC,OAAO,CAAC8K,GAAG,CAAC1K,MAAM,EAAE,IAAI,EAAE,IAAI,EAAEjB,MAAM,CAACwD,IAAI,CAACkI,eAAe,CAAC,CAAC,CAACE,MAAM,CAACH,YAAY,CAAC,CAACI,MAAM,CAACF,GAAG,CAAC;AACzG,CAAC;AACD;AACA;AACA;AACA;AACA;AACAnK,WAAW,CAACsF,SAAS,CAACgF,cAAc,GAAG,UAAUvC,QAAQ,EAAE;EACvD,IAAI,EAAEA,QAAQ,GAAG/H,WAAW,CAACuB,oBAAoB,CAAC,EAAE;IAChD,IAAIgJ,YAAY,GAAG,IAAIzL,YAAY,CAACN,MAAM,CAACqD,WAAW,CAAC,EAAE,GAAG,IAAI,CAACxB,GAAG,CAACZ,MAAM,CAAC,CAAC;IAC7E,IAAI,CAACY,GAAG,CAACkI,OAAO,CAAC,UAAUhB,IAAI,EAAE;MAC7BgD,YAAY,CAACC,UAAU,CAACjD,IAAI,CAACtD,IAAI,CAAC;MAClCsG,YAAY,CAACE,WAAW,CAAClD,IAAI,CAACpD,KAAK,CAAC;IACxC,CAAC,CAAC;IACF,IAAIpF,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;MACvC,OAAO,IAAI,CAAC+J,cAAc,CAACO,YAAY,CAACxH,MAAM,EAAE,kBAAkB,CAAC;IACvE;IACA,OAAOrE,OAAO,CAACiK,OAAO,CAAC4B,YAAY,CAACxH,MAAM,CAAC;EAC/C;EACA,OAAOhB,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA/B,WAAW,CAACsF,SAAS,CAACoF,eAAe,GAAG,UAAU3C,QAAQ,EAAE;EACxD,IAAI,EAAEA,QAAQ,GAAG/H,WAAW,CAACuB,oBAAoB,CAAC,IAC9C,CAACwG,QAAQ,GAAG,IAAI,MAAM/H,WAAW,CAACsB,cAAc,IAChD,CAACyG,QAAQ,GAAG,IAAI,MAAM/H,WAAW,CAACqB,YAAY,EAAE;IAChD,IAAIkJ,YAAY,GAAG,IAAIzL,YAAY,CAACN,MAAM,CAACqD,WAAW,CAAC,CAAC,GAAG,IAAI,CAACxB,GAAG,CAACZ,MAAM,CAAC,CAAC;IAC5E,IAAI,CAACY,GAAG,CAACkI,OAAO,CAAC,UAAUhB,IAAI,EAAE;MAC7BgD,YAAY,CAACE,WAAW,CAAClD,IAAI,CAAClD,QAAQ,CAAC;IAC3C,CAAC,CAAC;IACF,IAAItF,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;MACvC,OAAO,IAAI,CAAC+J,cAAc,CAACO,YAAY,CAACxH,MAAM,EAAE,kBAAkB,CAAC;IACvE;IACA,OAAOrE,OAAO,CAACiK,OAAO,CAAC4B,YAAY,CAACxH,MAAM,CAAC;EAC/C;EACA,OAAOhB,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA/B,WAAW,CAACsF,SAAS,CAACqF,cAAc,GAAG,UAAU5C,QAAQ,EAAEF,OAAO,EAAE;EAChE,IAAI0C,YAAY;EAChB,IAAI,CAACxC,QAAQ,GAAG,IAAI,MAAM/H,WAAW,CAACsB,cAAc,IAAI,CAACyG,QAAQ,GAAG,IAAI,MAAM/H,WAAW,CAACqB,YAAY,EAAE;IACpG;IACA,IAAIuJ,UAAU,GAAG,IAAI,CAACtK,IAAI,CAACT,MAAM,CAAC,UAAUC,GAAG,EAAEoH,MAAM,EAAE;MACrD,OAAOpH,GAAG,GAAG,CAAC,GAAGP,YAAY,CAAC2H,MAAM,CAAC7E,MAAM,CAAC;IAChD,CAAC,EAAE,CAAC,CAAC;IACLkI,YAAY,GAAG,IAAIzL,YAAY,CAACN,MAAM,CAACqD,WAAW,CAAC+I,UAAU,CAAC,CAAC;IAC/D,IAAI,CAACtK,IAAI,CAACiI,OAAO,CAAC,UAAU4B,GAAG,EAAE;MAC7BI,YAAY,CAACM,WAAW,CAACV,GAAG,CAAC5F,KAAK,CAAC;MACnCgG,YAAY,CAACO,aAAa,CAACX,GAAG,CAAC9H,MAAM,CAAC;IAC1C,CAAC,CAAC;IACF,IAAItD,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;MACvC,OAAO,IAAI,CAAC+J,cAAc,CAACO,YAAY,CAACxH,MAAM,EAAE,kBAAkB,CAAC;IACvE;IACA,OAAOrE,OAAO,CAACiK,OAAO,CAAC4B,YAAY,CAACxH,MAAM,CAAC;EAC/C,CAAC,MACI,IAAI,CAACgF,QAAQ,GAAG,IAAI,MAAM/H,WAAW,CAACsB,cAAc,IAAIuG,OAAO,GAAG,IAAI,CAACvH,IAAI,CAACb,MAAM,EAAE;IACrF;IACA,IAAIyH,MAAM,GAAG,IAAI,CAAC5G,IAAI,CAACuH,OAAO,CAAC;IAC/B0C,YAAY,GAAG,IAAIzL,YAAY,CAACN,MAAM,CAACqD,WAAW,CAAC,CAAC,GAAGtC,YAAY,CAAC2H,MAAM,CAAC7E,MAAM,CAAC,CAAC,CAAC;IACpFkI,YAAY,CAACM,WAAW,CAAC3D,MAAM,CAAC3C,KAAK,CAAC;IACtCgG,YAAY,CAACO,aAAa,CAAC5D,MAAM,CAAC7E,MAAM,CAAC;IACzC,IAAItD,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;MACvC,OAAO,IAAI,CAAC+J,cAAc,CAACO,YAAY,CAACxH,MAAM,EAAE,kBAAkB,CAAC;IACvE;IACA,OAAOrE,OAAO,CAACiK,OAAO,CAAC4B,YAAY,CAACxH,MAAM,CAAC;EAC/C;EACA,OAAOhB,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/B,WAAW,CAACsF,SAAS,CAAC6D,qBAAqB,GAAG,UAAUtB,OAAO,EAAEC,aAAa,EAAEvD,KAAK,EAAEwD,QAAQ,EAAE;EAC7F7I,SAAS,CAACC,KAAK,CAAC2G,KAAK,CAAC3G,KAAK,CAAC4G,MAAM,EAAE5G,KAAK,CAACX,MAAM,EAAEW,KAAK,CAACkH,OAAO,EAAElH,KAAK,CAAC4G,MAAM,CAAC,EAAEE,SAAS,CAAC;EAC1F,IAAI,CAAClH,KAAK,CAACwB,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,EAAE;IACxC,MAAM,IAAIoD,KAAK,CAAC,iFAAiF,CAAC;EACtG;EACA,IAAIwE,OAAO,IAAI,IAAI,CAACxH,GAAG,CAACZ,MAAM,IAAIoI,OAAO,KAAK3F,gBAAgB,EAAE;IAC5D;IACA,MAAM,IAAImB,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,IAAI,IAAI,CAACM,sBAAsB,CAAC,CAAC,EAAE;IAC/B,IAAIoH,YAAY,GAAG,IAAI,CAACT,cAAc,CAACvC,QAAQ,CAAC;IAChD,IAAIiD,YAAY,GAAG,IAAI,CAACN,eAAe,CAAC3C,QAAQ,CAAC;IACjD,IAAIkD,WAAW,GAAG,IAAI,CAACN,cAAc,CAAC5C,QAAQ,EAAEF,OAAO,CAAC;IACxD,IAAIqD,cAAc,GAAGnJ,IAAI;IACzB,IAAIoJ,kBAAkB,GAAGpJ,IAAI;IAC7B,IAAIqJ,mBAAmB,GAAGrJ,IAAI;IAC9B,IAAIwI,YAAY;IAChB,IAAIc,cAAc,GAAG,CAAC;IACtBA,cAAc,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACzBA,cAAc,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1B,IAAIxD,OAAO,KAAK3F,gBAAgB,EAAE;MAC9B;MACAmJ,cAAc,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MACzBA,cAAc,IAAI,CAAC,CAAC,CAAC;MACrBA,cAAc,IAAI,EAAE,CAAC,CAAC;MACtBA,cAAc,IAAI9L,YAAY,CAACuI,aAAa,CAAC,CAAC,CAAC;IACnD;IACA,IAAI,IAAI,CAACpD,mBAAmB,CAAC,CAAC,EAAE;MAC5B2G,cAAc,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;MAC1BA,cAAc,IAAI,CAAC,CAAC,CAAC;IACzB;IACAd,YAAY,GAAG,IAAIzL,YAAY,CAACN,MAAM,CAAC0C,KAAK,CAACmK,cAAc,CAAC,CAAC;IAC7Dd,YAAY,CAACe,UAAU,CAAC,IAAI,CAAC7D,SAAS,CAAC,CAAC,CAAC;IACzC8C,YAAY,CAACE,WAAW,CAAC,IAAI,CAAC7J,cAAc,CAAC;IAC7C2J,YAAY,CAACC,UAAU,CAACO,YAAY,CAAC;IACrCR,YAAY,CAACC,UAAU,CAACQ,YAAY,CAAC;IACrCT,YAAY,CAACC,UAAU,CAACS,WAAW,CAAC;IACpCV,YAAY,CAACC,UAAU,CAACU,cAAc,CAAC;IACvC,IAAI,IAAI,CAACxG,mBAAmB,CAAC,CAAC,EAAE;MAC5B6F,YAAY,CAACC,UAAU,CAACW,kBAAkB,CAAC;MAC3CZ,YAAY,CAACC,UAAU,CAACY,mBAAmB,CAAC;IAChD;IACAb,YAAY,CAACE,WAAW,CAAC,IAAI,CAACrK,QAAQ,CAAC;IACvCmK,YAAY,CAACE,WAAW,CAAC,IAAI,CAAC5J,YAAY,CAAC;IAC3C,IAAI,IAAI,CAAC6D,mBAAmB,CAAC,CAAC,EAAE;MAC5B6F,YAAY,CAACC,UAAU,CAACrI,gBAAgB,CAAC;IAC7C;IACAoI,YAAY,CAACE,WAAW,CAAC1C,QAAQ,CAAC;IAClC;IACA,IAAIF,OAAO,KAAK3F,gBAAgB,EAAE;MAC9B;MACA;MACA;MACA,IAAI+E,KAAK,GAAG,IAAI,CAAC5G,GAAG,CAACwH,OAAO,CAAC;MAC7B0C,YAAY,CAACC,UAAU,CAACvD,KAAK,CAAChD,IAAI,CAAC;MACnCsG,YAAY,CAACE,WAAW,CAACxD,KAAK,CAAC9C,KAAK,CAAC;MACrCoG,YAAY,CAACO,aAAa,CAAChD,aAAa,CAAC;MACzCyC,YAAY,CAACM,WAAW,CAACtG,KAAK,CAAC;MAC/BgG,YAAY,CAACE,WAAW,CAACxD,KAAK,CAAC5C,QAAQ,CAAC;IAC5C;IACA,IAAI6F,eAAe,GAAG1L,MAAM,CAAC0C,KAAK,CAAC,EAAE,CAAC;IACtC,IAAIqK,MAAM,GAAG,cAAc;IAC3BrB,eAAe,CAACsB,KAAK,CAACD,MAAM,CAAC;IAC7BrB,eAAe,CAACuB,aAAa,CAAC,IAAI,CAAC3K,iBAAiB,EAAEyK,MAAM,CAAC9L,MAAM,CAAC;IACpE,OAAO,IAAI,CAACuK,cAAc,CAACO,YAAY,CAACxH,MAAM,EAAEmH,eAAe,CAAC;EACpE;EACA;EACA,MAAM,IAAI7G,KAAK,CAAC,qBAAqB,CAAC;AAC1C,CAAC;AACDrD,WAAW,CAACsF,SAAS,CAACmE,gBAAgB,GAAG,UAAU5B,OAAO,EAAEC,aAAa,EAAEvD,KAAK,EAAEwD,QAAQ,EAAE;EACxF7I,SAAS,CAACC,KAAK,CAAC2G,KAAK,CAAC3G,KAAK,CAAC4G,MAAM,EAAE5G,KAAK,CAACX,MAAM,EAAEW,KAAK,CAACkH,OAAO,EAAElH,KAAK,CAAC4G,MAAM,CAAC,EAAEE,SAAS,CAAC;EAC1F,IAAI8E,YAAY,GAAG,IAAI,CAACT,cAAc,CAACvC,QAAQ,CAAC;EAChD,IAAIiD,YAAY,GAAG,IAAI,CAACN,eAAe,CAAC3C,QAAQ,CAAC;EACjD,IAAIkD,WAAW,GAAG,IAAI,CAACN,cAAc,CAAC5C,QAAQ,EAAEF,OAAO,CAAC;EACxD,IAAI0C,YAAY,GAAG,IAAIzL,YAAY,CAACN,MAAM,CAACqD,WAAW,CAAC,GAAG,GAAGtC,YAAY,CAACuI,aAAa,CAAC,CAAC,CAAC;EAC1F,IAAIb,KAAK,GAAG,IAAI,CAAC5G,GAAG,CAACwH,OAAO,CAAC;EAC7B0C,YAAY,CAACe,UAAU,CAAC,IAAI,CAACnL,OAAO,CAAC;EACrCoK,YAAY,CAACC,UAAU,CAACO,YAAY,CAAC;EACrCR,YAAY,CAACC,UAAU,CAACQ,YAAY,CAAC;EACrCT,YAAY,CAACC,UAAU,CAACvD,KAAK,CAAChD,IAAI,CAAC;EACnCsG,YAAY,CAACE,WAAW,CAACxD,KAAK,CAAC9C,KAAK,CAAC;EACrCoG,YAAY,CAACO,aAAa,CAAChD,aAAa,CAAC;EACzCyC,YAAY,CAACM,WAAW,CAACtG,KAAK,CAAC;EAC/BgG,YAAY,CAACE,WAAW,CAACxD,KAAK,CAAC5C,QAAQ,CAAC;EACxCkG,YAAY,CAACC,UAAU,CAACS,WAAW,CAAC;EACpCV,YAAY,CAACE,WAAW,CAAC,IAAI,CAACrK,QAAQ,CAAC;EACvCmK,YAAY,CAACE,WAAW,CAAC1C,QAAQ,CAAC;EAClC,OAAOrJ,OAAO,CAACiK,OAAO,CAAC4B,YAAY,CAACxH,MAAM,CAAC;AAC/C,CAAC;AACD/C,WAAW,CAACsF,SAAS,CAACoG,OAAO,GAAG,YAAY;EACxC,OAAOhN,OAAO,CAACiK,OAAO,CAAC,IAAI,CAACD,UAAU,CAACiD,SAAS,EAAEA,SAAS,EAAE,KAAK,CAAC,CAAC;AACxE,CAAC;AACD3L,WAAW,CAACsF,SAAS,CAACsG,KAAK,GAAG,YAAY;EACtC;EACA,OAAO,IAAI,CAACF,OAAO,CAAC,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;AACnD,CAAC;AACD9L,WAAW,CAACsF,SAAS,CAACyG,QAAQ,GAAG,UAAUhJ,MAAM,EAAEiJ,aAAa,EAAE;EAC9D,OAAO,IAAI,CAACtD,UAAU,CAAC3F,MAAM,EAAEiJ,aAAa,EAAE,IAAI,CAAC;AACvD,CAAC;AACDhM,WAAW,CAACsF,SAAS,CAACoD,UAAU,GAAG,UAAU3F,MAAM,EAAEiJ,aAAa,EAAE7E,cAAc,EAAE;EAChF,IAAI,CAACpE,MAAM,EACPA,MAAM,GAAGvE,MAAM,CAACqD,WAAW,CAAC,IAAI,CAAC6E,YAAY,CAACS,cAAc,CAAC,CAAC;EAClE,IAAIoD,YAAY,GAAG,IAAIzL,YAAY,CAACiE,MAAM,EAAEiJ,aAAa,IAAI,CAAC,CAAC;EAC/D,SAASC,WAAWA,CAAClI,CAAC,EAAE;IACpBwG,YAAY,CAAC7G,MAAM,GAAG6G,YAAY,CAACxH,MAAM,CAACmJ,aAAa,CAACnI,CAAC,EAAEwG,YAAY,CAAC7G,MAAM,CAAC;EACnF;EACA,IAAI,IAAI,CAACC,sBAAsB,CAAC,CAAC,EAAE;IAC/B,IAAI+D,IAAI,GAAI,IAAI,CAAC/G,YAAY,GAAG,CAAC,GAAG,CAAE;IACtC4J,YAAY,CAACe,UAAU,CAAC,IAAI,CAACnL,OAAO,GAAIuH,IAAI,IAAI,EAAG,CAAC,CAAC,CAAC;IACtD6C,YAAY,CAACE,WAAW,CAAC,IAAI,CAAC7J,cAAc,CAAC;EACjD,CAAC,MACI,IAAI,IAAI,CAACqE,wBAAwB,CAAC,CAAC,EAAE;IACtCgH,WAAW,CAAC,IAAI,CAAC9L,OAAO,CAAC;IACzB8L,WAAW,CAAC,IAAI,CAACjL,IAAI,CAAC;EAC1B,CAAC,MACI;IACDuJ,YAAY,CAACe,UAAU,CAAC,IAAI,CAACnL,OAAO,CAAC;EACzC;EACA,IAAIsD,YAAY,GAAG0D,cAAc,IAAI,IAAI,CAAC1D,YAAY,CAAC,CAAC;EACxD,IAAIA,YAAY,EAAE;IACd8G,YAAY,CAAC4B,UAAU,CAACnM,WAAW,CAAC0B,2BAA2B,CAAC;IAChE6I,YAAY,CAAC4B,UAAU,CAACnM,WAAW,CAAC2B,yBAAyB,CAAC;EAClE;EACA4I,YAAY,CAAC6B,WAAW,CAAC,IAAI,CAAC/L,GAAG,CAACZ,MAAM,CAAC;EACzC,IAAI,CAACY,GAAG,CAACkI,OAAO,CAAC,UAAUhB,IAAI,EAAE;IAC7BgD,YAAY,CAACC,UAAU,CAACjD,IAAI,CAACtD,IAAI,CAAC;IAClCsG,YAAY,CAACE,WAAW,CAAClD,IAAI,CAACpD,KAAK,CAAC;IACpCoG,YAAY,CAACO,aAAa,CAACvD,IAAI,CAAClF,MAAM,CAAC;IACvCkI,YAAY,CAACE,WAAW,CAAClD,IAAI,CAAClD,QAAQ,CAAC;EAC3C,CAAC,CAAC;EACFkG,YAAY,CAAC6B,WAAW,CAAC,IAAI,CAAC9L,IAAI,CAACb,MAAM,CAAC;EAC1C,IAAI,CAACa,IAAI,CAACiI,OAAO,CAAC,UAAUf,KAAK,EAAE;IAC/B,IAAI,CAACA,KAAK,CAAClF,WAAW,EAAE;MACpBiI,YAAY,CAACM,WAAW,CAACrD,KAAK,CAACjD,KAAK,CAAC;IACzC,CAAC,MACI;MACDgG,YAAY,CAACC,UAAU,CAAChD,KAAK,CAAClF,WAAW,CAAC;IAC9C;IACAiI,YAAY,CAACO,aAAa,CAACtD,KAAK,CAACnF,MAAM,CAAC;EAC5C,CAAC,CAAC;EACF,IAAIoB,YAAY,EAAE;IACd,IAAI,CAACpD,GAAG,CAACkI,OAAO,CAAC,UAAUtB,KAAK,EAAE;MAC9BsD,YAAY,CAAC8B,WAAW,CAACpF,KAAK,CAAClH,OAAO,CAAC;IAC3C,CAAC,CAAC;EACN;EACAwK,YAAY,CAACE,WAAW,CAAC,IAAI,CAACrK,QAAQ,CAAC;EACvC,IAAI,IAAI,CAACuD,sBAAsB,CAAC,CAAC,EAAE;IAC/B4G,YAAY,CAACE,WAAW,CAAC,IAAI,CAAC5J,YAAY,CAAC;EAC/C;EACA,IAAI,IAAI,CAAC6D,mBAAmB,CAAC,CAAC,EAAE;IAC5B6F,YAAY,CAACC,UAAU,CAACrI,gBAAgB,CAAC;IACzCoI,YAAY,CAAC6B,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B7B,YAAY,CAAC6B,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EACjC;EACA,IAAI,IAAI,CAACrH,kBAAkB,CAAC,CAAC,EAAE;IAC3BwF,YAAY,CAAC6B,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EACjC;EACA,IAAI,IAAI,CAACnH,wBAAwB,CAAC,CAAC,EAAE;IACjCsF,YAAY,CAACO,aAAa,CAAC,IAAI,CAAC7J,YAAY,CAAC;EACjD;EACA,IAAI+K,aAAa,KAAKL,SAAS,EAC3B,OAAO5I,MAAM,CAACuJ,KAAK,CAACN,aAAa,EAAEzB,YAAY,CAAC7G,MAAM,CAAC;EAC3D;EACA;EACA,OAAOX,MAAM,CAACuJ,KAAK,CAAC,CAAC,EAAE/B,YAAY,CAAC7G,MAAM,CAAC;AAC/C,CAAC;AACD1D,WAAW,CAACsF,SAAS,CAACiH,KAAK,GAAG,YAAY;EACtC,OAAO,IAAI,CAACR,QAAQ,CAAC,CAAC,CAACD,QAAQ,CAAC,KAAK,CAAC;AAC1C,CAAC;AACD9L,WAAW,CAACsF,SAAS,CAACkH,cAAc,GAAG,UAAUrI,KAAK,EAAE0B,SAAS,EAAE;EAC/D3G,SAAS,CAACC,KAAK,CAAC2G,KAAK,CAAC3G,KAAK,CAAC6I,MAAM,EAAE7I,KAAK,CAACX,MAAM,CAAC,EAAEyH,SAAS,CAAC;EAC7D,IAAI,CAAC5F,GAAG,CAAC8D,KAAK,CAAC,CAAC9B,MAAM,GAAGwD,SAAS;AACtC,CAAC;AACD7F,WAAW,CAACsF,SAAS,CAACmH,UAAU,GAAG,UAAUtI,KAAK,EAAEpE,OAAO,EAAE;EACzDb,SAAS,CAACC,KAAK,CAAC2G,KAAK,CAAC3G,KAAK,CAAC6I,MAAM,EAAE,CAAC7I,KAAK,CAACX,MAAM,CAAC,CAAC,EAAEyH,SAAS,CAAC;EAC/D,IAAI,CAAC5F,GAAG,CAAC8D,KAAK,CAAC,CAACpE,OAAO,GAAGA,OAAO;AACrC,CAAC;AACD2M,MAAM,CAACC,OAAO,GAAG3M,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script"}