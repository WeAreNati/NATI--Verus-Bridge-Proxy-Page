{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.ZEC = exports.VRSC = exports.LTC = exports.KMD = exports.DOGE = exports.DGB = exports.DEFAULT = exports.DASH = exports.BTG = exports.BTC = exports.BSV = exports.BCH = exports.isValidNetwork = exports.isDigibyte = exports.isDoge = exports.isKomodo = exports.isZcashCompatible = exports.isPBaaS = exports.isVerus = exports.isZcash = exports.isLitecoin = exports.isDash = exports.isBitcoinSV = exports.isBitcoinGold = exports.isBitcoinCash = exports.isBitcoin = exports.getTestnet = exports.isSameCoin = exports.isTestnet = exports.isMainnet = exports.getMainnet = exports.getNetworkName = exports.getNetworkList = void 0;\n/**\n * @prettier\n */\nvar networks = require(\"./networks\");\nvar networkTypes_1 = require(\"./networkTypes\");\nvar typeforce = require('typeforce');\n/**\n * @returns {Network[]} all known networks as array\n */\nfunction getNetworkList() {\n  return Object.keys(networks).map(function (n) {\n    return networks[n];\n  });\n}\nexports.getNetworkList = getNetworkList;\n/**\n * @param {Network} network\n * @returns {NetworkName} the name of the network. Returns undefined if network is not a value\n *                   of `networks`\n */\nfunction getNetworkName(network) {\n  var nameStringOrUndefined = Object.keys(networks).find(function (n) {\n    return networks[n] === network;\n  });\n  if (typeof nameStringOrUndefined === 'string') return nameStringOrUndefined;else return undefined;\n}\nexports.getNetworkName = getNetworkName;\n/**\n * @param {Network} network\n * @returns {Object} the mainnet corresponding to a testnet\n */\nfunction getMainnet(network) {\n  switch (network) {\n    case networks.verus:\n    case networks.verustest:\n      return networks.verus;\n    case networks.kmd:\n      return networks.kmd;\n    case networks.doge:\n      return networks.doge;\n    case networks.digibyte:\n      return networks.digibyte;\n    case networks.bitcoin:\n    case networks.testnet:\n      return networks.bitcoin;\n    case networks.bitcoincash:\n    case networks.bitcoincashTestnet:\n      return networks.bitcoincash;\n    case networks.bitcoingold:\n    case networks.bitcoingoldTestnet:\n      return networks.bitcoingold;\n    case networks.bitcoinsv:\n    case networks.bitcoinsvTestnet:\n      return networks.bitcoinsv;\n    case networks.dash:\n    case networks.dashTest:\n      return networks.dash;\n    case networks.litecoin:\n    case networks.litecoinTest:\n      return networks.litecoin;\n    case networks.zcash:\n    case networks.zcashTest:\n      return networks.zcash;\n    case networks[\"default\"]:\n      return networks[\"default\"];\n    default:\n      return network;\n  }\n}\nexports.getMainnet = getMainnet;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a mainnet\n */\nfunction isMainnet(network) {\n  return getMainnet(network) === network;\n}\nexports.isMainnet = isMainnet;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a testnet\n */\nfunction isTestnet(network) {\n  return getMainnet(network) !== network;\n}\nexports.isTestnet = isTestnet;\n/**\n *\n * @param {Network} network\n * @param {Network} otherNetwork\n * @returns {boolean} true iff both networks are for the same coin\n */\nfunction isSameCoin(network, otherNetwork) {\n  return getMainnet(network) === getMainnet(otherNetwork);\n}\nexports.isSameCoin = isSameCoin;\nvar mainnets = getNetworkList().filter(isMainnet);\nvar testnets = getNetworkList().filter(isTestnet);\n/**\n * Map where keys are mainnet networks and values are testnet networks\n * @type {Map<Network, Network[]>}\n */\nvar mainnetTestnetPairs = new Map(mainnets.map(function (m) {\n  return [m, testnets.filter(function (t) {\n    return getMainnet(t) === m;\n  })];\n}));\n/**\n * @param {Network} network\n * @returns {Network|undefined} - The testnet corresponding to a mainnet.\n *                               Returns undefined if a network has no testnet.\n */\nfunction getTestnet(network) {\n  if (isTestnet(network)) {\n    return network;\n  }\n  var testnets = mainnetTestnetPairs.get(network);\n  if (testnets === undefined) {\n    throw new Error(\"invalid argument\");\n  }\n  if (testnets.length === 0) {\n    return;\n  }\n  if (testnets.length === 1) {\n    return testnets[0];\n  }\n  throw new Error(\"more than one testnet for \" + getNetworkName(network));\n}\nexports.getTestnet = getTestnet;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network bitcoin or testnet\n */\nfunction isBitcoin(network) {\n  return getMainnet(network) === networks.bitcoin;\n}\nexports.isBitcoin = isBitcoin;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoincash or bitcoincashTestnet\n */\nfunction isBitcoinCash(network) {\n  return getMainnet(network) === networks.bitcoincash;\n}\nexports.isBitcoinCash = isBitcoinCash;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoingold\n */\nfunction isBitcoinGold(network) {\n  return getMainnet(network) === networks.bitcoingold;\n}\nexports.isBitcoinGold = isBitcoinGold;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoinsv or bitcoinsvTestnet\n */\nfunction isBitcoinSV(network) {\n  return getMainnet(network) === networks.bitcoinsv;\n}\nexports.isBitcoinSV = isBitcoinSV;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is dash or dashTest\n */\nfunction isDash(network) {\n  return getMainnet(network) === networks.dash;\n}\nexports.isDash = isDash;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is litecoin or litecoinTest\n */\nfunction isLitecoin(network) {\n  return getMainnet(network) === networks.litecoin;\n}\nexports.isLitecoin = isLitecoin;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is zcash or zcashTest\n */\nfunction isZcash(network) {\n  return getMainnet(network) === networks.zcash;\n}\nexports.isZcash = isZcash;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Verus or VerusTest\n */\nfunction isVerus(network) {\n  return getMainnet(network) === networks.verus;\n}\nexports.isVerus = isVerus;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is PBaaS compatible\n */\nfunction isPBaaS(network) {\n  return network && !!network.isPBaaS;\n}\nexports.isPBaaS = isPBaaS;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is zcash compatible\n */\nfunction isZcashCompatible(network) {\n  return isZcash(network) || isPBaaS(network) || isKomodo(network);\n}\nexports.isZcashCompatible = isZcashCompatible;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Komodo\n */\nfunction isKomodo(network) {\n  return getMainnet(network) === networks.kmd;\n}\nexports.isKomodo = isKomodo;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Doge\n */\nfunction isDoge(network) {\n  return getMainnet(network) === networks.doge;\n}\nexports.isDoge = isDoge;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Digibyte\n */\nfunction isDigibyte(network) {\n  return getMainnet(network) === networks.digibyte;\n}\nexports.isDigibyte = isDigibyte;\n/**\n * @param {Network} network\n * @returns {boolean} returns true iff network is any of the network stated in the argument\n */\nexports.isValidNetwork = typeforce.oneOf(isBitcoin, isBitcoinCash, isBitcoinGold, isBitcoinSV, isDash, isLitecoin, isZcash, isZcashCompatible, isVerus, isPBaaS, isKomodo, isDoge, isDigibyte);\n/** @deprecated */\nexports.BCH = networkTypes_1.coins.BCH;\n/** @deprecated */\nexports.BSV = networkTypes_1.coins.BSV;\n/** @deprecated */\nexports.BTC = networkTypes_1.coins.BTC;\n/** @deprecated */\nexports.BTG = networkTypes_1.coins.BTG;\n/** @deprecated */\nexports.DASH = networkTypes_1.coins.DASH;\n/** @deprecated */\nexports.DEFAULT = networkTypes_1.coins.DEFAULT;\n/** @deprecated */\nexports.DGB = networkTypes_1.coins.DGB;\n/** @deprecated */\nexports.DOGE = networkTypes_1.coins.DOGE;\n/** @deprecated */\nexports.KMD = networkTypes_1.coins.KMD;\n/** @deprecated */\nexports.LTC = networkTypes_1.coins.LTC;\n/** @deprecated */\nexports.VRSC = networkTypes_1.coins.VRSC;\n/** @deprecated */\nexports.ZEC = networkTypes_1.coins.ZEC;","map":{"version":3,"names":["exports","__esModule","ZEC","VRSC","LTC","KMD","DOGE","DGB","DEFAULT","DASH","BTG","BTC","BSV","BCH","isValidNetwork","isDigibyte","isDoge","isKomodo","isZcashCompatible","isPBaaS","isVerus","isZcash","isLitecoin","isDash","isBitcoinSV","isBitcoinGold","isBitcoinCash","isBitcoin","getTestnet","isSameCoin","isTestnet","isMainnet","getMainnet","getNetworkName","getNetworkList","networks","require","networkTypes_1","typeforce","Object","keys","map","n","network","nameStringOrUndefined","find","undefined","verus","verustest","kmd","doge","digibyte","bitcoin","testnet","bitcoincash","bitcoincashTestnet","bitcoingold","bitcoingoldTestnet","bitcoinsv","bitcoinsvTestnet","dash","dashTest","litecoin","litecoinTest","zcash","zcashTest","otherNetwork","mainnets","filter","testnets","mainnetTestnetPairs","Map","m","t","get","Error","length","oneOf","coins"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/@bitgo/utxo-lib/dist/src/coins.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.ZEC = exports.VRSC = exports.LTC = exports.KMD = exports.DOGE = exports.DGB = exports.DEFAULT = exports.DASH = exports.BTG = exports.BTC = exports.BSV = exports.BCH = exports.isValidNetwork = exports.isDigibyte = exports.isDoge = exports.isKomodo = exports.isZcashCompatible = exports.isPBaaS = exports.isVerus = exports.isZcash = exports.isLitecoin = exports.isDash = exports.isBitcoinSV = exports.isBitcoinGold = exports.isBitcoinCash = exports.isBitcoin = exports.getTestnet = exports.isSameCoin = exports.isTestnet = exports.isMainnet = exports.getMainnet = exports.getNetworkName = exports.getNetworkList = void 0;\n/**\n * @prettier\n */\nvar networks = require(\"./networks\");\nvar networkTypes_1 = require(\"./networkTypes\");\nvar typeforce = require('typeforce');\n/**\n * @returns {Network[]} all known networks as array\n */\nfunction getNetworkList() {\n    return Object.keys(networks).map(function (n) { return networks[n]; });\n}\nexports.getNetworkList = getNetworkList;\n/**\n * @param {Network} network\n * @returns {NetworkName} the name of the network. Returns undefined if network is not a value\n *                   of `networks`\n */\nfunction getNetworkName(network) {\n    var nameStringOrUndefined = Object.keys(networks).find(function (n) { return networks[n] === network; });\n    if (typeof nameStringOrUndefined === 'string')\n        return nameStringOrUndefined;\n    else\n        return undefined;\n}\nexports.getNetworkName = getNetworkName;\n/**\n * @param {Network} network\n * @returns {Object} the mainnet corresponding to a testnet\n */\nfunction getMainnet(network) {\n    switch (network) {\n        case networks.verus:\n        case networks.verustest:\n            return networks.verus;\n        case networks.kmd:\n            return networks.kmd;\n        case networks.doge:\n            return networks.doge;\n        case networks.digibyte:\n            return networks.digibyte;\n        case networks.bitcoin:\n        case networks.testnet:\n            return networks.bitcoin;\n        case networks.bitcoincash:\n        case networks.bitcoincashTestnet:\n            return networks.bitcoincash;\n        case networks.bitcoingold:\n        case networks.bitcoingoldTestnet:\n            return networks.bitcoingold;\n        case networks.bitcoinsv:\n        case networks.bitcoinsvTestnet:\n            return networks.bitcoinsv;\n        case networks.dash:\n        case networks.dashTest:\n            return networks.dash;\n        case networks.litecoin:\n        case networks.litecoinTest:\n            return networks.litecoin;\n        case networks.zcash:\n        case networks.zcashTest:\n            return networks.zcash;\n        case networks[\"default\"]:\n            return networks[\"default\"];\n        default:\n            return network;\n    }\n}\nexports.getMainnet = getMainnet;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a mainnet\n */\nfunction isMainnet(network) {\n    return getMainnet(network) === network;\n}\nexports.isMainnet = isMainnet;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a testnet\n */\nfunction isTestnet(network) {\n    return getMainnet(network) !== network;\n}\nexports.isTestnet = isTestnet;\n/**\n *\n * @param {Network} network\n * @param {Network} otherNetwork\n * @returns {boolean} true iff both networks are for the same coin\n */\nfunction isSameCoin(network, otherNetwork) {\n    return getMainnet(network) === getMainnet(otherNetwork);\n}\nexports.isSameCoin = isSameCoin;\nvar mainnets = getNetworkList().filter(isMainnet);\nvar testnets = getNetworkList().filter(isTestnet);\n/**\n * Map where keys are mainnet networks and values are testnet networks\n * @type {Map<Network, Network[]>}\n */\nvar mainnetTestnetPairs = new Map(mainnets.map(function (m) { return [m, testnets.filter(function (t) { return getMainnet(t) === m; })]; }));\n/**\n * @param {Network} network\n * @returns {Network|undefined} - The testnet corresponding to a mainnet.\n *                               Returns undefined if a network has no testnet.\n */\nfunction getTestnet(network) {\n    if (isTestnet(network)) {\n        return network;\n    }\n    var testnets = mainnetTestnetPairs.get(network);\n    if (testnets === undefined) {\n        throw new Error(\"invalid argument\");\n    }\n    if (testnets.length === 0) {\n        return;\n    }\n    if (testnets.length === 1) {\n        return testnets[0];\n    }\n    throw new Error(\"more than one testnet for \" + getNetworkName(network));\n}\nexports.getTestnet = getTestnet;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network bitcoin or testnet\n */\nfunction isBitcoin(network) {\n    return getMainnet(network) === networks.bitcoin;\n}\nexports.isBitcoin = isBitcoin;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoincash or bitcoincashTestnet\n */\nfunction isBitcoinCash(network) {\n    return getMainnet(network) === networks.bitcoincash;\n}\nexports.isBitcoinCash = isBitcoinCash;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoingold\n */\nfunction isBitcoinGold(network) {\n    return getMainnet(network) === networks.bitcoingold;\n}\nexports.isBitcoinGold = isBitcoinGold;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoinsv or bitcoinsvTestnet\n */\nfunction isBitcoinSV(network) {\n    return getMainnet(network) === networks.bitcoinsv;\n}\nexports.isBitcoinSV = isBitcoinSV;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is dash or dashTest\n */\nfunction isDash(network) {\n    return getMainnet(network) === networks.dash;\n}\nexports.isDash = isDash;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is litecoin or litecoinTest\n */\nfunction isLitecoin(network) {\n    return getMainnet(network) === networks.litecoin;\n}\nexports.isLitecoin = isLitecoin;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is zcash or zcashTest\n */\nfunction isZcash(network) {\n    return getMainnet(network) === networks.zcash;\n}\nexports.isZcash = isZcash;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Verus or VerusTest\n */\nfunction isVerus(network) {\n    return getMainnet(network) === networks.verus;\n}\nexports.isVerus = isVerus;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is PBaaS compatible\n */\nfunction isPBaaS(network) {\n    return network && !!network.isPBaaS;\n}\nexports.isPBaaS = isPBaaS;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is zcash compatible\n */\nfunction isZcashCompatible(network) {\n    return isZcash(network) || isPBaaS(network) || isKomodo(network);\n}\nexports.isZcashCompatible = isZcashCompatible;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Komodo\n */\nfunction isKomodo(network) {\n    return getMainnet(network) === networks.kmd;\n}\nexports.isKomodo = isKomodo;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Doge\n */\nfunction isDoge(network) {\n    return getMainnet(network) === networks.doge;\n}\nexports.isDoge = isDoge;\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is Digibyte\n */\nfunction isDigibyte(network) {\n    return getMainnet(network) === networks.digibyte;\n}\nexports.isDigibyte = isDigibyte;\n/**\n * @param {Network} network\n * @returns {boolean} returns true iff network is any of the network stated in the argument\n */\nexports.isValidNetwork = typeforce.oneOf(isBitcoin, isBitcoinCash, isBitcoinGold, isBitcoinSV, isDash, isLitecoin, isZcash, isZcashCompatible, isVerus, isPBaaS, isKomodo, isDoge, isDigibyte);\n/** @deprecated */\nexports.BCH = networkTypes_1.coins.BCH;\n/** @deprecated */\nexports.BSV = networkTypes_1.coins.BSV;\n/** @deprecated */\nexports.BTC = networkTypes_1.coins.BTC;\n/** @deprecated */\nexports.BTG = networkTypes_1.coins.BTG;\n/** @deprecated */\nexports.DASH = networkTypes_1.coins.DASH;\n/** @deprecated */\nexports.DEFAULT = networkTypes_1.coins.DEFAULT;\n/** @deprecated */\nexports.DGB = networkTypes_1.coins.DGB;\n/** @deprecated */\nexports.DOGE = networkTypes_1.coins.DOGE;\n/** @deprecated */\nexports.KMD = networkTypes_1.coins.KMD;\n/** @deprecated */\nexports.LTC = networkTypes_1.coins.LTC;\n/** @deprecated */\nexports.VRSC = networkTypes_1.coins.VRSC;\n/** @deprecated */\nexports.ZEC = networkTypes_1.coins.ZEC;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}