{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignedSessionObjectData = void 0;\nconst __1 = require(\"../../\");\nconst bufferutils_1 = require(\"../../../utils/bufferutils\");\nconst varuint_1 = require(\"../../../utils/varuint\");\nconst Hash160_1 = require(\"../Hash160\");\nclass SignedSessionObjectData extends __1.VDXFObject {\n  constructor(data = {\n    session_id: \"\",\n    timestamp_micro: 0,\n    body: \"\"\n  }) {\n    super(__1.SIGNED_SESSION_OBJECT_DATA.vdxfid);\n    this.session_id = data.session_id;\n    if (isNaN(data.timestamp_micro)) {\n      this.timestamp_micro = 0;\n    } else {\n      this.timestamp_micro = data.timestamp_micro;\n    }\n    this.body = data.body;\n  }\n  dataByteLength() {\n    let length = 0;\n    const _session_id = Hash160_1.Hash160.fromAddress(this.session_id, false);\n    const _body = Buffer.from(this.body, 'utf8');\n    length += _session_id.byteLength();\n    length += 8; // timestamp_micro\n    length += varuint_1.default.encodingLength(_body.length);\n    length += _body.length;\n    return length;\n  }\n  toDataBuffer() {\n    const buffer = Buffer.alloc(this.dataByteLength());\n    const writer = new bufferutils_1.default.BufferWriter(buffer);\n    const _session_id = Hash160_1.Hash160.fromAddress(this.session_id, false);\n    const _body = Buffer.from(this.body, 'utf8');\n    writer.writeSlice(_session_id.toBuffer());\n    writer.writeUInt64(this.timestamp_micro);\n    writer.writeVarSlice(_body);\n    return writer.buffer;\n  }\n  fromDataBuffer(buffer, offset) {\n    const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n    const length = reader.readCompactSize();\n    if (length == 0) {\n      throw new Error(\"Cannot create signed session object data from empty buffer\");\n    } else {\n      const _session_id = new Hash160_1.Hash160();\n      reader.offset = _session_id.fromBuffer(reader.buffer, false, reader.offset);\n      this.session_id = _session_id.toAddress();\n      this.timestamp_micro = reader.readUInt64();\n      this.body = reader.readVarSlice().toString('utf-8');\n    }\n    return reader.offset;\n  }\n  toJson() {\n    return {\n      session_id: this.session_id,\n      timestamp_micro: this.timestamp_micro,\n      body: this.body\n    };\n  }\n}\nexports.SignedSessionObjectData = SignedSessionObjectData;","map":{"version":3,"names":["Object","defineProperty","exports","value","SignedSessionObjectData","__1","require","bufferutils_1","varuint_1","Hash160_1","VDXFObject","constructor","data","session_id","timestamp_micro","body","SIGNED_SESSION_OBJECT_DATA","vdxfid","isNaN","dataByteLength","length","_session_id","Hash160","fromAddress","_body","Buffer","from","byteLength","default","encodingLength","toDataBuffer","buffer","alloc","writer","BufferWriter","writeSlice","toBuffer","writeUInt64","writeVarSlice","fromDataBuffer","offset","reader","BufferReader","readCompactSize","Error","fromBuffer","toAddress","readUInt64","readVarSlice","toString","toJson"],"sources":["/Users/oddfl3x/Code/varB/NATIBridgeWebsite-main/node_modules/verus-typescript-primitives/dist/vdxf/classes/Web/SignedSessionObjectData.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignedSessionObjectData = void 0;\nconst __1 = require(\"../../\");\nconst bufferutils_1 = require(\"../../../utils/bufferutils\");\nconst varuint_1 = require(\"../../../utils/varuint\");\nconst Hash160_1 = require(\"../Hash160\");\nclass SignedSessionObjectData extends __1.VDXFObject {\n    constructor(data = {\n        session_id: \"\",\n        timestamp_micro: 0,\n        body: \"\"\n    }) {\n        super(__1.SIGNED_SESSION_OBJECT_DATA.vdxfid);\n        this.session_id = data.session_id;\n        if (isNaN(data.timestamp_micro)) {\n            this.timestamp_micro = 0;\n        }\n        else {\n            this.timestamp_micro = data.timestamp_micro;\n        }\n        this.body = data.body;\n    }\n    dataByteLength() {\n        let length = 0;\n        const _session_id = Hash160_1.Hash160.fromAddress(this.session_id, false);\n        const _body = Buffer.from(this.body, 'utf8');\n        length += _session_id.byteLength();\n        length += 8; // timestamp_micro\n        length += varuint_1.default.encodingLength(_body.length);\n        length += _body.length;\n        return length;\n    }\n    toDataBuffer() {\n        const buffer = Buffer.alloc(this.dataByteLength());\n        const writer = new bufferutils_1.default.BufferWriter(buffer);\n        const _session_id = Hash160_1.Hash160.fromAddress(this.session_id, false);\n        const _body = Buffer.from(this.body, 'utf8');\n        writer.writeSlice(_session_id.toBuffer());\n        writer.writeUInt64(this.timestamp_micro);\n        writer.writeVarSlice(_body);\n        return writer.buffer;\n    }\n    fromDataBuffer(buffer, offset) {\n        const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n        const length = reader.readCompactSize();\n        if (length == 0) {\n            throw new Error(\"Cannot create signed session object data from empty buffer\");\n        }\n        else {\n            const _session_id = new Hash160_1.Hash160();\n            reader.offset = _session_id.fromBuffer(reader.buffer, false, reader.offset);\n            this.session_id = _session_id.toAddress();\n            this.timestamp_micro = reader.readUInt64();\n            this.body = reader.readVarSlice().toString('utf-8');\n        }\n        return reader.offset;\n    }\n    toJson() {\n        return {\n            session_id: this.session_id,\n            timestamp_micro: this.timestamp_micro,\n            body: this.body\n        };\n    }\n}\nexports.SignedSessionObjectData = SignedSessionObjectData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}