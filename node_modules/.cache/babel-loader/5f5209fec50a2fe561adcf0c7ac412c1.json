{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReserveTransfer = exports.RESERVE_TRANSFER_DESTINATION = exports.RESERVE_TRANSFER_ARBITRAGE_ONLY = exports.RESERVE_TRANSFER_CURRENCY_EXPORT = exports.RESERVE_TRANSFER_IDENTITY_EXPORT = exports.RESERVE_TRANSFER_REFUND = exports.RESERVE_TRANSFER_RESERVE_TO_RESERVE = exports.RESERVE_TRANSFER_IMPORT_TO_SOURCE = exports.RESERVE_TRANSFER_BURN_CHANGE_WEIGHT = exports.RESERVE_TRANSFER_BURN_CHANGE_PRICE = exports.RESERVE_TRANSFER_CROSS_SYSTEM = exports.RESERVE_TRANSFER_MINT_CURRENCY = exports.RESERVE_TRANSFER_DOUBLE_SEND = exports.RESERVE_TRANSFER_FEE_OUTPUT = exports.RESERVE_TRANSFER_PRECONVERT = exports.RESERVE_TRANSFER_CONVERT = exports.RESERVE_TRANSFER_VALID = exports.RESERVE_TRANSFER_INVALID = void 0;\nconst varint_1 = require(\"../utils/varint\");\nconst bufferutils_1 = require(\"../utils/bufferutils\");\nconst bn_js_1 = require(\"bn.js\");\nconst TokenOutput_1 = require(\"./TokenOutput\");\nconst TransferDestination_1 = require(\"./TransferDestination\");\nconst address_1 = require(\"../utils/address\");\nconst vdxf_1 = require(\"../constants/vdxf\");\nconst {\n  BufferReader,\n  BufferWriter\n} = bufferutils_1.default;\nexports.RESERVE_TRANSFER_INVALID = new bn_js_1.BN(0, 10);\nexports.RESERVE_TRANSFER_VALID = new bn_js_1.BN(1, 10);\nexports.RESERVE_TRANSFER_CONVERT = new bn_js_1.BN(2, 10);\nexports.RESERVE_TRANSFER_PRECONVERT = new bn_js_1.BN(4, 10);\nexports.RESERVE_TRANSFER_FEE_OUTPUT = new bn_js_1.BN(8, 10); // one per import, amount must match total percentage of fees for exporter, no pre-convert allowed\nexports.RESERVE_TRANSFER_DOUBLE_SEND = new bn_js_1.BN(\"10\", 16); // this is used along with increasing the fee to send one transaction on two hops\nexports.RESERVE_TRANSFER_MINT_CURRENCY = new bn_js_1.BN(\"20\", 16); // set when this output is being minted on import\nexports.RESERVE_TRANSFER_CROSS_SYSTEM = new bn_js_1.BN(\"40\", 16); // if this is set, there is a systemID serialized and deserialized as well for destination\nexports.RESERVE_TRANSFER_BURN_CHANGE_PRICE = new bn_js_1.BN(\"80\", 16); // this output is being burned on import and will change the price\nexports.RESERVE_TRANSFER_BURN_CHANGE_WEIGHT = new bn_js_1.BN(\"100\", 16); // this output is being burned on import and will change the reserve ratio\nexports.RESERVE_TRANSFER_IMPORT_TO_SOURCE = new bn_js_1.BN(\"200\", 16); // set when the source currency, not destination is the import currency\nexports.RESERVE_TRANSFER_RESERVE_TO_RESERVE = new bn_js_1.BN(\"400\", 16); // for arbitrage or transient conversion, 2 stage solving (2nd from new fractional to reserves)\nexports.RESERVE_TRANSFER_REFUND = new bn_js_1.BN(\"800\", 16); // this transfer should be refunded, individual property when conversions exceed limits\nexports.RESERVE_TRANSFER_IDENTITY_EXPORT = new bn_js_1.BN(\"1000\", 16); // this exports a full identity when the next cross-chain leg is processed\nexports.RESERVE_TRANSFER_CURRENCY_EXPORT = new bn_js_1.BN(\"2000\", 16); // this exports a currency definition\nexports.RESERVE_TRANSFER_ARBITRAGE_ONLY = new bn_js_1.BN(\"4000\", 16); // in PBaaS V1, one additional reserve transfer from the local system may be added by the importer\nexports.RESERVE_TRANSFER_DESTINATION = new TransferDestination_1.TransferDestination({\n  type: TransferDestination_1.DEST_PKH,\n  destination_bytes: (0, address_1.fromBase58Check)(\"RTqQe58LSj2yr5CrwYFwcsAQ1edQwmrkUU\").hash\n});\nclass ReserveTransfer extends TokenOutput_1.TokenOutput {\n  constructor(data) {\n    super(data);\n    this.flags = exports.RESERVE_TRANSFER_INVALID;\n    this.fee_currency_id = null;\n    this.fee_amount = new bn_js_1.BN(0, 10);\n    this.transfer_destination = new TransferDestination_1.TransferDestination();\n    this.dest_currency_id = null;\n    this.second_reserve_id = null;\n    this.dest_currency_id = null;\n    if (data != null) {\n      if (data.flags != null) this.flags = data.flags;\n      if (data.fee_currency_id != null) this.fee_currency_id = data.fee_currency_id;\n      if (data.fee_amount != null) this.fee_amount = data.fee_amount;\n      if (data.transfer_destination != null) this.transfer_destination = data.transfer_destination;\n      if (data.dest_currency_id != null) this.dest_currency_id = data.dest_currency_id;\n      if (data.second_reserve_id != null) this.second_reserve_id = data.second_reserve_id;\n      if (data.dest_system_id != null) this.dest_system_id = data.dest_system_id;\n    }\n  }\n  isReserveToReserve() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_RESERVE_TO_RESERVE).toNumber();\n  }\n  isCrossSystem() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_CROSS_SYSTEM).toNumber();\n  }\n  isConversion() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_CONVERT).toNumber();\n  }\n  isPreConversion() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_PRECONVERT).toNumber();\n  }\n  isFeeOutput() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_FEE_OUTPUT).toNumber();\n  }\n  isDoubleSend() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_DOUBLE_SEND).toNumber();\n  }\n  isMint() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_MINT_CURRENCY).toNumber();\n  }\n  isBurnChangeWeight() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_BURN_CHANGE_WEIGHT).toNumber();\n  }\n  isBurnChangePrice() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_BURN_CHANGE_PRICE).toNumber();\n  }\n  isImportToSource() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_IMPORT_TO_SOURCE).toNumber();\n  }\n  isRefund() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_REFUND).toNumber();\n  }\n  isIdentityExport() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_IDENTITY_EXPORT).toNumber();\n  }\n  isCurrencyExport() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_CURRENCY_EXPORT).toNumber();\n  }\n  isArbitrageOnly() {\n    return !!this.flags.and(exports.RESERVE_TRANSFER_ARBITRAGE_ONLY).toNumber();\n  }\n  getByteLength() {\n    let length = super.getByteLength();\n    length += varint_1.default.encodingLength(this.flags);\n    length += (0, address_1.fromBase58Check)(this.fee_currency_id).hash.length;\n    length += varint_1.default.encodingLength(this.fee_amount);\n    length += this.transfer_destination.getByteLength();\n    length += (0, address_1.fromBase58Check)(this.dest_currency_id).hash.length;\n    if (this.isReserveToReserve()) {\n      length += (0, address_1.fromBase58Check)(this.second_reserve_id).hash.length;\n    }\n    if (this.isCrossSystem()) {\n      length += (0, address_1.fromBase58Check)(this.dest_system_id).hash.length;\n    }\n    return length;\n  }\n  toBuffer() {\n    const writer = new BufferWriter(Buffer.alloc(this.getByteLength()));\n    const ownOutput = new TokenOutput_1.TokenOutput({\n      values: this.reserve_values,\n      version: this.version\n    });\n    writer.writeSlice(ownOutput.toBuffer());\n    writer.writeVarInt(this.flags);\n    writer.writeSlice((0, address_1.fromBase58Check)(this.fee_currency_id).hash);\n    writer.writeVarInt(this.fee_amount);\n    writer.writeSlice(this.transfer_destination.toBuffer());\n    writer.writeSlice((0, address_1.fromBase58Check)(this.dest_currency_id).hash);\n    if (this.isReserveToReserve()) {\n      writer.writeSlice((0, address_1.fromBase58Check)(this.second_reserve_id).hash);\n    }\n    if (this.isCrossSystem()) {\n      writer.writeSlice((0, address_1.fromBase58Check)(this.dest_system_id).hash);\n    }\n    return writer.buffer;\n  }\n  fromBuffer(buffer) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const _offset = super.fromBuffer(buffer, offset);\n    const reader = new BufferReader(buffer, _offset);\n    this.flags = reader.readVarInt();\n    this.fee_currency_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n    this.fee_amount = reader.readVarInt();\n    this.transfer_destination = new TransferDestination_1.TransferDestination();\n    reader.offset = this.transfer_destination.fromBuffer(buffer, reader.offset);\n    this.dest_currency_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n    if (this.isReserveToReserve()) {\n      this.second_reserve_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n    }\n    if (this.isCrossSystem()) {\n      this.dest_system_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n    }\n    return reader.offset;\n  }\n}\nexports.ReserveTransfer = ReserveTransfer;","map":{"version":3,"names":["Object","defineProperty","exports","value","ReserveTransfer","RESERVE_TRANSFER_DESTINATION","RESERVE_TRANSFER_ARBITRAGE_ONLY","RESERVE_TRANSFER_CURRENCY_EXPORT","RESERVE_TRANSFER_IDENTITY_EXPORT","RESERVE_TRANSFER_REFUND","RESERVE_TRANSFER_RESERVE_TO_RESERVE","RESERVE_TRANSFER_IMPORT_TO_SOURCE","RESERVE_TRANSFER_BURN_CHANGE_WEIGHT","RESERVE_TRANSFER_BURN_CHANGE_PRICE","RESERVE_TRANSFER_CROSS_SYSTEM","RESERVE_TRANSFER_MINT_CURRENCY","RESERVE_TRANSFER_DOUBLE_SEND","RESERVE_TRANSFER_FEE_OUTPUT","RESERVE_TRANSFER_PRECONVERT","RESERVE_TRANSFER_CONVERT","RESERVE_TRANSFER_VALID","RESERVE_TRANSFER_INVALID","varint_1","require","bufferutils_1","bn_js_1","TokenOutput_1","TransferDestination_1","address_1","vdxf_1","BufferReader","BufferWriter","default","BN","TransferDestination","type","DEST_PKH","destination_bytes","fromBase58Check","hash","TokenOutput","constructor","data","flags","fee_currency_id","fee_amount","transfer_destination","dest_currency_id","second_reserve_id","dest_system_id","isReserveToReserve","and","toNumber","isCrossSystem","isConversion","isPreConversion","isFeeOutput","isDoubleSend","isMint","isBurnChangeWeight","isBurnChangePrice","isImportToSource","isRefund","isIdentityExport","isCurrencyExport","isArbitrageOnly","getByteLength","length","encodingLength","toBuffer","writer","Buffer","alloc","ownOutput","values","reserve_values","version","writeSlice","writeVarInt","buffer","fromBuffer","offset","arguments","undefined","_offset","reader","readVarInt","toBase58Check","readSlice","I_ADDR_VERSION"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/node_modules/verus-typescript-primitives/dist/pbaas/ReserveTransfer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReserveTransfer = exports.RESERVE_TRANSFER_DESTINATION = exports.RESERVE_TRANSFER_ARBITRAGE_ONLY = exports.RESERVE_TRANSFER_CURRENCY_EXPORT = exports.RESERVE_TRANSFER_IDENTITY_EXPORT = exports.RESERVE_TRANSFER_REFUND = exports.RESERVE_TRANSFER_RESERVE_TO_RESERVE = exports.RESERVE_TRANSFER_IMPORT_TO_SOURCE = exports.RESERVE_TRANSFER_BURN_CHANGE_WEIGHT = exports.RESERVE_TRANSFER_BURN_CHANGE_PRICE = exports.RESERVE_TRANSFER_CROSS_SYSTEM = exports.RESERVE_TRANSFER_MINT_CURRENCY = exports.RESERVE_TRANSFER_DOUBLE_SEND = exports.RESERVE_TRANSFER_FEE_OUTPUT = exports.RESERVE_TRANSFER_PRECONVERT = exports.RESERVE_TRANSFER_CONVERT = exports.RESERVE_TRANSFER_VALID = exports.RESERVE_TRANSFER_INVALID = void 0;\nconst varint_1 = require(\"../utils/varint\");\nconst bufferutils_1 = require(\"../utils/bufferutils\");\nconst bn_js_1 = require(\"bn.js\");\nconst TokenOutput_1 = require(\"./TokenOutput\");\nconst TransferDestination_1 = require(\"./TransferDestination\");\nconst address_1 = require(\"../utils/address\");\nconst vdxf_1 = require(\"../constants/vdxf\");\nconst { BufferReader, BufferWriter } = bufferutils_1.default;\nexports.RESERVE_TRANSFER_INVALID = new bn_js_1.BN(0, 10);\nexports.RESERVE_TRANSFER_VALID = new bn_js_1.BN(1, 10);\nexports.RESERVE_TRANSFER_CONVERT = new bn_js_1.BN(2, 10);\nexports.RESERVE_TRANSFER_PRECONVERT = new bn_js_1.BN(4, 10);\nexports.RESERVE_TRANSFER_FEE_OUTPUT = new bn_js_1.BN(8, 10); // one per import, amount must match total percentage of fees for exporter, no pre-convert allowed\nexports.RESERVE_TRANSFER_DOUBLE_SEND = new bn_js_1.BN(\"10\", 16); // this is used along with increasing the fee to send one transaction on two hops\nexports.RESERVE_TRANSFER_MINT_CURRENCY = new bn_js_1.BN(\"20\", 16); // set when this output is being minted on import\nexports.RESERVE_TRANSFER_CROSS_SYSTEM = new bn_js_1.BN(\"40\", 16); // if this is set, there is a systemID serialized and deserialized as well for destination\nexports.RESERVE_TRANSFER_BURN_CHANGE_PRICE = new bn_js_1.BN(\"80\", 16); // this output is being burned on import and will change the price\nexports.RESERVE_TRANSFER_BURN_CHANGE_WEIGHT = new bn_js_1.BN(\"100\", 16); // this output is being burned on import and will change the reserve ratio\nexports.RESERVE_TRANSFER_IMPORT_TO_SOURCE = new bn_js_1.BN(\"200\", 16); // set when the source currency, not destination is the import currency\nexports.RESERVE_TRANSFER_RESERVE_TO_RESERVE = new bn_js_1.BN(\"400\", 16); // for arbitrage or transient conversion, 2 stage solving (2nd from new fractional to reserves)\nexports.RESERVE_TRANSFER_REFUND = new bn_js_1.BN(\"800\", 16); // this transfer should be refunded, individual property when conversions exceed limits\nexports.RESERVE_TRANSFER_IDENTITY_EXPORT = new bn_js_1.BN(\"1000\", 16); // this exports a full identity when the next cross-chain leg is processed\nexports.RESERVE_TRANSFER_CURRENCY_EXPORT = new bn_js_1.BN(\"2000\", 16); // this exports a currency definition\nexports.RESERVE_TRANSFER_ARBITRAGE_ONLY = new bn_js_1.BN(\"4000\", 16); // in PBaaS V1, one additional reserve transfer from the local system may be added by the importer\nexports.RESERVE_TRANSFER_DESTINATION = new TransferDestination_1.TransferDestination({\n    type: TransferDestination_1.DEST_PKH,\n    destination_bytes: (0, address_1.fromBase58Check)(\"RTqQe58LSj2yr5CrwYFwcsAQ1edQwmrkUU\").hash\n});\nclass ReserveTransfer extends TokenOutput_1.TokenOutput {\n    constructor(data) {\n        super(data);\n        this.flags = exports.RESERVE_TRANSFER_INVALID;\n        this.fee_currency_id = null;\n        this.fee_amount = new bn_js_1.BN(0, 10);\n        this.transfer_destination = new TransferDestination_1.TransferDestination();\n        this.dest_currency_id = null;\n        this.second_reserve_id = null;\n        this.dest_currency_id = null;\n        if (data != null) {\n            if (data.flags != null)\n                this.flags = data.flags;\n            if (data.fee_currency_id != null)\n                this.fee_currency_id = data.fee_currency_id;\n            if (data.fee_amount != null)\n                this.fee_amount = data.fee_amount;\n            if (data.transfer_destination != null)\n                this.transfer_destination = data.transfer_destination;\n            if (data.dest_currency_id != null)\n                this.dest_currency_id = data.dest_currency_id;\n            if (data.second_reserve_id != null)\n                this.second_reserve_id = data.second_reserve_id;\n            if (data.dest_system_id != null)\n                this.dest_system_id = data.dest_system_id;\n        }\n    }\n    isReserveToReserve() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_RESERVE_TO_RESERVE).toNumber());\n    }\n    isCrossSystem() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_CROSS_SYSTEM).toNumber());\n    }\n    isConversion() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_CONVERT).toNumber());\n    }\n    isPreConversion() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_PRECONVERT).toNumber());\n    }\n    isFeeOutput() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_FEE_OUTPUT).toNumber());\n    }\n    isDoubleSend() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_DOUBLE_SEND).toNumber());\n    }\n    isMint() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_MINT_CURRENCY).toNumber());\n    }\n    isBurnChangeWeight() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_BURN_CHANGE_WEIGHT).toNumber());\n    }\n    isBurnChangePrice() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_BURN_CHANGE_PRICE).toNumber());\n    }\n    isImportToSource() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_IMPORT_TO_SOURCE).toNumber());\n    }\n    isRefund() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_REFUND).toNumber());\n    }\n    isIdentityExport() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_IDENTITY_EXPORT).toNumber());\n    }\n    isCurrencyExport() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_CURRENCY_EXPORT).toNumber());\n    }\n    isArbitrageOnly() {\n        return !!(this.flags.and(exports.RESERVE_TRANSFER_ARBITRAGE_ONLY).toNumber());\n    }\n    getByteLength() {\n        let length = super.getByteLength();\n        length += varint_1.default.encodingLength(this.flags);\n        length += (0, address_1.fromBase58Check)(this.fee_currency_id).hash.length;\n        length += varint_1.default.encodingLength(this.fee_amount);\n        length += this.transfer_destination.getByteLength();\n        length += (0, address_1.fromBase58Check)(this.dest_currency_id).hash.length;\n        if (this.isReserveToReserve()) {\n            length += (0, address_1.fromBase58Check)(this.second_reserve_id).hash.length;\n        }\n        if (this.isCrossSystem()) {\n            length += (0, address_1.fromBase58Check)(this.dest_system_id).hash.length;\n        }\n        return length;\n    }\n    toBuffer() {\n        const writer = new BufferWriter(Buffer.alloc(this.getByteLength()));\n        const ownOutput = new TokenOutput_1.TokenOutput({\n            values: this.reserve_values,\n            version: this.version\n        });\n        writer.writeSlice(ownOutput.toBuffer());\n        writer.writeVarInt(this.flags);\n        writer.writeSlice((0, address_1.fromBase58Check)(this.fee_currency_id).hash);\n        writer.writeVarInt(this.fee_amount);\n        writer.writeSlice(this.transfer_destination.toBuffer());\n        writer.writeSlice((0, address_1.fromBase58Check)(this.dest_currency_id).hash);\n        if (this.isReserveToReserve()) {\n            writer.writeSlice((0, address_1.fromBase58Check)(this.second_reserve_id).hash);\n        }\n        if (this.isCrossSystem()) {\n            writer.writeSlice((0, address_1.fromBase58Check)(this.dest_system_id).hash);\n        }\n        return writer.buffer;\n    }\n    fromBuffer(buffer, offset = 0) {\n        const _offset = super.fromBuffer(buffer, offset);\n        const reader = new BufferReader(buffer, _offset);\n        this.flags = reader.readVarInt();\n        this.fee_currency_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n        this.fee_amount = reader.readVarInt();\n        this.transfer_destination = new TransferDestination_1.TransferDestination();\n        reader.offset = this.transfer_destination.fromBuffer(buffer, reader.offset);\n        this.dest_currency_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n        if (this.isReserveToReserve()) {\n            this.second_reserve_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n        }\n        if (this.isCrossSystem()) {\n            this.dest_system_id = (0, address_1.toBase58Check)(reader.readSlice(20), vdxf_1.I_ADDR_VERSION);\n        }\n        return reader.offset;\n    }\n}\nexports.ReserveTransfer = ReserveTransfer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}