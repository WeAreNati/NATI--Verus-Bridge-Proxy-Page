{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst axios_1 = __importDefault(require(\"axios\"));\nconst verus_typescript_primitives_1 = require(\"verus-typescript-primitives\");\nconst flags_1 = require(\"./utils/flags\");\nclass VerusdRpcInterface {\n  constructor(chain, baseURL, config, rpcRequest) {\n    this.currencycache = new Map();\n    this.converterscache = new Map();\n    this.listcurrenciescache = new Map();\n    this.infocache = null;\n    if (rpcRequest) this.rpcRequestOverride = rpcRequest;else {\n      this.instance = axios_1.default.create(Object.assign({\n        baseURL,\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }, config));\n    }\n    this.currid = 0;\n    this.chain = chain;\n  }\n  request(req) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const id = this.currid;\n      this.currid += 1;\n      const body = {\n        jsonrpc: \"1.0\",\n        id,\n        params: req.getParams(),\n        method: req.cmd\n      };\n      if (this.rpcRequestOverride) return this.rpcRequestOverride(body);\n      try {\n        const res = yield this.instance.post(\"/\", body);\n        if (res.status != 200) {\n          const error = {\n            id,\n            result: null,\n            error: {\n              code: res.status,\n              message: `Network error ${res.status}`,\n              data: res.data\n            }\n          };\n          return error;\n        } else {\n          const response = res.data;\n          return response;\n        }\n      } catch (e) {\n        const error = {\n          id,\n          result: null,\n          error: {\n            code: -32603,\n            message: e.message\n          }\n        };\n        return error;\n      }\n    });\n  }\n  getAddressBalance(...args) {\n    return this.request(new verus_typescript_primitives_1.GetAddressBalanceRequest(this.chain, ...args));\n  }\n  getAddressDeltas(...args) {\n    return this.request(new verus_typescript_primitives_1.GetAddressDeltasRequest(this.chain, ...args));\n  }\n  getAddressMempool(...args) {\n    return this.request(new verus_typescript_primitives_1.GetAddressMempoolRequest(this.chain, ...args));\n  }\n  getAddressUtxos(...args) {\n    return this.request(new verus_typescript_primitives_1.GetAddressUtxosRequest(this.chain, ...args));\n  }\n  getBlock(...args) {\n    return this.request(new verus_typescript_primitives_1.GetBlockRequest(this.chain, ...args));\n  }\n  getVdxfId(...args) {\n    return this.request(new verus_typescript_primitives_1.GetVdxfIdRequest(this.chain, ...args));\n  }\n  getIdentity(...args) {\n    return this.request(new verus_typescript_primitives_1.GetIdentityRequest(this.chain, ...args));\n  }\n  getCurrency(...args) {\n    return this.request(new verus_typescript_primitives_1.GetCurrencyRequest(this.chain, ...args));\n  }\n  getInfo(...args) {\n    return this.request(new verus_typescript_primitives_1.GetInfoRequest(this.chain, ...args));\n  }\n  getOffers(...args) {\n    return this.request(new verus_typescript_primitives_1.GetOffersRequest(this.chain, ...args));\n  }\n  getRawTransaction(...args) {\n    return this.request(new verus_typescript_primitives_1.GetRawTransactionRequest(this.chain, ...args));\n  }\n  makeOffer(...args) {\n    return this.request(new verus_typescript_primitives_1.MakeOfferRequest(this.chain, ...args));\n  }\n  sendRawTransaction(...args) {\n    return this.request(new verus_typescript_primitives_1.SendRawTransactionRequest(this.chain, ...args));\n  }\n  fundRawTransaction(...args) {\n    return this.request(new verus_typescript_primitives_1.FundRawTransactionRequest(this.chain, ...args));\n  }\n  sendCurrency(...args) {\n    return this.request(new verus_typescript_primitives_1.SendCurrencyRequest(this.chain, ...args));\n  }\n  getCurrencyConverters(...args) {\n    return this.request(new verus_typescript_primitives_1.GetCurrencyConvertersRequest(this.chain, ...args));\n  }\n  listCurrencies(...args) {\n    return this.request(new verus_typescript_primitives_1.ListCurrenciesRequest(this.chain, ...args));\n  }\n  estimateConversion(...args) {\n    return this.request(new verus_typescript_primitives_1.EstimateConversionRequest(this.chain, ...args));\n  }\n  static extractRpcResult(res) {\n    if (res.error) throw new Error(res.error.message);else return res.result;\n  }\n  getCachedCurrency(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const [iaddr] = args;\n      if (this.currencycache.has(iaddr)) {\n        return this.currencycache.get(iaddr);\n      }\n      const response = yield this.request(new verus_typescript_primitives_1.GetCurrencyRequest(this.chain, ...args));\n      if (response.result) {\n        this.currencycache.set(iaddr, response);\n      }\n      return response;\n    });\n  }\n  getCachedInfo(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.infocache != null) {\n        return this.infocache;\n      }\n      const response = yield this.request(new verus_typescript_primitives_1.GetInfoRequest(this.chain, ...args));\n      if (response.result) {\n        this.infocache = response;\n      }\n      return response;\n    });\n  }\n  getCachedListCurrencies(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const key = JSON.stringify(args);\n      if (this.listcurrenciescache.has(key)) {\n        return this.listcurrenciescache.get(key);\n      }\n      const response = yield this.request(new verus_typescript_primitives_1.ListCurrenciesRequest(this.chain, ...args));\n      if (response.result) {\n        this.listcurrenciescache.set(key, response);\n      }\n      return response;\n    });\n  }\n  getAllCachedListCurrencies() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const localCurrencies = VerusdRpcInterface.extractRpcResult(yield this.getCachedListCurrencies({\n        systemtype: \"local\"\n      }));\n      const pbaasCurrencies = VerusdRpcInterface.extractRpcResult(yield this.getCachedListCurrencies({\n        systemtype: \"pbaas\"\n      }));\n      const importedCurrencies = VerusdRpcInterface.extractRpcResult(yield this.getCachedListCurrencies({\n        systemtype: \"imported\"\n      }));\n      const allCurrencies = [...localCurrencies, ...pbaasCurrencies, ...importedCurrencies];\n      const seenCurrencies = new Set();\n      return allCurrencies.filter(x => {\n        if (seenCurrencies.has(x.currencydefinition.currencyid)) return false;else {\n          seenCurrencies.add(x.currencydefinition.currencyid);\n          return true;\n        }\n      });\n    });\n  }\n  getCachedCurrencyConverters(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const key = JSON.stringify(args);\n      if (this.converterscache.has(key)) {\n        return this.converterscache.get(key);\n      }\n      const allCurrencies = yield this.getAllCachedListCurrencies();\n      const root = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(this.chain));\n      const chainInfo = VerusdRpcInterface.extractRpcResult(yield this.getCachedInfo());\n      // Try to cache locally constructed converter responses\n      for (const source of allCurrencies) {\n        const sourceDefinition = source.currencydefinition;\n        const converters = [];\n        for (const dest of allCurrencies) {\n          const destDefinition = dest.currencydefinition;\n          if (destDefinition.currencies && destDefinition.currencies.includes(sourceDefinition.currencyid) && dest.bestcurrencystate) {\n            if (destDefinition.startblock > chainInfo.longestchain && !(destDefinition.maxpreconversion && destDefinition.maxpreconversion.reduce((sum, a) => sum + a, 0) === 0)) {\n              converters.push({\n                [destDefinition.name]: Object.assign(Object.assign({}, destDefinition), {\n                  bestcurrencystate: dest.bestcurrencystate\n                })\n              });\n            } else if ((0, flags_1.checkFlag)(destDefinition.options, flags_1.IS_FRACTIONAL_FLAG)) {\n              const targetReserve = dest.bestcurrencystate.reservecurrencies.find(x => x.currencyid === root.currencyid);\n              const systemReserve = dest.bestcurrencystate.reservecurrencies.find(x => x.currencyid === this.chain);\n              if (targetReserve && targetReserve.weight > 0.1 && systemReserve && systemReserve.reserves > 1000) {\n                converters.push({\n                  [destDefinition.name]: Object.assign(Object.assign({}, destDefinition), {\n                    bestcurrencystate: dest.bestcurrencystate\n                  })\n                });\n              }\n            }\n          }\n        }\n        const params = [[sourceDefinition.currencyid]];\n        const converterResponse = {\n          id: 0,\n          result: converters,\n          error: null\n        };\n        this.converterscache.set(JSON.stringify(params), converterResponse);\n      }\n      if (!this.converterscache.has(key)) {\n        const response = yield this.request(new verus_typescript_primitives_1.GetCurrencyConvertersRequest(this.chain, ...args));\n        if (response.result) {\n          this.converterscache.set(key, response);\n        }\n        return response;\n      } else {\n        return this.converterscache.get(key);\n      }\n    });\n  }\n  getCurrencyConversionPathsRec(src, dest, includeVia = true, ignoreCurrencies = [], via, root) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const currChainDefinition = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(this.chain));\n      const fractionalSource = (0, flags_1.checkFlag)(src.options, flags_1.IS_FRACTIONAL_FLAG) && src.systemid === currChainDefinition.currencyid;\n      const paths = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrencyConverters(dest == null ? [src.currencyid] : [src.currencyid, dest.currencyid]));\n      let convertables = {};\n      function addConvertable(key, convertable) {\n        if (convertables[key] == null) {\n          convertables[key] = [convertable];\n        } else {\n          convertables[key].push(convertable);\n        }\n      }\n      function mergeConvertables(x, y) {\n        const merged = {};\n        for (const key in x) {\n          if (y[key]) {\n            merged[key] = x[key];\n            for (const conv of y[key]) {\n              const existingConvertable = x[key].find(x => {\n                return x.destination === conv.destination && x.via === conv.via && x.exportto === conv.exportto;\n              });\n              if (existingConvertable == null) merged[key].push(conv);\n            }\n          } else {\n            merged[key] = x[key];\n          }\n        }\n        for (const key in y) {\n          if (!merged[key]) {\n            merged[key] = y[key];\n          }\n        }\n        convertables = merged;\n      }\n      destination_iterator: for (const path of paths) {\n        const currencyName = Object.keys(path)[0];\n        const fullCurrencyDefinition = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(path[currencyName].currencyid));\n        let pricingCurrencyState;\n        let price;\n        let viapriceinroot;\n        let destpriceinvia;\n        if (via) {\n          if (via.bestcurrencystate) {\n            pricingCurrencyState = via.bestcurrencystate;\n          } else {\n            pricingCurrencyState = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(via.currencyid)).bestcurrencystate;\n          }\n          // If the pricingCurrency doesn't contain the destination\n          // in it's reserves, we can't use it for via\n          if (pricingCurrencyState.currencies[fullCurrencyDefinition.currencyid] == null) {\n            continue;\n          }\n          viapriceinroot = 1 / pricingCurrencyState.currencies[root.currencyid].lastconversionprice;\n          destpriceinvia = pricingCurrencyState.currencies[fullCurrencyDefinition.currencyid].lastconversionprice;\n          price = 1 / (pricingCurrencyState.currencies[root.currencyid].lastconversionprice / pricingCurrencyState.currencies[fullCurrencyDefinition.currencyid].lastconversionprice);\n        } else {\n          if (fullCurrencyDefinition.bestcurrencystate) {\n            pricingCurrencyState = fullCurrencyDefinition.bestcurrencystate;\n          } else {\n            pricingCurrencyState = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(fullCurrencyDefinition.currencyid)).bestcurrencystate;\n          }\n          price = 1 / pricingCurrencyState.currencies[src.currencyid].lastconversionprice;\n        }\n        const gateway = (0, flags_1.checkFlag)(fullCurrencyDefinition.options, flags_1.IS_GATEWAY_FLAG);\n        const gatewayConverter = (0, flags_1.checkFlag)(fullCurrencyDefinition.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) || (0, flags_1.checkFlag)(src.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) || via != null && (0, flags_1.checkFlag)(via.options, flags_1.IS_GATEWAY_CONVERTER_FLAG);\n        const fractionalConverter = via ? via : fullCurrencyDefinition;\n        addConvertable(fullCurrencyDefinition.currencyid, {\n          via,\n          destination: fullCurrencyDefinition,\n          exportto: gateway || gatewayConverter ? VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(gateway ? fullCurrencyDefinition.currencyid : fractionalConverter.parent === this.chain ? fractionalConverter.launchsystemid : fractionalConverter.parent)) : undefined,\n          price,\n          gateway,\n          viapriceinroot,\n          destpriceinvia\n        });\n        // If gateway converter, allow converting to same currency, on current system\n        if (gateway || gatewayConverter) {\n          const convertableArr = convertables[fullCurrencyDefinition.currencyid];\n          const existingOnChainConversion = convertableArr != null ? convertableArr.find(x => x.exportto == null) : null;\n          if (existingOnChainConversion == null) {\n            addConvertable(fullCurrencyDefinition.currencyid, {\n              via,\n              destination: fullCurrencyDefinition,\n              price,\n              gateway: false,\n              viapriceinroot,\n              destpriceinvia\n            });\n          }\n        }\n      }\n      if (fractionalSource && dest == null) {\n        let price;\n        let viapriceinroot;\n        let destpriceinvia;\n        for (const reserve of src.currencies) {\n          let pricingCurrencyState;\n          if (!ignoreCurrencies.includes(reserve)) {\n            if (via) {\n              if (via.bestcurrencystate) {\n                pricingCurrencyState = via.bestcurrencystate;\n              } else {\n                pricingCurrencyState = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(via.currencyid)).bestcurrencystate;\n              }\n              viapriceinroot = 1 / pricingCurrencyState.currencies[root.currencyid].lastconversionprice;\n              destpriceinvia = pricingCurrencyState.currencies[reserve].lastconversionprice;\n              price = 1 / (pricingCurrencyState.currencies[root.currencyid].lastconversionprice / pricingCurrencyState.currencies[reserve].lastconversionprice);\n            } else {\n              if (src.bestcurrencystate) {\n                pricingCurrencyState = src.bestcurrencystate;\n              } else {\n                pricingCurrencyState = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(src.currencyid)).bestcurrencystate;\n              }\n              price = pricingCurrencyState.currencies[reserve].lastconversionprice;\n            }\n            const _destination = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(reserve));\n            const gateway = (0, flags_1.checkFlag)(_destination.options, flags_1.IS_GATEWAY_FLAG);\n            const gatewayConverter = (0, flags_1.checkFlag)(_destination.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) || (0, flags_1.checkFlag)(src.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) || via != null && (0, flags_1.checkFlag)(via.options, flags_1.IS_GATEWAY_CONVERTER_FLAG);\n            const fractionalConverter = via ? via : src;\n            addConvertable(reserve, {\n              via,\n              destination: _destination,\n              exportto: gateway || gatewayConverter ? VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(gateway ? _destination.currencyid : fractionalConverter.parent === this.chain ? fractionalConverter.launchsystemid : fractionalConverter.parent)) : undefined,\n              price,\n              viapriceinroot,\n              destpriceinvia,\n              gateway\n            });\n            // If gateway converter, allow converting to same currency, on current system\n            if (gateway || gatewayConverter) {\n              const convertableArr = convertables[reserve];\n              const existingOnChainConversion = convertableArr != null ? convertableArr.find(x => x.exportto == null) : null;\n              if (existingOnChainConversion == null) {\n                addConvertable(reserve, {\n                  via,\n                  destination: _destination,\n                  price,\n                  gateway: false,\n                  viapriceinroot,\n                  destpriceinvia\n                });\n              }\n            }\n          }\n        }\n      }\n      if (includeVia) {\n        const chainInfo = VerusdRpcInterface.extractRpcResult(yield this.getCachedInfo());\n        for (const key in convertables) {\n          for (const convertablePath of convertables[key]) {\n            const started = convertablePath.destination.startblock <= chainInfo.longestchain || convertablePath.destination.launchsystemid !== chainInfo.chainid;\n            if ((0, flags_1.checkFlag)(convertablePath.destination.options, flags_1.IS_FRACTIONAL_FLAG) && !ignoreCurrencies.includes(key) && convertablePath.destination.currencies.includes(src.currencyid) && started) {\n              mergeConvertables(convertables, yield this._getCurrencyConversionPaths(convertablePath.destination, dest, false, ignoreCurrencies, convertablePath.destination, src));\n            }\n          }\n        }\n      }\n      // Rules:\n      // The systemid of the fractional currency determines if exportto must be present or not.\n      // If using via, the via is always the fractional currency.\n      // If not using via, check both source and dest for fractional flag.\n      for (const key in convertables) {\n        const convertableArr = convertables[key];\n        convertables[key] = convertableArr.filter(x => {\n          const convertable = x;\n          let fractionalConverter;\n          if (convertable.via) fractionalConverter = convertable.via;else {\n            const fractionalDest = (0, flags_1.checkFlag)(convertable.destination.options, flags_1.IS_FRACTIONAL_FLAG);\n            if (fractionalSource && !fractionalDest) fractionalConverter = src;else if (!fractionalSource && fractionalDest) fractionalConverter = convertable.destination;else if (src.currencies && convertable.destination.currencies) {\n              if (src.currencies.includes(convertable.destination.currencyid)) fractionalConverter = src;else fractionalConverter = convertable.destination;\n            } else return false;\n          }\n          if (fractionalConverter.systemid !== this.chain && (convertable.exportto == null || convertable.exportto.currencyid !== fractionalConverter.systemid)) return false;else if (convertable.exportto != null) {\n            // Make sure you only export to currencies that can see the chain you're on\n            const seeByLaunch = convertable.exportto.launchsystemid === currChainDefinition.currencyid || currChainDefinition.launchsystemid === convertable.exportto.currencyid;\n            const seeByParent = convertable.exportto.parent === currChainDefinition.currencyid || currChainDefinition.parent === convertable.exportto.currencyid;\n            return seeByLaunch || seeByParent;\n          } else return true;\n        });\n      }\n      return convertables;\n    });\n  }\n  _getCurrencyConversionPaths(src, dest, includeVia = true, ignoreCurrencies = [], via, root) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const paths = yield this.getCurrencyConversionPathsRec(src, dest, includeVia, ignoreCurrencies, via, root);\n      delete paths[src.currencyid];\n      return paths;\n    });\n  }\n  getCurrencyConversionPaths(src, dest, includeVia = true, ignoreCurrencies = [], via, root) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _cache = this.currencycache;\n        function cacheDefinition(x) {\n          _cache.set(x.currencyid, {\n            id: 0,\n            result: x,\n            error: null\n          });\n        }\n        cacheDefinition(src);\n        if (dest != null) {\n          cacheDefinition(dest);\n        }\n        if (via != null) {\n          cacheDefinition(via);\n        }\n        if (root != null) {\n          cacheDefinition(root);\n        }\n        const allCurrencies = yield this.getAllCachedListCurrencies();\n        for (const currency of allCurrencies) {\n          const definition = Object.assign(Object.assign({}, currency.currencydefinition), {\n            bestcurrencystate: currency.bestcurrencystate\n          });\n          const getCurrencyResponse = {\n            id: 0,\n            result: definition,\n            error: null\n          };\n          this.currencycache.set(definition.currencyid, getCurrencyResponse);\n        }\n        const result = yield this._getCurrencyConversionPaths(src, dest, includeVia, ignoreCurrencies, via, root);\n        this.currencycache.clear();\n        this.listcurrenciescache.clear();\n        this.converterscache.clear();\n        this.infocache = null;\n        return result;\n      } catch (e) {\n        this.currencycache.clear();\n        this.listcurrenciescache.clear();\n        this.converterscache.clear();\n        this.infocache = null;\n        throw e;\n      }\n    });\n  }\n}\nexports.default = VerusdRpcInterface;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","axios_1","require","verus_typescript_primitives_1","flags_1","VerusdRpcInterface","constructor","chain","baseURL","config","rpcRequest","currencycache","Map","converterscache","listcurrenciescache","infocache","rpcRequestOverride","instance","default","create","assign","headers","currid","request","req","id","body","jsonrpc","params","getParams","method","cmd","res","post","status","error","code","message","data","response","getAddressBalance","args","GetAddressBalanceRequest","getAddressDeltas","GetAddressDeltasRequest","getAddressMempool","GetAddressMempoolRequest","getAddressUtxos","GetAddressUtxosRequest","getBlock","GetBlockRequest","getVdxfId","GetVdxfIdRequest","getIdentity","GetIdentityRequest","getCurrency","GetCurrencyRequest","getInfo","GetInfoRequest","getOffers","GetOffersRequest","getRawTransaction","GetRawTransactionRequest","makeOffer","MakeOfferRequest","sendRawTransaction","SendRawTransactionRequest","fundRawTransaction","FundRawTransactionRequest","sendCurrency","SendCurrencyRequest","getCurrencyConverters","GetCurrencyConvertersRequest","listCurrencies","ListCurrenciesRequest","estimateConversion","EstimateConversionRequest","extractRpcResult","Error","getCachedCurrency","iaddr","has","get","set","getCachedInfo","getCachedListCurrencies","key","JSON","stringify","getAllCachedListCurrencies","localCurrencies","systemtype","pbaasCurrencies","importedCurrencies","allCurrencies","seenCurrencies","Set","filter","x","currencydefinition","currencyid","add","getCachedCurrencyConverters","root","chainInfo","source","sourceDefinition","converters","dest","destDefinition","currencies","includes","bestcurrencystate","startblock","longestchain","maxpreconversion","reduce","sum","a","push","name","checkFlag","options","IS_FRACTIONAL_FLAG","targetReserve","reservecurrencies","find","systemReserve","weight","reserves","converterResponse","getCurrencyConversionPathsRec","src","includeVia","ignoreCurrencies","via","currChainDefinition","fractionalSource","systemid","paths","convertables","addConvertable","convertable","mergeConvertables","y","merged","conv","existingConvertable","destination","exportto","destination_iterator","path","currencyName","keys","fullCurrencyDefinition","pricingCurrencyState","price","viapriceinroot","destpriceinvia","lastconversionprice","gateway","IS_GATEWAY_FLAG","gatewayConverter","IS_GATEWAY_CONVERTER_FLAG","fractionalConverter","parent","launchsystemid","undefined","convertableArr","existingOnChainConversion","reserve","_destination","convertablePath","started","chainid","_getCurrencyConversionPaths","fractionalDest","seeByLaunch","seeByParent","getCurrencyConversionPaths","_cache","cacheDefinition","currency","definition","getCurrencyResponse","clear"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/verusd-rpc-ts-client/lib/VerusdRpcInterface.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = __importDefault(require(\"axios\"));\nconst verus_typescript_primitives_1 = require(\"verus-typescript-primitives\");\nconst flags_1 = require(\"./utils/flags\");\nclass VerusdRpcInterface {\n    constructor(chain, baseURL, config, rpcRequest) {\n        this.currencycache = new Map();\n        this.converterscache = new Map();\n        this.listcurrenciescache = new Map();\n        this.infocache = null;\n        if (rpcRequest)\n            this.rpcRequestOverride = rpcRequest;\n        else {\n            this.instance = axios_1.default.create(Object.assign({ baseURL, headers: {\n                    \"Content-type\": \"application/json\",\n                } }, config));\n        }\n        this.currid = 0;\n        this.chain = chain;\n    }\n    request(req) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const id = this.currid;\n            this.currid += 1;\n            const body = {\n                jsonrpc: \"1.0\",\n                id,\n                params: req.getParams(),\n                method: req.cmd,\n            };\n            if (this.rpcRequestOverride)\n                return this.rpcRequestOverride(body);\n            try {\n                const res = yield this.instance.post(\"/\", body);\n                if (res.status != 200) {\n                    const error = {\n                        id,\n                        result: null,\n                        error: {\n                            code: res.status,\n                            message: `Network error ${res.status}`,\n                            data: res.data,\n                        },\n                    };\n                    return error;\n                }\n                else {\n                    const response = res.data;\n                    return response;\n                }\n            }\n            catch (e) {\n                const error = {\n                    id,\n                    result: null,\n                    error: {\n                        code: -32603,\n                        message: e.message,\n                    },\n                };\n                return error;\n            }\n        });\n    }\n    getAddressBalance(...args) {\n        return this.request(new verus_typescript_primitives_1.GetAddressBalanceRequest(this.chain, ...args));\n    }\n    getAddressDeltas(...args) {\n        return this.request(new verus_typescript_primitives_1.GetAddressDeltasRequest(this.chain, ...args));\n    }\n    getAddressMempool(...args) {\n        return this.request(new verus_typescript_primitives_1.GetAddressMempoolRequest(this.chain, ...args));\n    }\n    getAddressUtxos(...args) {\n        return this.request(new verus_typescript_primitives_1.GetAddressUtxosRequest(this.chain, ...args));\n    }\n    getBlock(...args) {\n        return this.request(new verus_typescript_primitives_1.GetBlockRequest(this.chain, ...args));\n    }\n    getVdxfId(...args) {\n        return this.request(new verus_typescript_primitives_1.GetVdxfIdRequest(this.chain, ...args));\n    }\n    getIdentity(...args) {\n        return this.request(new verus_typescript_primitives_1.GetIdentityRequest(this.chain, ...args));\n    }\n    getCurrency(...args) {\n        return this.request(new verus_typescript_primitives_1.GetCurrencyRequest(this.chain, ...args));\n    }\n    getInfo(...args) {\n        return this.request(new verus_typescript_primitives_1.GetInfoRequest(this.chain, ...args));\n    }\n    getOffers(...args) {\n        return this.request(new verus_typescript_primitives_1.GetOffersRequest(this.chain, ...args));\n    }\n    getRawTransaction(...args) {\n        return this.request(new verus_typescript_primitives_1.GetRawTransactionRequest(this.chain, ...args));\n    }\n    makeOffer(...args) {\n        return this.request(new verus_typescript_primitives_1.MakeOfferRequest(this.chain, ...args));\n    }\n    sendRawTransaction(...args) {\n        return this.request(new verus_typescript_primitives_1.SendRawTransactionRequest(this.chain, ...args));\n    }\n    fundRawTransaction(...args) {\n        return this.request(new verus_typescript_primitives_1.FundRawTransactionRequest(this.chain, ...args));\n    }\n    sendCurrency(...args) {\n        return this.request(new verus_typescript_primitives_1.SendCurrencyRequest(this.chain, ...args));\n    }\n    getCurrencyConverters(...args) {\n        return this.request(new verus_typescript_primitives_1.GetCurrencyConvertersRequest(this.chain, ...args));\n    }\n    listCurrencies(...args) {\n        return this.request(new verus_typescript_primitives_1.ListCurrenciesRequest(this.chain, ...args));\n    }\n    estimateConversion(...args) {\n        return this.request(new verus_typescript_primitives_1.EstimateConversionRequest(this.chain, ...args));\n    }\n    static extractRpcResult(res) {\n        if (res.error)\n            throw new Error(res.error.message);\n        else\n            return res.result;\n    }\n    getCachedCurrency(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [iaddr] = args;\n            if (this.currencycache.has(iaddr)) {\n                return this.currencycache.get(iaddr);\n            }\n            const response = yield this.request(new verus_typescript_primitives_1.GetCurrencyRequest(this.chain, ...args));\n            if (response.result) {\n                this.currencycache.set(iaddr, response);\n            }\n            return response;\n        });\n    }\n    getCachedInfo(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.infocache != null) {\n                return this.infocache;\n            }\n            const response = yield this.request(new verus_typescript_primitives_1.GetInfoRequest(this.chain, ...args));\n            if (response.result) {\n                this.infocache = response;\n            }\n            return response;\n        });\n    }\n    getCachedListCurrencies(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = JSON.stringify(args);\n            if (this.listcurrenciescache.has(key)) {\n                return this.listcurrenciescache.get(key);\n            }\n            const response = yield this.request(new verus_typescript_primitives_1.ListCurrenciesRequest(this.chain, ...args));\n            if (response.result) {\n                this.listcurrenciescache.set(key, response);\n            }\n            return response;\n        });\n    }\n    getAllCachedListCurrencies() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const localCurrencies = VerusdRpcInterface.extractRpcResult(yield this.getCachedListCurrencies({ systemtype: \"local\" }));\n            const pbaasCurrencies = VerusdRpcInterface.extractRpcResult(yield this.getCachedListCurrencies({ systemtype: \"pbaas\" }));\n            const importedCurrencies = VerusdRpcInterface.extractRpcResult(yield this.getCachedListCurrencies({ systemtype: \"imported\" }));\n            const allCurrencies = [...localCurrencies, ...pbaasCurrencies, ...importedCurrencies];\n            const seenCurrencies = new Set();\n            return allCurrencies.filter(x => {\n                if (seenCurrencies.has(x.currencydefinition.currencyid))\n                    return false;\n                else {\n                    seenCurrencies.add(x.currencydefinition.currencyid);\n                    return true;\n                }\n            });\n        });\n    }\n    getCachedCurrencyConverters(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = JSON.stringify(args);\n            if (this.converterscache.has(key)) {\n                return this.converterscache.get(key);\n            }\n            const allCurrencies = yield this.getAllCachedListCurrencies();\n            const root = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(this.chain)));\n            const chainInfo = (VerusdRpcInterface.extractRpcResult(yield this.getCachedInfo()));\n            // Try to cache locally constructed converter responses\n            for (const source of allCurrencies) {\n                const sourceDefinition = source.currencydefinition;\n                const converters = [];\n                for (const dest of allCurrencies) {\n                    const destDefinition = dest.currencydefinition;\n                    if (destDefinition.currencies &&\n                        destDefinition.currencies.includes(sourceDefinition.currencyid) &&\n                        dest.bestcurrencystate) {\n                        if (destDefinition.startblock > chainInfo.longestchain &&\n                            !(destDefinition.maxpreconversion && destDefinition.maxpreconversion.reduce((sum, a) => sum + a, 0) === 0)) {\n                            converters.push({\n                                [destDefinition.name]: Object.assign(Object.assign({}, destDefinition), { bestcurrencystate: dest.bestcurrencystate })\n                            });\n                        }\n                        else if ((0, flags_1.checkFlag)(destDefinition.options, flags_1.IS_FRACTIONAL_FLAG)) {\n                            const targetReserve = dest.bestcurrencystate.reservecurrencies.find(x => x.currencyid === root.currencyid);\n                            const systemReserve = dest.bestcurrencystate.reservecurrencies.find(x => x.currencyid === this.chain);\n                            if (targetReserve && targetReserve.weight > 0.1 && systemReserve && systemReserve.reserves > 1000) {\n                                converters.push({\n                                    [destDefinition.name]: Object.assign(Object.assign({}, destDefinition), { bestcurrencystate: dest.bestcurrencystate })\n                                });\n                            }\n                        }\n                    }\n                }\n                const params = [[sourceDefinition.currencyid]];\n                const converterResponse = {\n                    id: 0,\n                    result: converters,\n                    error: null\n                };\n                this.converterscache.set(JSON.stringify(params), converterResponse);\n            }\n            if (!this.converterscache.has(key)) {\n                const response = yield this.request(new verus_typescript_primitives_1.GetCurrencyConvertersRequest(this.chain, ...args));\n                if (response.result) {\n                    this.converterscache.set(key, response);\n                }\n                return response;\n            }\n            else {\n                return this.converterscache.get(key);\n            }\n        });\n    }\n    getCurrencyConversionPathsRec(src, dest, includeVia = true, ignoreCurrencies = [], via, root) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currChainDefinition = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(this.chain)));\n            const fractionalSource = (0, flags_1.checkFlag)(src.options, flags_1.IS_FRACTIONAL_FLAG) && (src.systemid === currChainDefinition.currencyid);\n            const paths = VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrencyConverters(dest == null ? [src.currencyid] : [src.currencyid, dest.currencyid]));\n            let convertables = {};\n            function addConvertable(key, convertable) {\n                if (convertables[key] == null) {\n                    convertables[key] = [convertable];\n                }\n                else {\n                    convertables[key].push(convertable);\n                }\n            }\n            function mergeConvertables(x, y) {\n                const merged = {};\n                for (const key in x) {\n                    if (y[key]) {\n                        merged[key] = x[key];\n                        for (const conv of y[key]) {\n                            const existingConvertable = x[key].find(x => {\n                                return x.destination === conv.destination && x.via === conv.via && x.exportto === conv.exportto;\n                            });\n                            if (existingConvertable == null)\n                                merged[key].push(conv);\n                        }\n                    }\n                    else {\n                        merged[key] = x[key];\n                    }\n                }\n                for (const key in y) {\n                    if (!merged[key]) {\n                        merged[key] = y[key];\n                    }\n                }\n                convertables = merged;\n            }\n            destination_iterator: for (const path of paths) {\n                const currencyName = Object.keys(path)[0];\n                const fullCurrencyDefinition = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(path[currencyName].currencyid)));\n                let pricingCurrencyState;\n                let price;\n                let viapriceinroot;\n                let destpriceinvia;\n                if (via) {\n                    if (via.bestcurrencystate) {\n                        pricingCurrencyState = via.bestcurrencystate;\n                    }\n                    else {\n                        pricingCurrencyState = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(via.currencyid))).bestcurrencystate;\n                    }\n                    // If the pricingCurrency doesn't contain the destination\n                    // in it's reserves, we can't use it for via\n                    if (pricingCurrencyState.currencies[fullCurrencyDefinition.currencyid] == null) {\n                        continue;\n                    }\n                    viapriceinroot = 1 / pricingCurrencyState.currencies[root.currencyid].lastconversionprice;\n                    destpriceinvia = pricingCurrencyState.currencies[fullCurrencyDefinition.currencyid].lastconversionprice;\n                    price =\n                        1 /\n                            (pricingCurrencyState.currencies[root.currencyid].lastconversionprice /\n                                pricingCurrencyState.currencies[fullCurrencyDefinition.currencyid]\n                                    .lastconversionprice);\n                }\n                else {\n                    if (fullCurrencyDefinition.bestcurrencystate) {\n                        pricingCurrencyState = fullCurrencyDefinition.bestcurrencystate;\n                    }\n                    else {\n                        pricingCurrencyState = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(fullCurrencyDefinition.currencyid))).bestcurrencystate;\n                    }\n                    price = 1 / pricingCurrencyState.currencies[src.currencyid].lastconversionprice;\n                }\n                const gateway = (0, flags_1.checkFlag)(fullCurrencyDefinition.options, flags_1.IS_GATEWAY_FLAG);\n                const gatewayConverter = ((0, flags_1.checkFlag)(fullCurrencyDefinition.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) ||\n                    (0, flags_1.checkFlag)(src.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) ||\n                    (via != null && (0, flags_1.checkFlag)(via.options, flags_1.IS_GATEWAY_CONVERTER_FLAG)));\n                const fractionalConverter = via ? via : fullCurrencyDefinition;\n                addConvertable(fullCurrencyDefinition.currencyid, {\n                    via,\n                    destination: fullCurrencyDefinition,\n                    exportto: (gateway || gatewayConverter) ?\n                        (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(gateway ?\n                            fullCurrencyDefinition.currencyid\n                            :\n                                fractionalConverter.parent === this.chain ? fractionalConverter.launchsystemid : fractionalConverter.parent)))\n                        :\n                            undefined,\n                    price,\n                    gateway,\n                    viapriceinroot,\n                    destpriceinvia\n                });\n                // If gateway converter, allow converting to same currency, on current system\n                if (gateway || gatewayConverter) {\n                    const convertableArr = convertables[fullCurrencyDefinition.currencyid];\n                    const existingOnChainConversion = convertableArr != null ?\n                        convertableArr.find(x => x.exportto == null)\n                        :\n                            null;\n                    if (existingOnChainConversion == null) {\n                        addConvertable(fullCurrencyDefinition.currencyid, {\n                            via,\n                            destination: fullCurrencyDefinition,\n                            price,\n                            gateway: false,\n                            viapriceinroot,\n                            destpriceinvia\n                        });\n                    }\n                }\n            }\n            if (fractionalSource && dest == null) {\n                let price;\n                let viapriceinroot;\n                let destpriceinvia;\n                for (const reserve of src.currencies) {\n                    let pricingCurrencyState;\n                    if (!ignoreCurrencies.includes(reserve)) {\n                        if (via) {\n                            if (via.bestcurrencystate) {\n                                pricingCurrencyState = via.bestcurrencystate;\n                            }\n                            else {\n                                pricingCurrencyState = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(via.currencyid))).bestcurrencystate;\n                            }\n                            viapriceinroot = 1 / pricingCurrencyState.currencies[root.currencyid].lastconversionprice;\n                            destpriceinvia = pricingCurrencyState.currencies[reserve].lastconversionprice;\n                            price =\n                                1 /\n                                    (pricingCurrencyState.currencies[root.currencyid]\n                                        .lastconversionprice /\n                                        pricingCurrencyState.currencies[reserve]\n                                            .lastconversionprice);\n                        }\n                        else {\n                            if (src.bestcurrencystate) {\n                                pricingCurrencyState = src.bestcurrencystate;\n                            }\n                            else {\n                                pricingCurrencyState = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(src.currencyid))).bestcurrencystate;\n                            }\n                            price =\n                                pricingCurrencyState.currencies[reserve]\n                                    .lastconversionprice;\n                        }\n                        const _destination = (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(reserve)));\n                        const gateway = (0, flags_1.checkFlag)(_destination.options, flags_1.IS_GATEWAY_FLAG);\n                        const gatewayConverter = ((0, flags_1.checkFlag)(_destination.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) ||\n                            (0, flags_1.checkFlag)(src.options, flags_1.IS_GATEWAY_CONVERTER_FLAG) ||\n                            (via != null && (0, flags_1.checkFlag)(via.options, flags_1.IS_GATEWAY_CONVERTER_FLAG)));\n                        const fractionalConverter = via ? via : src;\n                        addConvertable(reserve, {\n                            via,\n                            destination: _destination,\n                            exportto: (gateway || gatewayConverter) ?\n                                (VerusdRpcInterface.extractRpcResult(yield this.getCachedCurrency(gateway ?\n                                    _destination.currencyid\n                                    :\n                                        fractionalConverter.parent === this.chain ? fractionalConverter.launchsystemid : fractionalConverter.parent)))\n                                :\n                                    undefined,\n                            price,\n                            viapriceinroot,\n                            destpriceinvia,\n                            gateway\n                        });\n                        // If gateway converter, allow converting to same currency, on current system\n                        if (gateway || gatewayConverter) {\n                            const convertableArr = convertables[reserve];\n                            const existingOnChainConversion = convertableArr != null ?\n                                convertableArr.find(x => x.exportto == null)\n                                :\n                                    null;\n                            if (existingOnChainConversion == null) {\n                                addConvertable(reserve, {\n                                    via,\n                                    destination: _destination,\n                                    price,\n                                    gateway: false,\n                                    viapriceinroot,\n                                    destpriceinvia\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            if (includeVia) {\n                const chainInfo = (VerusdRpcInterface.extractRpcResult(yield this.getCachedInfo()));\n                for (const key in convertables) {\n                    for (const convertablePath of convertables[key]) {\n                        const started = ((convertablePath.destination.startblock <= chainInfo.longestchain)\n                            ||\n                                (convertablePath.destination.launchsystemid !== chainInfo.chainid));\n                        if ((0, flags_1.checkFlag)(convertablePath.destination.options, flags_1.IS_FRACTIONAL_FLAG) &&\n                            !ignoreCurrencies.includes(key) &&\n                            convertablePath.destination.currencies.includes(src.currencyid) &&\n                            started) {\n                            mergeConvertables(convertables, yield this._getCurrencyConversionPaths(convertablePath.destination, dest, false, ignoreCurrencies, convertablePath.destination, src));\n                        }\n                    }\n                }\n            }\n            // Rules:\n            // The systemid of the fractional currency determines if exportto must be present or not.\n            // If using via, the via is always the fractional currency.\n            // If not using via, check both source and dest for fractional flag.\n            for (const key in convertables) {\n                const convertableArr = convertables[key];\n                convertables[key] = convertableArr.filter(x => {\n                    const convertable = x;\n                    let fractionalConverter;\n                    if (convertable.via)\n                        fractionalConverter = convertable.via;\n                    else {\n                        const fractionalDest = (0, flags_1.checkFlag)(convertable.destination.options, flags_1.IS_FRACTIONAL_FLAG);\n                        if (fractionalSource && !fractionalDest)\n                            fractionalConverter = src;\n                        else if (!fractionalSource && fractionalDest)\n                            fractionalConverter = convertable.destination;\n                        else if (src.currencies && convertable.destination.currencies) {\n                            if (src.currencies.includes(convertable.destination.currencyid))\n                                fractionalConverter = src;\n                            else\n                                fractionalConverter = convertable.destination;\n                        }\n                        else\n                            return false;\n                    }\n                    if ((fractionalConverter.systemid !== this.chain) && (convertable.exportto == null || convertable.exportto.currencyid !== fractionalConverter.systemid))\n                        return false;\n                    else if (convertable.exportto != null) {\n                        // Make sure you only export to currencies that can see the chain you're on\n                        const seeByLaunch = convertable.exportto.launchsystemid === currChainDefinition.currencyid || currChainDefinition.launchsystemid === convertable.exportto.currencyid;\n                        const seeByParent = convertable.exportto.parent === currChainDefinition.currencyid || currChainDefinition.parent === convertable.exportto.currencyid;\n                        return seeByLaunch || seeByParent;\n                    }\n                    else\n                        return true;\n                });\n            }\n            return convertables;\n        });\n    }\n    _getCurrencyConversionPaths(src, dest, includeVia = true, ignoreCurrencies = [], via, root) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const paths = yield this.getCurrencyConversionPathsRec(src, dest, includeVia, ignoreCurrencies, via, root);\n            delete paths[src.currencyid];\n            return paths;\n        });\n    }\n    getCurrencyConversionPaths(src, dest, includeVia = true, ignoreCurrencies = [], via, root) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const _cache = this.currencycache;\n                function cacheDefinition(x) {\n                    _cache.set(x.currencyid, {\n                        id: 0,\n                        result: x,\n                        error: null\n                    });\n                }\n                cacheDefinition(src);\n                if (dest != null) {\n                    cacheDefinition(dest);\n                }\n                if (via != null) {\n                    cacheDefinition(via);\n                }\n                if (root != null) {\n                    cacheDefinition(root);\n                }\n                const allCurrencies = yield this.getAllCachedListCurrencies();\n                for (const currency of allCurrencies) {\n                    const definition = Object.assign(Object.assign({}, currency.currencydefinition), { bestcurrencystate: currency.bestcurrencystate });\n                    const getCurrencyResponse = {\n                        id: 0,\n                        result: definition,\n                        error: null\n                    };\n                    this.currencycache.set(definition.currencyid, getCurrencyResponse);\n                }\n                const result = yield this._getCurrencyConversionPaths(src, dest, includeVia, ignoreCurrencies, via, root);\n                this.currencycache.clear();\n                this.listcurrenciescache.clear();\n                this.converterscache.clear();\n                this.infocache = null;\n                return result;\n            }\n            catch (e) {\n                this.currencycache.clear();\n                this.listcurrenciescache.clear();\n                this.converterscache.clear();\n                this.infocache = null;\n                throw e;\n            }\n        });\n    }\n}\nexports.default = VerusdRpcInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}