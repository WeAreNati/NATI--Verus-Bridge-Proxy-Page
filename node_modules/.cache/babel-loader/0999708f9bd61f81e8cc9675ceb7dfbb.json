{"ast":null,"code":"var _jsxFileName = \"/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/src/components/ClaimForm/ClaimForm.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { address as baddress, crypto as bcrypto } from '@bitgo/utxo-lib';\nimport { LoadingButton } from '@mui/lab';\nimport { Alert, Typography, Button } from '@mui/material';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport Grid from '@mui/material/Grid';\nimport Switch from '@mui/material/Switch';\nimport Tooltip from '@mui/material/Tooltip';\nimport { Box } from '@mui/system';\nimport { useWeb3React } from '@web3-react/core';\nimport { utils } from 'ethers';\nimport { useForm } from 'react-hook-form';\nimport { Link } from \"react-router-dom\";\nimport web3 from 'web3';\nimport DELEGATOR_ABI from 'abis/DelegatorAbi.json';\nimport { DELEGATOR_ADD } from 'constants/contractAddress';\nimport useContract from 'hooks/useContract';\nimport { validateClaimAddress, isRAddress, isiAddress, uint64ToVerusFloat } from 'utils/rules';\nimport AddressAddressFieldField from './ClaimAddressField';\nimport bitGoUTXO from '../../utils/bitUTXO';\nimport TokenField from '../ConvertForm/TokenField';\nimport { useToast } from '../Toast/ToastProvider';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxGas = 800000;\nconst maxGasClaim = 80000;\nconst TYPE_FEE = 1;\nconst TYPE_REFUND = 2;\nconst TYPE_REFUND_CHECK = 3;\nconst TYPE_PUBLICKEY = 4;\n// const TYPE_NOTARY_FEE = 5;\n// const TYPE_DAI_BURN_BACK = 6;\n\nfunction usePreviousValue(value) {\n  _s();\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n_s(usePreviousValue, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\nexport default function ClaimForm() {\n  _s2();\n  const [isTxPending, setIsTxPending] = useState(false);\n  const [alert, setAlert] = useState(null);\n  const [feeToClaim, setFeeToClaim] = useState(null);\n  const {\n    addToast,\n    removeAllToasts\n  } = useToast();\n  const {\n    account\n  } = useWeb3React();\n  const previousValue = usePreviousValue(account);\n  const delegatorContract = useContract(DELEGATOR_ADD, DELEGATOR_ABI);\n  const [usePublicKey, setUsePublicKey] = useState(false);\n  const [claimRefund, setclaimRefund] = useState(false);\n  const {\n    handleSubmit,\n    control,\n    watch,\n    reset\n  } = useForm({\n    mode: 'all'\n  });\n  const address = watch('address');\n  const refundCurrency = watch('token');\n  const handleUsePublicKeyChange = event => {\n    reset({\n      address: \"\"\n    });\n    setUsePublicKey(event.target.checked);\n    setAlert(null);\n    if (claimRefund) {\n      setclaimRefund(false);\n    }\n  };\n  const handleRefundsEnable = event => {\n    setclaimRefund(event.target.checked);\n    setAlert(null);\n    if (!event.target.checked) {\n      reset({\n        address: \"\"\n      });\n    } else {\n      setUsePublicKey(false);\n    }\n  };\n  const formatHexAddress = (address, type) => {\n    try {\n      const verusAddress = bitGoUTXO.address.fromBase58Check(address);\n      let retval;\n      switch (verusAddress.version) {\n        case 60:\n          // case R address\n          retval = `0214${verusAddress.hash.toString('hex')}`;\n          break;\n        case 102:\n          // case i address\n          retval = `0414${verusAddress.hash.toString('hex')}`;\n          break;\n        default:\n          return null;\n      }\n      if (type === TYPE_REFUND_CHECK) {\n        retval = Buffer.from(`${web3.utils.padLeft(retval, 64)}`, 'hex');\n        retval[1] = 16;\n        return `0x${retval.toString('hex')}`;\n      }\n      if (type === TYPE_FEE || type === TYPE_PUBLICKEY) {\n        retval = Buffer.from(`${web3.utils.padLeft(retval, 64)}`, 'hex');\n        return `0x${retval.toString('hex')}`;\n      }\n      return `0x${retval}`;\n    } catch (error) {\n      throw new Error(\"Invalid Address\");\n    }\n  };\n  const checkForAssets = async (address, type, currency) => {\n    const formattedAddress = formatHexAddress(address, type);\n    let feeSats;\n    let fees;\n    if (type === TYPE_FEE) {\n      feeSats = await delegatorContract.callStatic.claimableFees(formattedAddress);\n      fees = uint64ToVerusFloat(feeSats);\n      if (fees === \"0.00000000\" || parseFloat(fees) < 0.006) {\n        setAlert({\n          state: \"warning\",\n          message: `${fees} ETH available to claim, minimum amount claimable is 0.006 ETH to cover import cost.`\n        });\n        setFeeToClaim(null);\n        return fees;\n      }\n      setAlert({\n        state: \"info\",\n        message: `${fees} ETH available to claim`\n      });\n    } else if (type === TYPE_REFUND_CHECK) {\n      feeSats = await delegatorContract.callStatic.refunds(formattedAddress, currency);\n      fees = uint64ToVerusFloat(feeSats);\n      setAlert({\n        state: fees === \"0.00000000\" ? \"warning\" : \"info\",\n        message: `${fees} Available to refund`\n      });\n    } else if (type === TYPE_PUBLICKEY) {\n      feeSats = await delegatorContract.callStatic.claimableFees(formattedAddress);\n      fees = uint64ToVerusFloat(feeSats);\n    }\n    setFeeToClaim(fees);\n    return fees;\n  };\n  useEffect(() => {\n    if (address && (isRAddress(address) || isiAddress(address))) {\n      if (!claimRefund) {\n        if (previousValue ? previousValue !== address || feeToClaim === null || feeToClaim === \"0.00000000\" : true) {\n          checkForAssets(address, TYPE_FEE);\n        }\n      } else if (refundCurrency && refundCurrency.value) {\n        checkForAssets(address, TYPE_REFUND_CHECK, refundCurrency.value);\n      } else {\n        removeAllToasts();\n        setFeeToClaim(null);\n        setAlert(null);\n      }\n    } else if (address && validateClaimAddress(address) !== true && feeToClaim !== null) {\n      removeAllToasts();\n      setFeeToClaim(null);\n      setAlert(null);\n    }\n  }, [address, claimRefund, refundCurrency]);\n  const onSubmit = async values => {\n    const {\n      address\n    } = values;\n    setAlert(null);\n    setIsTxPending(true);\n    try {\n      if (usePublicKey) {\n        try {\n          const from = account;\n          // For historical reasons, you must submit the message to sign in hex-encoded UTF-8.\n          // This uses a Node.js-style buffer shim in the browser.\n          const msg = `0x${Buffer.from(\"Agreeing to this will create a public key address for Verus Refunds.\", 'utf8').toString('hex')}`;\n          const sign = await window.ethereum.request({\n            method: 'personal_sign',\n            params: [msg, from]\n          });\n          const messageHash = utils.hashMessage(\"Agreeing to this will create a public key address for Verus Refunds.\");\n          const messageHashBytes = utils.arrayify(messageHash);\n\n          // Now you have the digest,\n          const publicKey = utils.recoverPublicKey(messageHashBytes, sign);\n          const compressed = utils.computePublicKey(publicKey, true);\n          const check = bcrypto.hash160(Buffer.from(compressed.slice(2), 'hex'));\n          const rAddress = baddress.toBase58Check(check, 60);\n          const checkfees = await checkForAssets(rAddress, TYPE_PUBLICKEY);\n          if (checkfees === \"0.00000000\") {\n            setAlert({\n              state: \"warning\",\n              message: `${`${rAddress}\\n`} has ${checkfees} fees to claim. Please try again with a different Ethereum account.`\n            });\n            setIsTxPending(false);\n            return;\n          }\n          setAlert({\n            state: \"info\",\n            message: `${`${rAddress}\\n`} has ${checkfees} ETH to claim.`\n          });\n          const {\n            x,\n            y\n          } = {\n            x: publicKey.slice(4, 68),\n            y: publicKey.slice(68, 132)\n          };\n          const txResult = await delegatorContract.sendfees(`0x${x}`, `0x${y}`, {\n            from: account,\n            gasLimit: maxGasClaim\n          });\n          await txResult.wait();\n          setAlert(null);\n          setIsTxPending(false);\n          addToast({\n            type: \"success\",\n            description: 'Claim to ETH Transaction Success!'\n          });\n          setFeeToClaim(null);\n        } catch (err) {\n          setAlert(`\n                         Error with public key: ${err.message} `);\n          throw err;\n        }\n      } else if (claimRefund) {\n        const hexResult = formatHexAddress(address, TYPE_REFUND);\n        // const txEstimation = await delegatorContract.estimateGas.claimRefund(hexResult, refundCurrency.value);\n        const testClaim = await delegatorContract.callStatic.claimRefund(hexResult, refundCurrency.value);\n        if (testClaim === \"0x\") {\n          setAlert({\n            state: \"warning\",\n            message: `No ${refundCurrency.value} available to refund`\n          });\n          setIsTxPending(false);\n          return;\n        }\n        const txResult = await delegatorContract.claimRefund(hexResult, refundCurrency.value, {\n          from: account,\n          gasLimit: maxGas\n        });\n        await txResult.wait();\n        setAlert(null);\n        setIsTxPending(false);\n        addToast({\n          type: \"success\",\n          description: 'Refund Transaction Success!'\n        });\n        setFeeToClaim(null);\n      } else {\n        const hexResult = formatHexAddress(address, TYPE_FEE);\n        // const txEstimation = await delegatorContract.estimateGas.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`);\n        if (address.slice(0, 1) === \"R\") {\n          setAlert({\n            state: \"warning\",\n            message: `Please import the private key for ${address} into metamask, and use the 'Public Key' claim option to be paid directly to that ETH address.`\n          });\n          setIsTxPending(false);\n          return;\n        }\n        await delegatorContract.callStatic.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`);\n        const txResult = await delegatorContract.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`, {\n          from: account,\n          gasLimit: maxGas\n        });\n        await txResult.wait();\n        setAlert(null);\n        setIsTxPending(false);\n        addToast({\n          type: \"success\",\n          description: 'Fee reimburse Transaction Success!'\n        });\n        setFeeToClaim(null);\n      }\n    } catch (error) {\n      if (error.message) {\n        addToast({\n          type: \"error\",\n          description: error.message\n        });\n      } else {\n        addToast({\n          type: \"error\",\n          description: 'Transaction Failed!'\n        });\n      }\n      setAlert(null);\n      setIsTxPending(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [alert && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: alert.state,\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: alert.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this), !account && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"info\",\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Wallet not connected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(AddressAddressFieldField, {\n            control: control,\n            usePublicKey: usePublicKey,\n            disabled: usePublicKey\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: \"30px\",\n          textAlign: \"center\",\n          width: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n            loading: isTxPending,\n            disabled: (feeToClaim === null || feeToClaim === \"0.00000000\") && !usePublicKey,\n            type: \"submit\",\n            color: \"primary\",\n            variant: \"contained\",\n            children: \"Claim\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            sx: {\n              flexWrap: 'nowrap'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: usePublicKey,\n                onChange: handleUsePublicKeyChange,\n                name: \"usePublicKey\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 37\n              }, this),\n              sx: {\n                fontSize: '20px'\n              } // add this line to set the font size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              title: \"The private Key for your refundaddress should be imported into metamask in order for you to receive refunds\",\n              arrow: true,\n              placement: \"bottom\",\n              PopperProps: {\n                style: {\n                  marginTop: -12\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  fontSize: 12,\n                  flexWrap: 'nowrap'\n                },\n                children: \"Use your Public Key to claim\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: claimRefund,\n                onChange: handleRefundsEnable,\n                name: \"claimRefund\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 37\n              }, this),\n              sx: {\n                fontSize: '20px'\n              } // add this line to set the font size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: 12\n              },\n              children: \"Fees / Refund (Claim Type)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: claimRefund && /*#__PURE__*/_jsxDEV(TokenField, {\n            control: control,\n            poolAvailable: false,\n            token: \"Refund Currency\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          alignItems: 'center',\n          paddingTop: 42\n        },\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            children: \"BACK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s2(ClaimForm, \"yNqGEWbbw7hwBOU9ncuPNft+c20=\", false, function () {\n  return [useToast, useWeb3React, usePreviousValue, useContract, useForm];\n});\n_c = ClaimForm;\nvar _c;\n$RefreshReg$(_c, \"ClaimForm\");","map":{"version":3,"names":["React","useEffect","useState","useRef","address","baddress","crypto","bcrypto","LoadingButton","Alert","Typography","Button","FormControlLabel","FormGroup","Grid","Switch","Tooltip","Box","useWeb3React","utils","useForm","Link","web3","DELEGATOR_ABI","DELEGATOR_ADD","useContract","validateClaimAddress","isRAddress","isiAddress","uint64ToVerusFloat","AddressAddressFieldField","bitGoUTXO","TokenField","useToast","jsxDEV","_jsxDEV","Fragment","_Fragment","maxGas","maxGasClaim","TYPE_FEE","TYPE_REFUND","TYPE_REFUND_CHECK","TYPE_PUBLICKEY","usePreviousValue","value","_s","ref","current","ClaimForm","_s2","isTxPending","setIsTxPending","alert","setAlert","feeToClaim","setFeeToClaim","addToast","removeAllToasts","account","previousValue","delegatorContract","usePublicKey","setUsePublicKey","claimRefund","setclaimRefund","handleSubmit","control","watch","reset","mode","refundCurrency","handleUsePublicKeyChange","event","target","checked","handleRefundsEnable","formatHexAddress","type","verusAddress","fromBase58Check","retval","version","hash","toString","Buffer","from","padLeft","error","Error","checkForAssets","currency","formattedAddress","feeSats","fees","callStatic","claimableFees","parseFloat","state","message","refunds","onSubmit","values","msg","sign","window","ethereum","request","method","params","messageHash","hashMessage","messageHashBytes","arrayify","publicKey","recoverPublicKey","compressed","computePublicKey","check","hash160","slice","rAddress","toBase58Check","checkfees","x","y","txResult","sendfees","gasLimit","wait","description","err","hexResult","testClaim","alloc","children","severity","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","disabled","mt","textAlign","width","loading","color","variant","flexWrap","onChange","name","fontSize","title","arrow","placement","PopperProps","style","marginTop","poolAvailable","token","alignItems","paddingTop","to","_c","$RefreshReg$"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/src/components/ClaimForm/ClaimForm.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nimport { address as baddress, crypto as bcrypto } from '@bitgo/utxo-lib';\nimport { LoadingButton } from '@mui/lab';\nimport { Alert, Typography, Button } from '@mui/material';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport Grid from '@mui/material/Grid';\nimport Switch from '@mui/material/Switch';\nimport Tooltip from '@mui/material/Tooltip';\nimport { Box } from '@mui/system';\nimport { useWeb3React } from '@web3-react/core';\nimport { utils } from 'ethers'\nimport { useForm } from 'react-hook-form';\nimport { Link } from \"react-router-dom\";\nimport web3 from 'web3';\n\nimport DELEGATOR_ABI from 'abis/DelegatorAbi.json';\nimport {\n    DELEGATOR_ADD\n} from 'constants/contractAddress';\nimport useContract from 'hooks/useContract';\nimport { validateClaimAddress, isRAddress, isiAddress, uint64ToVerusFloat } from 'utils/rules';\n\nimport AddressAddressFieldField from './ClaimAddressField';\nimport bitGoUTXO from '../../utils/bitUTXO';\nimport TokenField from '../ConvertForm/TokenField';\nimport { useToast } from '../Toast/ToastProvider';\n\nconst maxGas = 800000;\nconst maxGasClaim = 80000;\nconst TYPE_FEE = 1;\nconst TYPE_REFUND = 2;\nconst TYPE_REFUND_CHECK = 3;\nconst TYPE_PUBLICKEY = 4;\n// const TYPE_NOTARY_FEE = 5;\n// const TYPE_DAI_BURN_BACK = 6;\n\nfunction usePreviousValue(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nexport default function ClaimForm() {\n    const [isTxPending, setIsTxPending] = useState(false);\n    const [alert, setAlert] = useState(null);\n    const [feeToClaim, setFeeToClaim] = useState(null);\n    const { addToast, removeAllToasts } = useToast();\n    const { account } = useWeb3React();\n    const previousValue = usePreviousValue(account);\n    const delegatorContract = useContract(DELEGATOR_ADD, DELEGATOR_ABI);\n    const [usePublicKey, setUsePublicKey] = useState(false);\n    const [claimRefund, setclaimRefund] = useState(false);\n    const { handleSubmit, control, watch, reset } = useForm({\n        mode: 'all'\n    });\n    const address = watch('address');\n    const refundCurrency = watch('token');\n\n    const handleUsePublicKeyChange = (event) => {\n        reset({ address: \"\" });\n        setUsePublicKey(event.target.checked);\n        setAlert(null);\n        if (claimRefund) {\n            setclaimRefund(false);\n        }\n    };\n\n    const handleRefundsEnable = (event) => {\n\n        setclaimRefund(event.target.checked);\n        setAlert(null);\n        if (!event.target.checked) {\n            reset({ address: \"\" });\n        } else {\n            setUsePublicKey(false);\n        }\n    };\n\n\n    const formatHexAddress = (address, type) => {\n        try {\n            const verusAddress = bitGoUTXO.address.fromBase58Check(address);\n            let retval;\n            switch (verusAddress.version) {\n                case 60: // case R address\n                    retval = `0214${verusAddress.hash.toString('hex')}`;\n                    break;\n                case 102: // case i address\n                    retval = `0414${verusAddress.hash.toString('hex')}`;\n                    break;\n                default:\n                    return null;\n            }\n            if (type === TYPE_REFUND_CHECK) {\n                retval = Buffer.from(`${web3.utils.padLeft(retval, 64)}`, 'hex');\n                retval[1] = 16;\n                return `0x${retval.toString('hex')}`;\n            }\n\n            if (type === TYPE_FEE || type === TYPE_PUBLICKEY) {\n                retval = Buffer.from(`${web3.utils.padLeft(retval, 64)}`, 'hex');\n                return `0x${retval.toString('hex')}`;\n            }\n\n            return `0x${retval}`;\n\n\n\n        } catch (error) {\n            throw new Error(\"Invalid Address\");\n        }\n    }\n\n    const checkForAssets = async (address, type, currency) => {\n\n        const formattedAddress = formatHexAddress(address, type);\n        let feeSats;\n        let fees;\n        if (type === TYPE_FEE) {\n            feeSats = await delegatorContract.callStatic.claimableFees(formattedAddress);\n            fees = uint64ToVerusFloat(feeSats);\n            if (fees === \"0.00000000\" || (parseFloat(fees) < 0.006)) {\n                setAlert({ state: \"warning\", message: `${fees} ETH available to claim, minimum amount claimable is 0.006 ETH to cover import cost.` });\n                setFeeToClaim(null);\n                return fees;\n            }\n            setAlert({ state: \"info\", message: `${fees} ETH available to claim` });\n\n\n        } else if (type === TYPE_REFUND_CHECK) {\n            feeSats = await delegatorContract.callStatic.refunds(formattedAddress, currency);\n            fees = uint64ToVerusFloat(feeSats);\n            setAlert({ state: fees === \"0.00000000\" ? \"warning\" : \"info\", message: `${fees} Available to refund` });\n        } else if (type === TYPE_PUBLICKEY) {\n            feeSats = await delegatorContract.callStatic.claimableFees(formattedAddress);\n            fees = uint64ToVerusFloat(feeSats);\n        }\n        setFeeToClaim(fees);\n        return fees;\n    }\n\n    useEffect(() => {\n        if (address && (isRAddress(address) || isiAddress(address))) {\n            if (!claimRefund) {\n                if (previousValue ? (previousValue !== address || feeToClaim === null || feeToClaim === \"0.00000000\") : true) {\n                    checkForAssets(address, TYPE_FEE);\n                }\n            } else if (refundCurrency && refundCurrency.value) {\n                checkForAssets(address, TYPE_REFUND_CHECK, refundCurrency.value);\n\n            } else {\n                removeAllToasts();\n                setFeeToClaim(null)\n                setAlert(null);\n            }\n        } else if (address && validateClaimAddress(address) !== true && feeToClaim !== null) {\n            removeAllToasts();\n            setFeeToClaim(null)\n            setAlert(null);\n        }\n    }, [address, claimRefund, refundCurrency])\n\n    const onSubmit = async (values) => {\n        const { address } = values;\n        setAlert(null);\n        setIsTxPending(true);\n\n        try {\n            if (usePublicKey) {\n                try {\n                    const from = account;\n                    // For historical reasons, you must submit the message to sign in hex-encoded UTF-8.\n                    // This uses a Node.js-style buffer shim in the browser.\n                    const msg = `0x${Buffer.from(\"Agreeing to this will create a public key address for Verus Refunds.\", 'utf8').toString('hex')}`;\n                    const sign = await window.ethereum.request({\n                        method: 'personal_sign',\n                        params: [msg, from]\n                    });\n\n                    const messageHash = utils.hashMessage(\"Agreeing to this will create a public key address for Verus Refunds.\");\n                    const messageHashBytes = utils.arrayify(messageHash);\n\n                    // Now you have the digest,\n                    const publicKey = utils.recoverPublicKey(messageHashBytes, sign);\n                    const compressed = utils.computePublicKey(publicKey, true);\n\n                    const check = bcrypto.hash160(Buffer.from(compressed.slice(2), 'hex'));\n                    const rAddress = baddress.toBase58Check(check, 60)\n\n                    const checkfees = await checkForAssets(rAddress, TYPE_PUBLICKEY);\n                    if (checkfees === \"0.00000000\") {\n                        setAlert({ state: \"warning\", message: `${`${rAddress}\\n`} has ${checkfees} fees to claim. Please try again with a different Ethereum account.` });\n                        setIsTxPending(false);\n                        return;\n                    }\n                    setAlert({ state: \"info\", message: `${`${rAddress}\\n`} has ${checkfees} ETH to claim.` });\n\n                    const { x, y } = { x: publicKey.slice(4, 68), y: publicKey.slice(68, 132) };\n\n                    const txResult = await delegatorContract.sendfees(`0x${x}`, `0x${y}`, { from: account, gasLimit: maxGasClaim });\n                    await txResult.wait();\n                    setAlert(null);\n                    setIsTxPending(false);\n                    addToast({ type: \"success\", description: 'Claim to ETH Transaction Success!' });\n                    setFeeToClaim(null)\n                } catch (err) {\n                    setAlert(`\n                         Error with public key: ${err.message} `\n                    );\n                    throw err\n                }\n            } else if (claimRefund) {\n                const hexResult = formatHexAddress(address, TYPE_REFUND);\n                // const txEstimation = await delegatorContract.estimateGas.claimRefund(hexResult, refundCurrency.value);\n                const testClaim = await delegatorContract.callStatic.claimRefund(hexResult, refundCurrency.value);\n                if (testClaim === \"0x\") {\n                    setAlert({ state: \"warning\", message: `No ${refundCurrency.value} available to refund` });\n                    setIsTxPending(false);\n                    return;\n                }\n                const txResult = await delegatorContract.claimRefund(hexResult, refundCurrency.value, { from: account, gasLimit: maxGas });\n                await txResult.wait();\n                setAlert(null);\n                setIsTxPending(false);\n                addToast({ type: \"success\", description: 'Refund Transaction Success!' });\n                setFeeToClaim(null)\n            }\n            else {\n                const hexResult = formatHexAddress(address, TYPE_FEE);\n                // const txEstimation = await delegatorContract.estimateGas.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`);\n                if (address.slice(0, 1) === \"R\") {\n                    setAlert({ state: \"warning\", message: `Please import the private key for ${address} into metamask, and use the 'Public Key' claim option to be paid directly to that ETH address.` });\n                    setIsTxPending(false);\n                    return;\n                }\n                await delegatorContract.callStatic.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`);\n                const txResult = await delegatorContract.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`, { from: account, gasLimit: maxGas });\n                await txResult.wait();\n                setAlert(null);\n                setIsTxPending(false);\n                addToast({ type: \"success\", description: 'Fee reimburse Transaction Success!' });\n                setFeeToClaim(null)\n            }\n        } catch (error) {\n            if (error.message) {\n                addToast({ type: \"error\", description: error.message })\n            } else {\n                addToast({ type: \"error\", description: 'Transaction Failed!' })\n            }\n            setAlert(null);\n            setIsTxPending(false);\n        }\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                {alert &&\n                    <Alert severity={alert.state} sx={{ mb: 3 }}>\n                        <Typography>\n                            {alert.message}\n                        </Typography>\n                    </Alert>\n                }\n                {!account && (<Alert severity=\"info\" sx={{ mb: 3 }}>\n                    <Typography>\n                        <b>Wallet not connected</b>\n                    </Typography>\n                </Alert>)\n                }\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <AddressAddressFieldField\n                            control={control}\n                            usePublicKey={usePublicKey}\n                            disabled={usePublicKey}\n                        />\n                    </Grid>\n                    <Box mt=\"30px\" textAlign=\"center\" width=\"100%\">\n                        <LoadingButton loading={isTxPending} disabled={(feeToClaim === null || feeToClaim === \"0.00000000\") && !usePublicKey} type=\"submit\" color=\"primary\" variant=\"contained\">Claim</LoadingButton>\n                    </Box>\n                    <Grid item xs={12}>\n                        <FormGroup sx={{ flexWrap: 'nowrap' }}>\n\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={usePublicKey}\n                                        onChange={handleUsePublicKeyChange}\n                                        name=\"usePublicKey\"\n                                    />\n                                }\n                                sx={{ fontSize: '20px' }} // add this line to set the font size\n                            />\n                            <Tooltip title=\"The private Key for your refundaddress should be imported into metamask in order for you to receive refunds\"\n                                arrow\n                                placement=\"bottom\"\n                                PopperProps={{ style: { marginTop: -12 } }}>\n                                <Typography sx={{ fontSize: 12, flexWrap: 'nowrap' }}>\n                                    Use your Public Key to claim\n                                </Typography>\n                            </Tooltip>\n\n                        </FormGroup>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={claimRefund}\n                                        onChange={handleRefundsEnable}\n                                        name=\"claimRefund\"\n                                    />\n                                }\n                                sx={{ fontSize: '20px' }} // add this line to set the font size\n                            />\n                            <Typography sx={{ fontSize: 12 }}>\n                                Fees / Refund (Claim Type)\n                            </Typography>\n                        </FormGroup>\n                    </Grid>\n                    <Grid item xs={12}>\n                        {claimRefund && (<TokenField\n                            control={control}\n                            poolAvailable={false}\n                            token=\"Refund Currency\"\n                        />)}\n                    </Grid>\n\n                </Grid>\n                <div style={{ alignItems: 'center', paddingTop: 42 }}>\n                    <Link to=\"/\">\n                        <Button variant=\"outlined\">\n                            BACK\n                        </Button>\n                    </Link>\n                </div>\n            </form>\n\n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}