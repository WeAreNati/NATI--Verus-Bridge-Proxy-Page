{"ast":null,"code":"var baddress = require('./address');\nvar bcrypto = require('./crypto');\nvar ecdsa = require('./ecdsa');\nvar randomBytes = require('randombytes');\nvar typeforce = require('typeforce');\nvar types = require('./types');\nvar wif = require('wif');\nvar NETWORKS = require('./networks');\nvar BigInteger = require('bigi');\nvar EC = require('elliptic').ec;\nvar BN = require('bn.js');\nvar sig = require('./ecsignature');\nvar ecurve = require('ecurve');\nvar curve = ecurve.getCurveByName('secp256k1');\nvar secp256k1 = ecdsa.__curve;\nvar fastcurve = require('./fastcurve');\nfunction ECPair(d, Q, options) {\n  if (options) {\n    typeforce({\n      compressed: types.maybe(types.Boolean),\n      network: types.maybe(types.Network)\n    }, options);\n  }\n  options = options || {};\n  if (d) {\n    if (d.signum() <= 0) throw new Error('Private key must be greater than 0');\n    if (d.compareTo(secp256k1.n) >= 0) throw new Error('Private key must be less than the curve order');\n    if (Q) throw new TypeError('Unexpected publicKey parameter');\n    this.d = d;\n  } else {\n    typeforce(types.ECPoint, Q);\n    this.__Q = Q;\n  }\n  this.compressed = options.compressed === undefined ? true : options.compressed;\n  this.network = options.network || NETWORKS.bitcoin;\n}\nObject.defineProperty(ECPair.prototype, 'Q', {\n  get: function () {\n    if (!this.__Q && this.d) {\n      var qBuf = fastcurve.publicKeyCreate(this.d.toBuffer(32), false);\n      this.__Q = qBuf ? ecurve.Point.decodeFrom(curve, qBuf) : secp256k1.G.multiply(this.d);\n    }\n    return this.__Q;\n  }\n});\nECPair.recoverFromSignature = function (hashBuffer, compactSigBuffer, network) {\n  var compactParsed = sig.parseCompact(compactSigBuffer);\n  var ecSecp256k1 = new EC('secp256k1');\n  var pub = ecSecp256k1.recoverPubKey(new BN(hashBuffer, 16).toString(10), {\n    r: compactParsed.signature.r.toBuffer(),\n    s: compactParsed.signature.s.toBuffer(),\n    recoveryParam: compactParsed.i\n  }, compactParsed.i);\n  return ECPair.fromPublicKeyBuffer(Buffer.from(pub.encodeCompressed()), network);\n};\nECPair.fromPublicKeyBuffer = function (buffer, network) {\n  var Q = ecurve.Point.decodeFrom(secp256k1, buffer);\n  return new ECPair(null, Q, {\n    compressed: Q.compressed,\n    network: network\n  });\n};\nECPair.fromWIF = function (string, network, skipVersionCheck) {\n  if (skipVersionCheck === void 0) {\n    skipVersionCheck = false;\n  }\n  var decoded = wif.decode(string);\n  var version = decoded.version;\n  // list of networks?\n  if (types.Array(network)) {\n    network = network.filter(function (x) {\n      return version === x.wif;\n    }).pop();\n    if (!network) throw new Error('Unknown network version');\n    // otherwise, assume a network object (or default to bitcoin)\n  } else {\n    network = network || NETWORKS.bitcoin;\n    if (!skipVersionCheck && version !== network.wif) throw new Error('Invalid network version');\n  }\n  var d = BigInteger.fromBuffer(decoded.privateKey);\n  return new ECPair(d, null, {\n    compressed: decoded.compressed,\n    network: network\n  });\n};\nECPair.makeRandom = function (options) {\n  options = options || {};\n  var rng = options.rng || randomBytes;\n  var d;\n  do {\n    var buffer = rng(32);\n    typeforce(types.Buffer256bit, buffer);\n    d = BigInteger.fromBuffer(buffer);\n  } while (d.signum() <= 0 || d.compareTo(secp256k1.n) >= 0);\n  return new ECPair(d, null, options);\n};\nECPair.prototype.getAddress = function () {\n  return baddress.toBase58Check(bcrypto.hash160(this.getPublicKeyBuffer()), this.getNetwork().pubKeyHash);\n};\nECPair.prototype.getNetwork = function () {\n  return this.network;\n};\nECPair.prototype.getPublicKeyBuffer = function () {\n  return this.Q.getEncoded(this.compressed);\n};\nECPair.prototype.sign = function (hash) {\n  if (!this.d) throw new Error('Missing private key');\n  var sig = fastcurve.sign(hash, this.d);\n  if (sig !== undefined) return sig;\n  return ecdsa.sign(hash, this.d);\n};\nECPair.prototype.toWIF = function () {\n  if (!this.d) throw new Error('Missing private key');\n  return wif.encode(this.network.wif, this.d.toBuffer(32), this.compressed);\n};\nECPair.prototype.verify = function (hash, signature) {\n  var fastsig = fastcurve.verify(hash, signature, this.getPublicKeyBuffer());\n  if (fastsig !== undefined) return fastsig;\n  return ecdsa.verify(hash, signature, this.Q);\n};\n/**\n * @deprecated\n * Use {@see keyutil.privateKeyBufferToECPair} instead\n * Will be removed in next major version (BLOCK-267)\n */\nECPair.fromPrivateKeyBuffer = function (buffer, network) {\n  // toplevel import unavailable due to circular dependency\n  var keyutil = require('./bitgo/keyutil');\n  return keyutil.privateKeyBufferToECPair(buffer, network);\n};\n/**\n * @deprecated\n * Use {@see keyutil.privateKeyBufferFromECPair} instead\n * Will be removed in next major version (BLOCK-267)\n */\nECPair.prototype.getPrivateKeyBuffer = function () {\n  // toplevel import unavailable due to circular dependency\n  var keyutil = require('./bitgo/keyutil');\n  return keyutil.privateKeyBufferFromECPair(this);\n};\nmodule.exports = ECPair;","map":{"version":3,"names":["baddress","require","bcrypto","ecdsa","randomBytes","typeforce","types","wif","NETWORKS","BigInteger","EC","ec","BN","sig","ecurve","curve","getCurveByName","secp256k1","__curve","fastcurve","ECPair","d","Q","options","compressed","maybe","Boolean","network","Network","signum","Error","compareTo","n","TypeError","ECPoint","__Q","undefined","bitcoin","Object","defineProperty","prototype","get","qBuf","publicKeyCreate","toBuffer","Point","decodeFrom","G","multiply","recoverFromSignature","hashBuffer","compactSigBuffer","compactParsed","parseCompact","ecSecp256k1","pub","recoverPubKey","toString","r","signature","s","recoveryParam","i","fromPublicKeyBuffer","Buffer","from","encodeCompressed","buffer","fromWIF","string","skipVersionCheck","decoded","decode","version","Array","filter","x","pop","fromBuffer","privateKey","makeRandom","rng","Buffer256bit","getAddress","toBase58Check","hash160","getPublicKeyBuffer","getNetwork","pubKeyHash","getEncoded","sign","hash","toWIF","encode","verify","fastsig","fromPrivateKeyBuffer","keyutil","privateKeyBufferToECPair","getPrivateKeyBuffer","privateKeyBufferFromECPair","module","exports"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/node_modules/@bitgo/utxo-lib/dist/src/ecpair.js"],"sourcesContent":["var baddress = require('./address');\nvar bcrypto = require('./crypto');\nvar ecdsa = require('./ecdsa');\nvar randomBytes = require('randombytes');\nvar typeforce = require('typeforce');\nvar types = require('./types');\nvar wif = require('wif');\nvar NETWORKS = require('./networks');\nvar BigInteger = require('bigi');\nvar EC = require('elliptic').ec;\nvar BN = require('bn.js');\nvar sig = require('./ecsignature');\nvar ecurve = require('ecurve');\nvar curve = ecurve.getCurveByName('secp256k1');\nvar secp256k1 = ecdsa.__curve;\nvar fastcurve = require('./fastcurve');\nfunction ECPair(d, Q, options) {\n    if (options) {\n        typeforce({\n            compressed: types.maybe(types.Boolean),\n            network: types.maybe(types.Network)\n        }, options);\n    }\n    options = options || {};\n    if (d) {\n        if (d.signum() <= 0)\n            throw new Error('Private key must be greater than 0');\n        if (d.compareTo(secp256k1.n) >= 0)\n            throw new Error('Private key must be less than the curve order');\n        if (Q)\n            throw new TypeError('Unexpected publicKey parameter');\n        this.d = d;\n    }\n    else {\n        typeforce(types.ECPoint, Q);\n        this.__Q = Q;\n    }\n    this.compressed = options.compressed === undefined ? true : options.compressed;\n    this.network = options.network || NETWORKS.bitcoin;\n}\nObject.defineProperty(ECPair.prototype, 'Q', {\n    get: function () {\n        if (!this.__Q && this.d) {\n            var qBuf = fastcurve.publicKeyCreate(this.d.toBuffer(32), false);\n            this.__Q = qBuf ? ecurve.Point.decodeFrom(curve, qBuf) : secp256k1.G.multiply(this.d);\n        }\n        return this.__Q;\n    }\n});\nECPair.recoverFromSignature = function (hashBuffer, compactSigBuffer, network) {\n    var compactParsed = sig.parseCompact(compactSigBuffer);\n    var ecSecp256k1 = new EC('secp256k1');\n    var pub = ecSecp256k1.recoverPubKey(new BN(hashBuffer, 16).toString(10), {\n        r: compactParsed.signature.r.toBuffer(),\n        s: compactParsed.signature.s.toBuffer(),\n        recoveryParam: compactParsed.i\n    }, compactParsed.i);\n    return ECPair.fromPublicKeyBuffer(Buffer.from(pub.encodeCompressed()), network);\n};\nECPair.fromPublicKeyBuffer = function (buffer, network) {\n    var Q = ecurve.Point.decodeFrom(secp256k1, buffer);\n    return new ECPair(null, Q, {\n        compressed: Q.compressed,\n        network: network\n    });\n};\nECPair.fromWIF = function (string, network, skipVersionCheck) {\n    if (skipVersionCheck === void 0) { skipVersionCheck = false; }\n    var decoded = wif.decode(string);\n    var version = decoded.version;\n    // list of networks?\n    if (types.Array(network)) {\n        network = network.filter(function (x) {\n            return version === x.wif;\n        }).pop();\n        if (!network)\n            throw new Error('Unknown network version');\n        // otherwise, assume a network object (or default to bitcoin)\n    }\n    else {\n        network = network || NETWORKS.bitcoin;\n        if (!skipVersionCheck && version !== network.wif)\n            throw new Error('Invalid network version');\n    }\n    var d = BigInteger.fromBuffer(decoded.privateKey);\n    return new ECPair(d, null, {\n        compressed: decoded.compressed,\n        network: network\n    });\n};\nECPair.makeRandom = function (options) {\n    options = options || {};\n    var rng = options.rng || randomBytes;\n    var d;\n    do {\n        var buffer = rng(32);\n        typeforce(types.Buffer256bit, buffer);\n        d = BigInteger.fromBuffer(buffer);\n    } while (d.signum() <= 0 || d.compareTo(secp256k1.n) >= 0);\n    return new ECPair(d, null, options);\n};\nECPair.prototype.getAddress = function () {\n    return baddress.toBase58Check(bcrypto.hash160(this.getPublicKeyBuffer()), this.getNetwork().pubKeyHash);\n};\nECPair.prototype.getNetwork = function () {\n    return this.network;\n};\nECPair.prototype.getPublicKeyBuffer = function () {\n    return this.Q.getEncoded(this.compressed);\n};\nECPair.prototype.sign = function (hash) {\n    if (!this.d)\n        throw new Error('Missing private key');\n    var sig = fastcurve.sign(hash, this.d);\n    if (sig !== undefined)\n        return sig;\n    return ecdsa.sign(hash, this.d);\n};\nECPair.prototype.toWIF = function () {\n    if (!this.d)\n        throw new Error('Missing private key');\n    return wif.encode(this.network.wif, this.d.toBuffer(32), this.compressed);\n};\nECPair.prototype.verify = function (hash, signature) {\n    var fastsig = fastcurve.verify(hash, signature, this.getPublicKeyBuffer());\n    if (fastsig !== undefined)\n        return fastsig;\n    return ecdsa.verify(hash, signature, this.Q);\n};\n/**\n * @deprecated\n * Use {@see keyutil.privateKeyBufferToECPair} instead\n * Will be removed in next major version (BLOCK-267)\n */\nECPair.fromPrivateKeyBuffer = function (buffer, network) {\n    // toplevel import unavailable due to circular dependency\n    var keyutil = require('./bitgo/keyutil');\n    return keyutil.privateKeyBufferToECPair(buffer, network);\n};\n/**\n * @deprecated\n * Use {@see keyutil.privateKeyBufferFromECPair} instead\n * Will be removed in next major version (BLOCK-267)\n */\nECPair.prototype.getPrivateKeyBuffer = function () {\n    // toplevel import unavailable due to circular dependency\n    var keyutil = require('./bitgo/keyutil');\n    return keyutil.privateKeyBufferFromECPair(this);\n};\nmodule.exports = ECPair;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}