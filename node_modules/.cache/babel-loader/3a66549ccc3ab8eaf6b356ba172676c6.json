{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProvisioningResult = exports.ProvisioningTxid = void 0;\nconst __1 = require(\"../..\");\nconst bufferutils_1 = require(\"../../../utils/bufferutils\");\nconst varuint_1 = require(\"../../../utils/varuint\");\nconst keys_1 = require(\"../../keys\");\nconst Hash160_1 = require(\"../Hash160\");\nclass ProvisioningTxid extends __1.HexDataVdxfObject {\n  toDataBuffer() {\n    return (0, bufferutils_1.reverseBuffer)(super.toDataBuffer());\n  }\n  fromDataBuffer(buffer, offset) {\n    const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n    const provisioningTxidSlice = reader.readVarSlice();\n    const provisioningTxidBuf = Buffer.alloc(provisioningTxidSlice.length);\n    const provisioningTxidWriter = new bufferutils_1.default.BufferWriter(provisioningTxidBuf);\n    provisioningTxidWriter.writeSlice(provisioningTxidSlice);\n    this.data = (0, bufferutils_1.reverseBuffer)(provisioningTxidWriter.buffer).toString('hex');\n    return reader.offset;\n  }\n}\nexports.ProvisioningTxid = ProvisioningTxid;\nclass ProvisioningResult extends __1.VDXFObject {\n  constructor(result = {\n    state: \"\"\n  }) {\n    super(keys_1.LOGIN_CONSENT_PROVISIONING_RESULT_VDXF_KEY.vdxfid);\n    this.state = result.state;\n    this.error_desc = result.error_desc;\n    this.error_key = result.error_key;\n    this.identity_address = result.identity_address;\n    this.info_uri = result.info_uri;\n    this.provisioning_txids = result.provisioning_txids ? result.provisioning_txids.map(x => new ProvisioningTxid(x.data, x.vdxfkey)) : result.provisioning_txids;\n    this.system_id = result.system_id;\n    this.fully_qualified_name = result.fully_qualified_name;\n    this.parent = result.parent;\n  }\n  dataByteLength() {\n    const stateLength = Hash160_1.Hash160.fromAddress(this.state).byteLength();\n    const errorKeyLength = this.error_key ? Hash160_1.Hash160.fromAddress(this.error_key, true).byteLength() : Hash160_1.Hash160.getEmpty().byteLength();\n    const errorDescBuf = this.error_desc == null ? Buffer.alloc(0) : Buffer.from(this.error_desc, \"utf-8\");\n    const errorDescLength = errorDescBuf.length + varuint_1.default.encodingLength(errorDescBuf.length);\n    const idAddrLength = this.identity_address ? Hash160_1.Hash160.fromAddress(this.identity_address, true).byteLength() : Hash160_1.Hash160.getEmpty().byteLength();\n    const systemIdLength = this.system_id ? Hash160_1.Hash160.fromAddress(this.system_id, true).byteLength() : Hash160_1.Hash160.getEmpty().byteLength();\n    const nameBuf = this.fully_qualified_name == null ? Buffer.alloc(0) : Buffer.from(this.fully_qualified_name, \"utf-8\");\n    const nameLength = nameBuf.length + varuint_1.default.encodingLength(nameBuf.length);\n    const parentLength = this.parent ? Hash160_1.Hash160.fromAddress(this.parent, true).byteLength() : Hash160_1.Hash160.getEmpty().byteLength();\n    const infoUriBuf = this.info_uri == null ? Buffer.alloc(0) : Buffer.from(this.info_uri, \"utf-8\");\n    const infoUriLength = infoUriBuf.length + varuint_1.default.encodingLength(infoUriBuf.length);\n    const _provisioning_txids = this.provisioning_txids ? this.provisioning_txids : [];\n    let length = stateLength + errorKeyLength + errorDescLength + idAddrLength + systemIdLength + nameLength + parentLength + infoUriLength;\n    length += varuint_1.default.encodingLength(_provisioning_txids.length);\n    length += _provisioning_txids.reduce((sum, current) => sum + current.byteLength(), 0);\n    return length;\n  }\n  toDataBuffer() {\n    const writer = new bufferutils_1.default.BufferWriter(Buffer.alloc(this.dataByteLength()));\n    writer.writeSlice(Hash160_1.Hash160.fromAddress(this.state).toBuffer());\n    writer.writeSlice(this.error_key ? Hash160_1.Hash160.fromAddress(this.error_key, true).toBuffer() : Hash160_1.Hash160.getEmpty().toBuffer());\n    writer.writeVarSlice(this.error_desc == null ? Buffer.alloc(0) : Buffer.from(this.error_desc, \"utf-8\"));\n    writer.writeSlice(this.identity_address ? Hash160_1.Hash160.fromAddress(this.identity_address, true).toBuffer() : Hash160_1.Hash160.getEmpty().toBuffer());\n    writer.writeSlice(this.system_id ? Hash160_1.Hash160.fromAddress(this.system_id, true).toBuffer() : Hash160_1.Hash160.getEmpty().toBuffer());\n    writer.writeVarSlice(this.fully_qualified_name == null ? Buffer.alloc(0) : Buffer.from(this.fully_qualified_name, \"utf-8\"));\n    writer.writeSlice(this.parent ? Hash160_1.Hash160.fromAddress(this.parent, true).toBuffer() : Hash160_1.Hash160.getEmpty().toBuffer());\n    writer.writeVarSlice(this.info_uri == null ? Buffer.alloc(0) : Buffer.from(this.info_uri, \"utf-8\"));\n    const _provisioning_txids = this.provisioning_txids ? this.provisioning_txids : [];\n    writer.writeArray(_provisioning_txids.map(x => x.toBuffer()));\n    return writer.buffer;\n  }\n  fromDataBuffer(buffer, offset) {\n    const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n    const resultLength = reader.readCompactSize();\n    if (resultLength == 0) {\n      throw new Error(\"Cannot create provisioning result from empty buffer\");\n    } else {\n      const _state = new Hash160_1.Hash160();\n      reader.offset = _state.fromBuffer(reader.buffer, false, reader.offset);\n      this.state = _state.toAddress();\n      const _error_key = new Hash160_1.Hash160();\n      reader.offset = _error_key.fromBuffer(reader.buffer, true, reader.offset);\n      this.error_key = _error_key.toAddress();\n      this.error_desc = reader.readVarSlice().toString('utf8');\n      const _identity_address = new Hash160_1.Hash160();\n      reader.offset = _identity_address.fromBuffer(reader.buffer, true, reader.offset);\n      this.identity_address = _identity_address.toAddress();\n      const _system_id = new Hash160_1.Hash160();\n      reader.offset = _system_id.fromBuffer(reader.buffer, true, reader.offset);\n      this.system_id = _system_id.toAddress();\n      this.fully_qualified_name = reader.readVarSlice().toString('utf8');\n      const _parent = new Hash160_1.Hash160();\n      reader.offset = _parent.fromBuffer(reader.buffer, true, reader.offset);\n      this.parent = _parent.toAddress();\n      this.info_uri = reader.readVarSlice().toString('utf8');\n      this.provisioning_txids = [];\n      const provisioningTxidLength = reader.readCompactSize();\n      for (let i = 0; i < provisioningTxidLength; i++) {\n        const _provisioning_txid = new ProvisioningTxid();\n        reader.offset = _provisioning_txid.fromBuffer(reader.buffer, reader.offset);\n        this.provisioning_txids.push(_provisioning_txid);\n      }\n    }\n    return reader.offset;\n  }\n  toJson() {\n    return {\n      vdxfkey: this.vdxfkey,\n      state: this.state,\n      error_key: this.error_key,\n      error_desc: this.error_desc,\n      identity_address: this.identity_address,\n      info_uri: this.info_uri,\n      provisioning_txids: this.provisioning_txids,\n      system_id: this.system_id,\n      fully_qualified_name: this.fully_qualified_name\n    };\n  }\n}\nexports.ProvisioningResult = ProvisioningResult;","map":{"version":3,"names":["Object","defineProperty","exports","value","ProvisioningResult","ProvisioningTxid","__1","require","bufferutils_1","varuint_1","keys_1","Hash160_1","HexDataVdxfObject","toDataBuffer","reverseBuffer","fromDataBuffer","buffer","offset","reader","default","BufferReader","provisioningTxidSlice","readVarSlice","provisioningTxidBuf","Buffer","alloc","length","provisioningTxidWriter","BufferWriter","writeSlice","data","toString","VDXFObject","constructor","result","state","LOGIN_CONSENT_PROVISIONING_RESULT_VDXF_KEY","vdxfid","error_desc","error_key","identity_address","info_uri","provisioning_txids","map","x","vdxfkey","system_id","fully_qualified_name","parent","dataByteLength","stateLength","Hash160","fromAddress","byteLength","errorKeyLength","getEmpty","errorDescBuf","from","errorDescLength","encodingLength","idAddrLength","systemIdLength","nameBuf","nameLength","parentLength","infoUriBuf","infoUriLength","_provisioning_txids","reduce","sum","current","writer","toBuffer","writeVarSlice","writeArray","resultLength","readCompactSize","Error","_state","fromBuffer","toAddress","_error_key","_identity_address","_system_id","_parent","provisioningTxidLength","i","_provisioning_txid","push","toJson"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/verus-typescript-primitives/dist/vdxf/classes/provisioning/ProvisioningResult.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProvisioningResult = exports.ProvisioningTxid = void 0;\nconst __1 = require(\"../..\");\nconst bufferutils_1 = require(\"../../../utils/bufferutils\");\nconst varuint_1 = require(\"../../../utils/varuint\");\nconst keys_1 = require(\"../../keys\");\nconst Hash160_1 = require(\"../Hash160\");\nclass ProvisioningTxid extends __1.HexDataVdxfObject {\n    toDataBuffer() {\n        return (0, bufferutils_1.reverseBuffer)(super.toDataBuffer());\n    }\n    fromDataBuffer(buffer, offset) {\n        const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n        const provisioningTxidSlice = reader.readVarSlice();\n        const provisioningTxidBuf = Buffer.alloc(provisioningTxidSlice.length);\n        const provisioningTxidWriter = new bufferutils_1.default.BufferWriter(provisioningTxidBuf);\n        provisioningTxidWriter.writeSlice(provisioningTxidSlice);\n        this.data = (0, bufferutils_1.reverseBuffer)(provisioningTxidWriter.buffer).toString('hex');\n        return reader.offset;\n    }\n}\nexports.ProvisioningTxid = ProvisioningTxid;\nclass ProvisioningResult extends __1.VDXFObject {\n    constructor(result = { state: \"\" }) {\n        super(keys_1.LOGIN_CONSENT_PROVISIONING_RESULT_VDXF_KEY.vdxfid);\n        this.state = result.state;\n        this.error_desc = result.error_desc;\n        this.error_key = result.error_key;\n        this.identity_address = result.identity_address;\n        this.info_uri = result.info_uri;\n        this.provisioning_txids = result.provisioning_txids\n            ? result.provisioning_txids.map((x) => new ProvisioningTxid(x.data, x.vdxfkey))\n            : result.provisioning_txids;\n        this.system_id = result.system_id;\n        this.fully_qualified_name = result.fully_qualified_name;\n        this.parent = result.parent;\n    }\n    dataByteLength() {\n        const stateLength = Hash160_1.Hash160.fromAddress(this.state).byteLength();\n        const errorKeyLength = this.error_key\n            ? Hash160_1.Hash160.fromAddress(this.error_key, true).byteLength()\n            : Hash160_1.Hash160.getEmpty().byteLength();\n        const errorDescBuf = this.error_desc == null\n            ? Buffer.alloc(0)\n            : Buffer.from(this.error_desc, \"utf-8\");\n        const errorDescLength = errorDescBuf.length + varuint_1.default.encodingLength(errorDescBuf.length);\n        const idAddrLength = this.identity_address\n            ? Hash160_1.Hash160.fromAddress(this.identity_address, true).byteLength()\n            : Hash160_1.Hash160.getEmpty().byteLength();\n        const systemIdLength = this.system_id\n            ? Hash160_1.Hash160.fromAddress(this.system_id, true).byteLength()\n            : Hash160_1.Hash160.getEmpty().byteLength();\n        const nameBuf = this.fully_qualified_name == null\n            ? Buffer.alloc(0)\n            : Buffer.from(this.fully_qualified_name, \"utf-8\");\n        const nameLength = nameBuf.length + varuint_1.default.encodingLength(nameBuf.length);\n        const parentLength = this.parent\n            ? Hash160_1.Hash160.fromAddress(this.parent, true).byteLength()\n            : Hash160_1.Hash160.getEmpty().byteLength();\n        const infoUriBuf = this.info_uri == null ? Buffer.alloc(0) : Buffer.from(this.info_uri, \"utf-8\");\n        const infoUriLength = infoUriBuf.length + varuint_1.default.encodingLength(infoUriBuf.length);\n        const _provisioning_txids = this.provisioning_txids ? this.provisioning_txids : [];\n        let length = (stateLength +\n            errorKeyLength +\n            errorDescLength +\n            idAddrLength +\n            systemIdLength +\n            nameLength +\n            parentLength +\n            infoUriLength);\n        length += varuint_1.default.encodingLength(_provisioning_txids.length);\n        length += _provisioning_txids.reduce((sum, current) => sum + current.byteLength(), 0);\n        return length;\n    }\n    toDataBuffer() {\n        const writer = new bufferutils_1.default.BufferWriter(Buffer.alloc(this.dataByteLength()));\n        writer.writeSlice(Hash160_1.Hash160.fromAddress(this.state).toBuffer());\n        writer.writeSlice(this.error_key\n            ? Hash160_1.Hash160.fromAddress(this.error_key, true).toBuffer()\n            : Hash160_1.Hash160.getEmpty().toBuffer());\n        writer.writeVarSlice(this.error_desc == null ? Buffer.alloc(0) : Buffer.from(this.error_desc, \"utf-8\"));\n        writer.writeSlice(this.identity_address\n            ? Hash160_1.Hash160.fromAddress(this.identity_address, true).toBuffer()\n            : Hash160_1.Hash160.getEmpty().toBuffer());\n        writer.writeSlice(this.system_id\n            ? Hash160_1.Hash160.fromAddress(this.system_id, true).toBuffer()\n            : Hash160_1.Hash160.getEmpty().toBuffer());\n        writer.writeVarSlice(this.fully_qualified_name == null ? Buffer.alloc(0) : Buffer.from(this.fully_qualified_name, \"utf-8\"));\n        writer.writeSlice(this.parent\n            ? Hash160_1.Hash160.fromAddress(this.parent, true).toBuffer()\n            : Hash160_1.Hash160.getEmpty().toBuffer());\n        writer.writeVarSlice(this.info_uri == null ? Buffer.alloc(0) : Buffer.from(this.info_uri, \"utf-8\"));\n        const _provisioning_txids = this.provisioning_txids ? this.provisioning_txids : [];\n        writer.writeArray(_provisioning_txids.map((x) => x.toBuffer()));\n        return writer.buffer;\n    }\n    fromDataBuffer(buffer, offset) {\n        const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n        const resultLength = reader.readCompactSize();\n        if (resultLength == 0) {\n            throw new Error(\"Cannot create provisioning result from empty buffer\");\n        }\n        else {\n            const _state = new Hash160_1.Hash160();\n            reader.offset = _state.fromBuffer(reader.buffer, false, reader.offset);\n            this.state = _state.toAddress();\n            const _error_key = new Hash160_1.Hash160();\n            reader.offset = _error_key.fromBuffer(reader.buffer, true, reader.offset);\n            this.error_key = _error_key.toAddress();\n            this.error_desc = reader.readVarSlice().toString('utf8');\n            const _identity_address = new Hash160_1.Hash160();\n            reader.offset = _identity_address.fromBuffer(reader.buffer, true, reader.offset);\n            this.identity_address = _identity_address.toAddress();\n            const _system_id = new Hash160_1.Hash160();\n            reader.offset = _system_id.fromBuffer(reader.buffer, true, reader.offset);\n            this.system_id = _system_id.toAddress();\n            this.fully_qualified_name = reader.readVarSlice().toString('utf8');\n            const _parent = new Hash160_1.Hash160();\n            reader.offset = _parent.fromBuffer(reader.buffer, true, reader.offset);\n            this.parent = _parent.toAddress();\n            this.info_uri = reader.readVarSlice().toString('utf8');\n            this.provisioning_txids = [];\n            const provisioningTxidLength = reader.readCompactSize();\n            for (let i = 0; i < provisioningTxidLength; i++) {\n                const _provisioning_txid = new ProvisioningTxid();\n                reader.offset = _provisioning_txid.fromBuffer(reader.buffer, reader.offset);\n                this.provisioning_txids.push(_provisioning_txid);\n            }\n        }\n        return reader.offset;\n    }\n    toJson() {\n        return {\n            vdxfkey: this.vdxfkey,\n            state: this.state,\n            error_key: this.error_key,\n            error_desc: this.error_desc,\n            identity_address: this.identity_address,\n            info_uri: this.info_uri,\n            provisioning_txids: this.provisioning_txids,\n            system_id: this.system_id,\n            fully_qualified_name: this.fully_qualified_name\n        };\n    }\n}\nexports.ProvisioningResult = ProvisioningResult;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}