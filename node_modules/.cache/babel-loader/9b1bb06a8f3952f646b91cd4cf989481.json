{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decision = void 0;\nconst __1 = require(\"..\");\nconst bufferutils_1 = require(\"../../utils/bufferutils\");\nconst varuint_1 = require(\"../../utils/varuint\");\nconst Context_1 = require(\"./Context\");\nconst Hash160_1 = require(\"./Hash160\");\nconst Request_1 = require(\"./Request\");\nclass Decision extends __1.VDXFObject {\n  constructor(decision = {\n    decision_id: \"\",\n    request: new Request_1.Request(),\n    created_at: 0\n  }, vdxfkey = __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n    super(vdxfkey);\n    this.decision_id = decision.decision_id;\n    this.request = new Request_1.Request(decision.request);\n    this.context = decision.context;\n    this.created_at = decision.created_at;\n    this.attestations = decision.attestations;\n    this.salt = decision.salt;\n    this.skipped = decision.skipped ? true : false;\n  }\n  dataByteLength() {\n    let length = 0;\n    const _challenge_id = Hash160_1.Hash160.fromAddress(this.decision_id, true);\n    const _salt = this.salt ? Hash160_1.Hash160.fromAddress(this.salt, true) : Hash160_1.Hash160.getEmpty();\n    const _request = this.request ? this.request : new Request_1.Request();\n    const _context = this.context ? this.context : new Context_1.Context();\n    const _attestations = [];\n    length += _challenge_id.byteLength();\n    length += 8; // created_at\n    length += _salt.byteLength();\n    if (this.vdxfkey === __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n      length += 1; // skipped\n      length += varuint_1.default.encodingLength(_attestations.length);\n    }\n    length += _request.byteLength();\n    length += _context.byteLength();\n    return length;\n  }\n  toDataBuffer() {\n    const buffer = Buffer.alloc(this.dataByteLength());\n    const writer = new bufferutils_1.default.BufferWriter(buffer);\n    const _decision_id = Hash160_1.Hash160.fromAddress(this.decision_id, true);\n    const _created_at = this.created_at;\n    const _salt = this.salt ? Hash160_1.Hash160.fromAddress(this.salt, true) : Hash160_1.Hash160.getEmpty();\n    const _request = this.request ? this.request : new Request_1.Request();\n    const _context = this.context ? this.context : new Context_1.Context();\n    const _attestations = [];\n    writer.writeSlice(_decision_id.toBuffer());\n    writer.writeUInt64(_created_at);\n    writer.writeSlice(_salt.toBuffer());\n    if (this.vdxfkey === __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n      writer.writeUInt8(this.skipped ? 1 : 0);\n      writer.writeArray(_attestations.map(x => x.toBuffer()));\n    }\n    writer.writeSlice(_context.toBuffer());\n    writer.writeSlice(_request.toBuffer());\n    return writer.buffer;\n  }\n  fromDataBuffer(buffer, offset, readRequest = true) {\n    const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n    const decisionLength = reader.readCompactSize();\n    if (decisionLength == 0) {\n      throw new Error(\"Cannot create decision from empty buffer\");\n    } else {\n      const _decision_id = new Hash160_1.Hash160();\n      reader.offset = _decision_id.fromBuffer(reader.buffer, true, reader.offset);\n      this.decision_id = _decision_id.toAddress();\n      this.created_at = reader.readUInt64();\n      const _salt = new Hash160_1.Hash160();\n      reader.offset = _salt.fromBuffer(reader.buffer, true, reader.offset);\n      this.salt = _salt.toAddress();\n      if (this.vdxfkey === __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n        this.skipped = reader.readUInt8() === 1 ? true : false;\n        this.attestations = [];\n        const attestationsLength = reader.readCompactSize();\n        if (attestationsLength > 0) {\n          throw new Error(\"Attestations currently unsupported\");\n        }\n      }\n      const _context = new Context_1.Context();\n      reader.offset = _context.fromBuffer(reader.buffer, reader.offset);\n      this.context = _context;\n      if (readRequest) {\n        const _request = new Request_1.Request();\n        reader.offset = _request.fromBuffer(reader.buffer, reader.offset);\n        this.request = _request;\n      }\n    }\n    return reader.offset;\n  }\n  toJson() {\n    return {\n      vdxfkey: this.vdxfkey,\n      decision_id: this.decision_id,\n      context: this.context.toJson(),\n      created_at: this.created_at,\n      request: this.request.toJson()\n    };\n  }\n}\nexports.Decision = Decision;","map":{"version":3,"names":["Object","defineProperty","exports","value","Decision","__1","require","bufferutils_1","varuint_1","Context_1","Hash160_1","Request_1","VDXFObject","constructor","decision","decision_id","request","Request","created_at","vdxfkey","LOGIN_CONSENT_DECISION_VDXF_KEY","vdxfid","context","attestations","salt","skipped","dataByteLength","length","_challenge_id","Hash160","fromAddress","_salt","getEmpty","_request","_context","Context","_attestations","byteLength","default","encodingLength","toDataBuffer","buffer","Buffer","alloc","writer","BufferWriter","_decision_id","_created_at","writeSlice","toBuffer","writeUInt64","writeUInt8","writeArray","map","x","fromDataBuffer","offset","readRequest","reader","BufferReader","decisionLength","readCompactSize","Error","fromBuffer","toAddress","readUInt64","readUInt8","attestationsLength","toJson"],"sources":["/Users/oddfl3x/Code/varB/NATIBridgeWebsite-main/node_modules/verus-typescript-primitives/dist/vdxf/classes/Decision.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Decision = void 0;\nconst __1 = require(\"..\");\nconst bufferutils_1 = require(\"../../utils/bufferutils\");\nconst varuint_1 = require(\"../../utils/varuint\");\nconst Context_1 = require(\"./Context\");\nconst Hash160_1 = require(\"./Hash160\");\nconst Request_1 = require(\"./Request\");\nclass Decision extends __1.VDXFObject {\n    constructor(decision = {\n        decision_id: \"\",\n        request: new Request_1.Request(),\n        created_at: 0,\n    }, vdxfkey = __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n        super(vdxfkey);\n        this.decision_id = decision.decision_id;\n        this.request = new Request_1.Request(decision.request);\n        this.context = decision.context;\n        this.created_at = decision.created_at;\n        this.attestations = decision.attestations;\n        this.salt = decision.salt;\n        this.skipped = decision.skipped ? true : false;\n    }\n    dataByteLength() {\n        let length = 0;\n        const _challenge_id = Hash160_1.Hash160.fromAddress(this.decision_id, true);\n        const _salt = this.salt\n            ? Hash160_1.Hash160.fromAddress(this.salt, true)\n            : Hash160_1.Hash160.getEmpty();\n        const _request = this.request ? this.request : new Request_1.Request();\n        const _context = this.context ? this.context : new Context_1.Context();\n        const _attestations = [];\n        length += _challenge_id.byteLength();\n        length += 8; // created_at\n        length += _salt.byteLength();\n        if (this.vdxfkey === __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n            length += 1; // skipped\n            length += varuint_1.default.encodingLength(_attestations.length);\n        }\n        length += _request.byteLength();\n        length += _context.byteLength();\n        return length;\n    }\n    toDataBuffer() {\n        const buffer = Buffer.alloc(this.dataByteLength());\n        const writer = new bufferutils_1.default.BufferWriter(buffer);\n        const _decision_id = Hash160_1.Hash160.fromAddress(this.decision_id, true);\n        const _created_at = this.created_at;\n        const _salt = this.salt\n            ? Hash160_1.Hash160.fromAddress(this.salt, true)\n            : Hash160_1.Hash160.getEmpty();\n        const _request = this.request ? this.request : new Request_1.Request();\n        const _context = this.context ? this.context : new Context_1.Context();\n        const _attestations = [];\n        writer.writeSlice(_decision_id.toBuffer());\n        writer.writeUInt64(_created_at);\n        writer.writeSlice(_salt.toBuffer());\n        if (this.vdxfkey === __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n            writer.writeUInt8(this.skipped ? 1 : 0);\n            writer.writeArray(_attestations.map((x) => x.toBuffer()));\n        }\n        writer.writeSlice(_context.toBuffer());\n        writer.writeSlice(_request.toBuffer());\n        return writer.buffer;\n    }\n    fromDataBuffer(buffer, offset, readRequest = true) {\n        const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n        const decisionLength = reader.readCompactSize();\n        if (decisionLength == 0) {\n            throw new Error(\"Cannot create decision from empty buffer\");\n        }\n        else {\n            const _decision_id = new Hash160_1.Hash160();\n            reader.offset = _decision_id.fromBuffer(reader.buffer, true, reader.offset);\n            this.decision_id = _decision_id.toAddress();\n            this.created_at = reader.readUInt64();\n            const _salt = new Hash160_1.Hash160();\n            reader.offset = _salt.fromBuffer(reader.buffer, true, reader.offset);\n            this.salt = _salt.toAddress();\n            if (this.vdxfkey === __1.LOGIN_CONSENT_DECISION_VDXF_KEY.vdxfid) {\n                this.skipped = reader.readUInt8() === 1 ? true : false;\n                this.attestations = [];\n                const attestationsLength = reader.readCompactSize();\n                if (attestationsLength > 0) {\n                    throw new Error(\"Attestations currently unsupported\");\n                }\n            }\n            const _context = new Context_1.Context();\n            reader.offset = _context.fromBuffer(reader.buffer, reader.offset);\n            this.context = _context;\n            if (readRequest) {\n                const _request = new Request_1.Request();\n                reader.offset = _request.fromBuffer(reader.buffer, reader.offset);\n                this.request = _request;\n            }\n        }\n        return reader.offset;\n    }\n    toJson() {\n        return {\n            vdxfkey: this.vdxfkey,\n            decision_id: this.decision_id,\n            context: this.context.toJson(),\n            created_at: this.created_at,\n            request: this.request.toJson(),\n        };\n    }\n}\nexports.Decision = Decision;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,GAAG,GAAGC,OAAO,CAAC,IAAI,CAAC;AACzB,MAAMC,aAAa,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMG,SAAS,GAAGH,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMI,SAAS,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMK,SAAS,GAAGL,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMF,QAAQ,SAASC,GAAG,CAACO,UAAU,CAAC;EAClCC,WAAWA,CAACC,QAAQ,GAAG;IACnBC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAE,IAAIL,SAAS,CAACM,OAAO,CAAC,CAAC;IAChCC,UAAU,EAAE;EAChB,CAAC,EAAEC,OAAO,GAAGd,GAAG,CAACe,+BAA+B,CAACC,MAAM,EAAE;IACrD,KAAK,CAACF,OAAO,CAAC;IACd,IAAI,CAACJ,WAAW,GAAGD,QAAQ,CAACC,WAAW;IACvC,IAAI,CAACC,OAAO,GAAG,IAAIL,SAAS,CAACM,OAAO,CAACH,QAAQ,CAACE,OAAO,CAAC;IACtD,IAAI,CAACM,OAAO,GAAGR,QAAQ,CAACQ,OAAO;IAC/B,IAAI,CAACJ,UAAU,GAAGJ,QAAQ,CAACI,UAAU;IACrC,IAAI,CAACK,YAAY,GAAGT,QAAQ,CAACS,YAAY;IACzC,IAAI,CAACC,IAAI,GAAGV,QAAQ,CAACU,IAAI;IACzB,IAAI,CAACC,OAAO,GAAGX,QAAQ,CAACW,OAAO,GAAG,IAAI,GAAG,KAAK;EAClD;EACAC,cAAcA,CAAA,EAAG;IACb,IAAIC,MAAM,GAAG,CAAC;IACd,MAAMC,aAAa,GAAGlB,SAAS,CAACmB,OAAO,CAACC,WAAW,CAAC,IAAI,CAACf,WAAW,EAAE,IAAI,CAAC;IAC3E,MAAMgB,KAAK,GAAG,IAAI,CAACP,IAAI,GACjBd,SAAS,CAACmB,OAAO,CAACC,WAAW,CAAC,IAAI,CAACN,IAAI,EAAE,IAAI,CAAC,GAC9Cd,SAAS,CAACmB,OAAO,CAACG,QAAQ,CAAC,CAAC;IAClC,MAAMC,QAAQ,GAAG,IAAI,CAACjB,OAAO,GAAG,IAAI,CAACA,OAAO,GAAG,IAAIL,SAAS,CAACM,OAAO,CAAC,CAAC;IACtE,MAAMiB,QAAQ,GAAG,IAAI,CAACZ,OAAO,GAAG,IAAI,CAACA,OAAO,GAAG,IAAIb,SAAS,CAAC0B,OAAO,CAAC,CAAC;IACtE,MAAMC,aAAa,GAAG,EAAE;IACxBT,MAAM,IAAIC,aAAa,CAACS,UAAU,CAAC,CAAC;IACpCV,MAAM,IAAI,CAAC,CAAC,CAAC;IACbA,MAAM,IAAII,KAAK,CAACM,UAAU,CAAC,CAAC;IAC5B,IAAI,IAAI,CAAClB,OAAO,KAAKd,GAAG,CAACe,+BAA+B,CAACC,MAAM,EAAE;MAC7DM,MAAM,IAAI,CAAC,CAAC,CAAC;MACbA,MAAM,IAAInB,SAAS,CAAC8B,OAAO,CAACC,cAAc,CAACH,aAAa,CAACT,MAAM,CAAC;IACpE;IACAA,MAAM,IAAIM,QAAQ,CAACI,UAAU,CAAC,CAAC;IAC/BV,MAAM,IAAIO,QAAQ,CAACG,UAAU,CAAC,CAAC;IAC/B,OAAOV,MAAM;EACjB;EACAa,YAAYA,CAAA,EAAG;IACX,MAAMC,MAAM,GAAGC,MAAM,CAACC,KAAK,CAAC,IAAI,CAACjB,cAAc,CAAC,CAAC,CAAC;IAClD,MAAMkB,MAAM,GAAG,IAAIrC,aAAa,CAAC+B,OAAO,CAACO,YAAY,CAACJ,MAAM,CAAC;IAC7D,MAAMK,YAAY,GAAGpC,SAAS,CAACmB,OAAO,CAACC,WAAW,CAAC,IAAI,CAACf,WAAW,EAAE,IAAI,CAAC;IAC1E,MAAMgC,WAAW,GAAG,IAAI,CAAC7B,UAAU;IACnC,MAAMa,KAAK,GAAG,IAAI,CAACP,IAAI,GACjBd,SAAS,CAACmB,OAAO,CAACC,WAAW,CAAC,IAAI,CAACN,IAAI,EAAE,IAAI,CAAC,GAC9Cd,SAAS,CAACmB,OAAO,CAACG,QAAQ,CAAC,CAAC;IAClC,MAAMC,QAAQ,GAAG,IAAI,CAACjB,OAAO,GAAG,IAAI,CAACA,OAAO,GAAG,IAAIL,SAAS,CAACM,OAAO,CAAC,CAAC;IACtE,MAAMiB,QAAQ,GAAG,IAAI,CAACZ,OAAO,GAAG,IAAI,CAACA,OAAO,GAAG,IAAIb,SAAS,CAAC0B,OAAO,CAAC,CAAC;IACtE,MAAMC,aAAa,GAAG,EAAE;IACxBQ,MAAM,CAACI,UAAU,CAACF,YAAY,CAACG,QAAQ,CAAC,CAAC,CAAC;IAC1CL,MAAM,CAACM,WAAW,CAACH,WAAW,CAAC;IAC/BH,MAAM,CAACI,UAAU,CAACjB,KAAK,CAACkB,QAAQ,CAAC,CAAC,CAAC;IACnC,IAAI,IAAI,CAAC9B,OAAO,KAAKd,GAAG,CAACe,+BAA+B,CAACC,MAAM,EAAE;MAC7DuB,MAAM,CAACO,UAAU,CAAC,IAAI,CAAC1B,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;MACvCmB,MAAM,CAACQ,UAAU,CAAChB,aAAa,CAACiB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7D;IACAL,MAAM,CAACI,UAAU,CAACd,QAAQ,CAACe,QAAQ,CAAC,CAAC,CAAC;IACtCL,MAAM,CAACI,UAAU,CAACf,QAAQ,CAACgB,QAAQ,CAAC,CAAC,CAAC;IACtC,OAAOL,MAAM,CAACH,MAAM;EACxB;EACAc,cAAcA,CAACd,MAAM,EAAEe,MAAM,EAAEC,WAAW,GAAG,IAAI,EAAE;IAC/C,MAAMC,MAAM,GAAG,IAAInD,aAAa,CAAC+B,OAAO,CAACqB,YAAY,CAAClB,MAAM,EAAEe,MAAM,CAAC;IACrE,MAAMI,cAAc,GAAGF,MAAM,CAACG,eAAe,CAAC,CAAC;IAC/C,IAAID,cAAc,IAAI,CAAC,EAAE;MACrB,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;IAC/D,CAAC,MACI;MACD,MAAMhB,YAAY,GAAG,IAAIpC,SAAS,CAACmB,OAAO,CAAC,CAAC;MAC5C6B,MAAM,CAACF,MAAM,GAAGV,YAAY,CAACiB,UAAU,CAACL,MAAM,CAACjB,MAAM,EAAE,IAAI,EAAEiB,MAAM,CAACF,MAAM,CAAC;MAC3E,IAAI,CAACzC,WAAW,GAAG+B,YAAY,CAACkB,SAAS,CAAC,CAAC;MAC3C,IAAI,CAAC9C,UAAU,GAAGwC,MAAM,CAACO,UAAU,CAAC,CAAC;MACrC,MAAMlC,KAAK,GAAG,IAAIrB,SAAS,CAACmB,OAAO,CAAC,CAAC;MACrC6B,MAAM,CAACF,MAAM,GAAGzB,KAAK,CAACgC,UAAU,CAACL,MAAM,CAACjB,MAAM,EAAE,IAAI,EAAEiB,MAAM,CAACF,MAAM,CAAC;MACpE,IAAI,CAAChC,IAAI,GAAGO,KAAK,CAACiC,SAAS,CAAC,CAAC;MAC7B,IAAI,IAAI,CAAC7C,OAAO,KAAKd,GAAG,CAACe,+BAA+B,CAACC,MAAM,EAAE;QAC7D,IAAI,CAACI,OAAO,GAAGiC,MAAM,CAACQ,SAAS,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK;QACtD,IAAI,CAAC3C,YAAY,GAAG,EAAE;QACtB,MAAM4C,kBAAkB,GAAGT,MAAM,CAACG,eAAe,CAAC,CAAC;QACnD,IAAIM,kBAAkB,GAAG,CAAC,EAAE;UACxB,MAAM,IAAIL,KAAK,CAAC,oCAAoC,CAAC;QACzD;MACJ;MACA,MAAM5B,QAAQ,GAAG,IAAIzB,SAAS,CAAC0B,OAAO,CAAC,CAAC;MACxCuB,MAAM,CAACF,MAAM,GAAGtB,QAAQ,CAAC6B,UAAU,CAACL,MAAM,CAACjB,MAAM,EAAEiB,MAAM,CAACF,MAAM,CAAC;MACjE,IAAI,CAAClC,OAAO,GAAGY,QAAQ;MACvB,IAAIuB,WAAW,EAAE;QACb,MAAMxB,QAAQ,GAAG,IAAItB,SAAS,CAACM,OAAO,CAAC,CAAC;QACxCyC,MAAM,CAACF,MAAM,GAAGvB,QAAQ,CAAC8B,UAAU,CAACL,MAAM,CAACjB,MAAM,EAAEiB,MAAM,CAACF,MAAM,CAAC;QACjE,IAAI,CAACxC,OAAO,GAAGiB,QAAQ;MAC3B;IACJ;IACA,OAAOyB,MAAM,CAACF,MAAM;EACxB;EACAY,MAAMA,CAAA,EAAG;IACL,OAAO;MACHjD,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBJ,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BO,OAAO,EAAE,IAAI,CAACA,OAAO,CAAC8C,MAAM,CAAC,CAAC;MAC9BlD,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BF,OAAO,EAAE,IAAI,CAACA,OAAO,CAACoD,MAAM,CAAC;IACjC,CAAC;EACL;AACJ;AACAlE,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}