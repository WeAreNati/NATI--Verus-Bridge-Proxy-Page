{"ast":null,"code":"// <scriptSig> {serialized scriptPubKey script}\nvar bscript = require('../../script');\nvar types = require('../../types');\nvar typeforce = require('typeforce');\nvar p2ms = require('../multisig/');\nvar p2pk = require('../pubkey/');\nvar p2pkh = require('../pubkeyhash/');\nfunction check(chunks, allowIncomplete) {\n  typeforce(types.Array, chunks);\n  if (chunks.length < 1) return false;\n  var witnessScript = chunks[chunks.length - 1];\n  if (!Buffer.isBuffer(witnessScript)) return false;\n  var witnessScriptChunks = bscript.decompile(witnessScript);\n  // is witnessScript a valid script?\n  if (witnessScriptChunks.length === 0) return false;\n  var witnessRawScriptSig = bscript.compile(chunks.slice(0, -1));\n  // match types\n  if (p2pkh.input.check(witnessRawScriptSig) && p2pkh.output.check(witnessScriptChunks)) return true;\n  if (p2ms.input.check(witnessRawScriptSig, allowIncomplete) && p2ms.output.check(witnessScriptChunks)) return true;\n  if (p2pk.input.check(witnessRawScriptSig) && p2pk.output.check(witnessScriptChunks)) return true;\n  return false;\n}\ncheck.toJSON = function () {\n  return 'witnessScriptHash input';\n};\nfunction encodeStack(witnessData, witnessScript) {\n  typeforce({\n    witnessData: [types.Buffer],\n    witnessScript: types.Buffer\n  }, {\n    witnessData: witnessData,\n    witnessScript: witnessScript\n  });\n  return [].concat(witnessData, witnessScript);\n}\nfunction decodeStack(chunks) {\n  typeforce(check, chunks);\n  return {\n    witnessData: chunks.slice(0, -1),\n    witnessScript: chunks[chunks.length - 1]\n  };\n}\nmodule.exports = {\n  check: check,\n  decodeStack: decodeStack,\n  encodeStack: encodeStack\n};","map":{"version":3,"names":["bscript","require","types","typeforce","p2ms","p2pk","p2pkh","check","chunks","allowIncomplete","Array","length","witnessScript","Buffer","isBuffer","witnessScriptChunks","decompile","witnessRawScriptSig","compile","slice","input","output","toJSON","encodeStack","witnessData","concat","decodeStack","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/@bitgo/utxo-lib/dist/src/templates/witnessscripthash/input.js"],"sourcesContent":["// <scriptSig> {serialized scriptPubKey script}\nvar bscript = require('../../script');\nvar types = require('../../types');\nvar typeforce = require('typeforce');\nvar p2ms = require('../multisig/');\nvar p2pk = require('../pubkey/');\nvar p2pkh = require('../pubkeyhash/');\nfunction check(chunks, allowIncomplete) {\n    typeforce(types.Array, chunks);\n    if (chunks.length < 1)\n        return false;\n    var witnessScript = chunks[chunks.length - 1];\n    if (!Buffer.isBuffer(witnessScript))\n        return false;\n    var witnessScriptChunks = bscript.decompile(witnessScript);\n    // is witnessScript a valid script?\n    if (witnessScriptChunks.length === 0)\n        return false;\n    var witnessRawScriptSig = bscript.compile(chunks.slice(0, -1));\n    // match types\n    if (p2pkh.input.check(witnessRawScriptSig) &&\n        p2pkh.output.check(witnessScriptChunks))\n        return true;\n    if (p2ms.input.check(witnessRawScriptSig, allowIncomplete) &&\n        p2ms.output.check(witnessScriptChunks))\n        return true;\n    if (p2pk.input.check(witnessRawScriptSig) &&\n        p2pk.output.check(witnessScriptChunks))\n        return true;\n    return false;\n}\ncheck.toJSON = function () { return 'witnessScriptHash input'; };\nfunction encodeStack(witnessData, witnessScript) {\n    typeforce({\n        witnessData: [types.Buffer],\n        witnessScript: types.Buffer\n    }, {\n        witnessData: witnessData,\n        witnessScript: witnessScript\n    });\n    return [].concat(witnessData, witnessScript);\n}\nfunction decodeStack(chunks) {\n    typeforce(check, chunks);\n    return {\n        witnessData: chunks.slice(0, -1),\n        witnessScript: chunks[chunks.length - 1]\n    };\n}\nmodule.exports = {\n    check: check,\n    decodeStack: decodeStack,\n    encodeStack: encodeStack\n};\n"],"mappings":"AAAA;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AACrC,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAa,CAAC;AAClC,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIG,IAAI,GAAGH,OAAO,CAAC,cAAc,CAAC;AAClC,IAAII,IAAI,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAChC,IAAIK,KAAK,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AACrC,SAASM,KAAKA,CAACC,MAAM,EAAEC,eAAe,EAAE;EACpCN,SAAS,CAACD,KAAK,CAACQ,KAAK,EAAEF,MAAM,CAAC;EAC9B,IAAIA,MAAM,CAACG,MAAM,GAAG,CAAC,EACjB,OAAO,KAAK;EAChB,IAAIC,aAAa,GAAGJ,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC;EAC7C,IAAI,CAACE,MAAM,CAACC,QAAQ,CAACF,aAAa,CAAC,EAC/B,OAAO,KAAK;EAChB,IAAIG,mBAAmB,GAAGf,OAAO,CAACgB,SAAS,CAACJ,aAAa,CAAC;EAC1D;EACA,IAAIG,mBAAmB,CAACJ,MAAM,KAAK,CAAC,EAChC,OAAO,KAAK;EAChB,IAAIM,mBAAmB,GAAGjB,OAAO,CAACkB,OAAO,CAACV,MAAM,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC9D;EACA,IAAIb,KAAK,CAACc,KAAK,CAACb,KAAK,CAACU,mBAAmB,CAAC,IACtCX,KAAK,CAACe,MAAM,CAACd,KAAK,CAACQ,mBAAmB,CAAC,EACvC,OAAO,IAAI;EACf,IAAIX,IAAI,CAACgB,KAAK,CAACb,KAAK,CAACU,mBAAmB,EAAER,eAAe,CAAC,IACtDL,IAAI,CAACiB,MAAM,CAACd,KAAK,CAACQ,mBAAmB,CAAC,EACtC,OAAO,IAAI;EACf,IAAIV,IAAI,CAACe,KAAK,CAACb,KAAK,CAACU,mBAAmB,CAAC,IACrCZ,IAAI,CAACgB,MAAM,CAACd,KAAK,CAACQ,mBAAmB,CAAC,EACtC,OAAO,IAAI;EACf,OAAO,KAAK;AAChB;AACAR,KAAK,CAACe,MAAM,GAAG,YAAY;EAAE,OAAO,yBAAyB;AAAE,CAAC;AAChE,SAASC,WAAWA,CAACC,WAAW,EAAEZ,aAAa,EAAE;EAC7CT,SAAS,CAAC;IACNqB,WAAW,EAAE,CAACtB,KAAK,CAACW,MAAM,CAAC;IAC3BD,aAAa,EAAEV,KAAK,CAACW;EACzB,CAAC,EAAE;IACCW,WAAW,EAAEA,WAAW;IACxBZ,aAAa,EAAEA;EACnB,CAAC,CAAC;EACF,OAAO,EAAE,CAACa,MAAM,CAACD,WAAW,EAAEZ,aAAa,CAAC;AAChD;AACA,SAASc,WAAWA,CAAClB,MAAM,EAAE;EACzBL,SAAS,CAACI,KAAK,EAAEC,MAAM,CAAC;EACxB,OAAO;IACHgB,WAAW,EAAEhB,MAAM,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChCP,aAAa,EAAEJ,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC;EAC3C,CAAC;AACL;AACAgB,MAAM,CAACC,OAAO,GAAG;EACbrB,KAAK,EAAEA,KAAK;EACZmB,WAAW,EAAEA,WAAW;EACxBH,WAAW,EAAEA;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}