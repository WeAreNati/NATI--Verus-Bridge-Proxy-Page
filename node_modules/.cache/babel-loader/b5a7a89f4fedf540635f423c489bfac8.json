{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PubKey = void 0;\nconst bufferutils_1 = require(\"../utils/bufferutils\");\nclass PubKey {\n  constructor(bytes = Buffer.alloc(0), compressed = true) {\n    this.bytes = bytes;\n    this.compressed = compressed;\n  }\n  getByteLength() {\n    return this.compressed ? PubKey.COMPRESSED_PUBLIC_KEY_SIZE : PubKey.PUBLIC_KEY_SIZE;\n  }\n  fromBuffer(buffer, offset = 0) {\n    const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n    const header = buffer[offset];\n    this.compressed = header === 2 || header === 3;\n    this.bytes = reader.readSlice(this.compressed ? PubKey.COMPRESSED_PUBLIC_KEY_SIZE : PubKey.PUBLIC_KEY_SIZE);\n    return reader.offset;\n  }\n  toBuffer() {\n    const buffer = Buffer.alloc(this.getByteLength());\n    const writer = new bufferutils_1.default.BufferWriter(buffer);\n    writer.writeSlice(this.bytes);\n    return writer.buffer;\n  }\n}\nexports.PubKey = PubKey;\nPubKey.PUBLIC_KEY_SIZE = 65;\nPubKey.COMPRESSED_PUBLIC_KEY_SIZE = 33;","map":{"version":3,"names":["Object","defineProperty","exports","value","PubKey","bufferutils_1","require","constructor","bytes","Buffer","alloc","compressed","getByteLength","COMPRESSED_PUBLIC_KEY_SIZE","PUBLIC_KEY_SIZE","fromBuffer","buffer","offset","reader","default","BufferReader","header","readSlice","toBuffer","writer","BufferWriter","writeSlice"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/node_modules/verus-typescript-primitives/dist/pbaas/PubKey.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PubKey = void 0;\nconst bufferutils_1 = require(\"../utils/bufferutils\");\nclass PubKey {\n    constructor(bytes = Buffer.alloc(0), compressed = true) {\n        this.bytes = bytes;\n        this.compressed = compressed;\n    }\n    getByteLength() {\n        return this.compressed ? PubKey.COMPRESSED_PUBLIC_KEY_SIZE : PubKey.PUBLIC_KEY_SIZE;\n    }\n    fromBuffer(buffer, offset = 0) {\n        const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n        const header = buffer[offset];\n        this.compressed = (header === 2 || header === 3);\n        this.bytes = reader.readSlice(this.compressed ? PubKey.COMPRESSED_PUBLIC_KEY_SIZE : PubKey.PUBLIC_KEY_SIZE);\n        return reader.offset;\n    }\n    toBuffer() {\n        const buffer = Buffer.alloc(this.getByteLength());\n        const writer = new bufferutils_1.default.BufferWriter(buffer);\n        writer.writeSlice(this.bytes);\n        return writer.buffer;\n    }\n}\nexports.PubKey = PubKey;\nPubKey.PUBLIC_KEY_SIZE = 65;\nPubKey.COMPRESSED_PUBLIC_KEY_SIZE = 33;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB,MAAMC,aAAa,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACrD,MAAMF,MAAM,CAAC;EACTG,WAAWA,CAACC,KAAK,GAAGC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,GAAG,IAAI,EAAE;IACpD,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,UAAU,GAAGA,UAAU;EAChC;EACAC,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACD,UAAU,GAAGP,MAAM,CAACS,0BAA0B,GAAGT,MAAM,CAACU,eAAe;EACvF;EACAC,UAAUA,CAACC,MAAM,EAAEC,MAAM,GAAG,CAAC,EAAE;IAC3B,MAAMC,MAAM,GAAG,IAAIb,aAAa,CAACc,OAAO,CAACC,YAAY,CAACJ,MAAM,EAAEC,MAAM,CAAC;IACrE,MAAMI,MAAM,GAAGL,MAAM,CAACC,MAAM,CAAC;IAC7B,IAAI,CAACN,UAAU,GAAIU,MAAM,KAAK,CAAC,IAAIA,MAAM,KAAK,CAAE;IAChD,IAAI,CAACb,KAAK,GAAGU,MAAM,CAACI,SAAS,CAAC,IAAI,CAACX,UAAU,GAAGP,MAAM,CAACS,0BAA0B,GAAGT,MAAM,CAACU,eAAe,CAAC;IAC3G,OAAOI,MAAM,CAACD,MAAM;EACxB;EACAM,QAAQA,CAAA,EAAG;IACP,MAAMP,MAAM,GAAGP,MAAM,CAACC,KAAK,CAAC,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;IACjD,MAAMY,MAAM,GAAG,IAAInB,aAAa,CAACc,OAAO,CAACM,YAAY,CAACT,MAAM,CAAC;IAC7DQ,MAAM,CAACE,UAAU,CAAC,IAAI,CAAClB,KAAK,CAAC;IAC7B,OAAOgB,MAAM,CAACR,MAAM;EACxB;AACJ;AACAd,OAAO,CAACE,MAAM,GAAGA,MAAM;AACvBA,MAAM,CAACU,eAAe,GAAG,EAAE;AAC3BV,MAAM,CAACS,0BAA0B,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"script"}