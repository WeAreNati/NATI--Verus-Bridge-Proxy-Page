{"ast":null,"code":"// {signature} {pubKey}\nvar bscript = require('../../script');\nvar typeforce = require('typeforce');\nfunction isCompressedCanonicalPubKey(pubKey) {\n  return bscript.isCanonicalPubKey(pubKey) && pubKey.length === 33;\n}\nfunction check(script) {\n  var chunks = bscript.decompile(script);\n  return chunks.length === 2 && bscript.isCanonicalSignature(chunks[0]) && isCompressedCanonicalPubKey(chunks[1]);\n}\ncheck.toJSON = function () {\n  return 'witnessPubKeyHash input';\n};\nfunction encodeStack(signature, pubKey) {\n  typeforce({\n    signature: bscript.isCanonicalSignature,\n    pubKey: isCompressedCanonicalPubKey\n  }, {\n    signature: signature,\n    pubKey: pubKey\n  });\n  return [signature, pubKey];\n}\nfunction decodeStack(stack) {\n  typeforce(check, stack);\n  return {\n    signature: stack[0],\n    pubKey: stack[1]\n  };\n}\nmodule.exports = {\n  check: check,\n  decodeStack: decodeStack,\n  encodeStack: encodeStack\n};","map":{"version":3,"names":["bscript","require","typeforce","isCompressedCanonicalPubKey","pubKey","isCanonicalPubKey","length","check","script","chunks","decompile","isCanonicalSignature","toJSON","encodeStack","signature","decodeStack","stack","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/@bitgo/utxo-lib/dist/src/templates/witnesspubkeyhash/input.js"],"sourcesContent":["// {signature} {pubKey}\nvar bscript = require('../../script');\nvar typeforce = require('typeforce');\nfunction isCompressedCanonicalPubKey(pubKey) {\n    return bscript.isCanonicalPubKey(pubKey) && pubKey.length === 33;\n}\nfunction check(script) {\n    var chunks = bscript.decompile(script);\n    return chunks.length === 2 &&\n        bscript.isCanonicalSignature(chunks[0]) &&\n        isCompressedCanonicalPubKey(chunks[1]);\n}\ncheck.toJSON = function () { return 'witnessPubKeyHash input'; };\nfunction encodeStack(signature, pubKey) {\n    typeforce({\n        signature: bscript.isCanonicalSignature,\n        pubKey: isCompressedCanonicalPubKey\n    }, {\n        signature: signature,\n        pubKey: pubKey\n    });\n    return [signature, pubKey];\n}\nfunction decodeStack(stack) {\n    typeforce(check, stack);\n    return {\n        signature: stack[0],\n        pubKey: stack[1]\n    };\n}\nmodule.exports = {\n    check: check,\n    decodeStack: decodeStack,\n    encodeStack: encodeStack\n};\n"],"mappings":"AAAA;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AACrC,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,SAASE,2BAA2BA,CAACC,MAAM,EAAE;EACzC,OAAOJ,OAAO,CAACK,iBAAiB,CAACD,MAAM,CAAC,IAAIA,MAAM,CAACE,MAAM,KAAK,EAAE;AACpE;AACA,SAASC,KAAKA,CAACC,MAAM,EAAE;EACnB,IAAIC,MAAM,GAAGT,OAAO,CAACU,SAAS,CAACF,MAAM,CAAC;EACtC,OAAOC,MAAM,CAACH,MAAM,KAAK,CAAC,IACtBN,OAAO,CAACW,oBAAoB,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,IACvCN,2BAA2B,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9C;AACAF,KAAK,CAACK,MAAM,GAAG,YAAY;EAAE,OAAO,yBAAyB;AAAE,CAAC;AAChE,SAASC,WAAWA,CAACC,SAAS,EAAEV,MAAM,EAAE;EACpCF,SAAS,CAAC;IACNY,SAAS,EAAEd,OAAO,CAACW,oBAAoB;IACvCP,MAAM,EAAED;EACZ,CAAC,EAAE;IACCW,SAAS,EAAEA,SAAS;IACpBV,MAAM,EAAEA;EACZ,CAAC,CAAC;EACF,OAAO,CAACU,SAAS,EAAEV,MAAM,CAAC;AAC9B;AACA,SAASW,WAAWA,CAACC,KAAK,EAAE;EACxBd,SAAS,CAACK,KAAK,EAAES,KAAK,CAAC;EACvB,OAAO;IACHF,SAAS,EAAEE,KAAK,CAAC,CAAC,CAAC;IACnBZ,MAAM,EAAEY,KAAK,CAAC,CAAC;EACnB,CAAC;AACL;AACAC,MAAM,CAACC,OAAO,GAAG;EACbX,KAAK,EAAEA,KAAK;EACZQ,WAAW,EAAEA,WAAW;EACxBF,WAAW,EAAEA;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}