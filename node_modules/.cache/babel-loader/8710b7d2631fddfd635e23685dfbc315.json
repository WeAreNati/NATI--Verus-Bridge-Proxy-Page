{"ast":null,"code":"var decompile = require('../script').decompile;\nvar multisig = require('./multisig');\nvar nullData = require('./nulldata');\nvar pubKey = require('./pubkey');\nvar pubKeyHash = require('./pubkeyhash');\nvar scriptHash = require('./scripthash');\nvar witnessPubKeyHash = require('./witnesspubkeyhash');\nvar witnessScriptHash = require('./witnessscripthash');\nvar witnessCommitment = require('./witnesscommitment');\nvar smartTransaction = require('./smarttransaction');\nvar types = {\n  MULTISIG: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment',\n  SMART_TRANSACTION: 'smarttransaction'\n};\nfunction classifyOutput(script) {\n  if (witnessPubKeyHash.output.check(script)) return types.P2WPKH;\n  if (witnessScriptHash.output.check(script)) return types.P2WSH;\n  if (pubKeyHash.output.check(script)) return types.P2PKH;\n  if (scriptHash.output.check(script)) return types.P2SH;\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script);\n  if (smartTransaction.output.check(chunks)) return types.SMART_TRANSACTION;\n  if (multisig.output.check(chunks)) return types.MULTISIG;\n  if (pubKey.output.check(chunks)) return types.P2PK;\n  if (witnessCommitment.output.check(chunks)) return types.WITNESS_COMMITMENT;\n  if (nullData.output.check(chunks)) return types.NULLDATA;\n  return types.NONSTANDARD;\n}\nfunction classifyInput(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script);\n  if (pubKeyHash.input.check(chunks)) return types.P2PKH;\n  if (scriptHash.input.check(chunks, allowIncomplete)) return types.P2SH;\n  if (multisig.input.check(chunks, allowIncomplete)) return types.MULTISIG;\n  if (smartTransaction.input.check(chunks)) return types.SMART_TRANSACTION;\n  if (pubKey.input.check(chunks)) return types.P2PK;\n  return types.NONSTANDARD;\n}\nfunction classifyWitness(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script);\n  if (witnessPubKeyHash.input.check(chunks)) return types.P2WPKH;\n  if (witnessScriptHash.input.check(chunks, allowIncomplete)) return types.P2WSH;\n  return types.NONSTANDARD;\n}\nmodule.exports = {\n  classifyInput: classifyInput,\n  classifyOutput: classifyOutput,\n  classifyWitness: classifyWitness,\n  multisig: multisig,\n  nullData: nullData,\n  pubKey: pubKey,\n  pubKeyHash: pubKeyHash,\n  scriptHash: scriptHash,\n  smartTransaction: smartTransaction,\n  witnessPubKeyHash: witnessPubKeyHash,\n  witnessScriptHash: witnessScriptHash,\n  witnessCommitment: witnessCommitment,\n  types: types\n};","map":{"version":3,"names":["decompile","require","multisig","nullData","pubKey","pubKeyHash","scriptHash","witnessPubKeyHash","witnessScriptHash","witnessCommitment","smartTransaction","types","MULTISIG","NONSTANDARD","NULLDATA","P2PK","P2PKH","P2SH","P2WPKH","P2WSH","WITNESS_COMMITMENT","SMART_TRANSACTION","classifyOutput","script","output","check","chunks","classifyInput","allowIncomplete","input","classifyWitness","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATIBridgeWebsite-main/node_modules/@bitgo/utxo-lib/dist/src/templates/index.js"],"sourcesContent":["var decompile = require('../script').decompile;\nvar multisig = require('./multisig');\nvar nullData = require('./nulldata');\nvar pubKey = require('./pubkey');\nvar pubKeyHash = require('./pubkeyhash');\nvar scriptHash = require('./scripthash');\nvar witnessPubKeyHash = require('./witnesspubkeyhash');\nvar witnessScriptHash = require('./witnessscripthash');\nvar witnessCommitment = require('./witnesscommitment');\nvar smartTransaction = require('./smarttransaction');\nvar types = {\n    MULTISIG: 'multisig',\n    NONSTANDARD: 'nonstandard',\n    NULLDATA: 'nulldata',\n    P2PK: 'pubkey',\n    P2PKH: 'pubkeyhash',\n    P2SH: 'scripthash',\n    P2WPKH: 'witnesspubkeyhash',\n    P2WSH: 'witnessscripthash',\n    WITNESS_COMMITMENT: 'witnesscommitment',\n    SMART_TRANSACTION: 'smarttransaction'\n};\nfunction classifyOutput(script) {\n    if (witnessPubKeyHash.output.check(script))\n        return types.P2WPKH;\n    if (witnessScriptHash.output.check(script))\n        return types.P2WSH;\n    if (pubKeyHash.output.check(script))\n        return types.P2PKH;\n    if (scriptHash.output.check(script))\n        return types.P2SH;\n    // XXX: optimization, below functions .decompile before use\n    var chunks = decompile(script);\n    if (smartTransaction.output.check(chunks))\n        return types.SMART_TRANSACTION;\n    if (multisig.output.check(chunks))\n        return types.MULTISIG;\n    if (pubKey.output.check(chunks))\n        return types.P2PK;\n    if (witnessCommitment.output.check(chunks))\n        return types.WITNESS_COMMITMENT;\n    if (nullData.output.check(chunks))\n        return types.NULLDATA;\n    return types.NONSTANDARD;\n}\nfunction classifyInput(script, allowIncomplete) {\n    // XXX: optimization, below functions .decompile before use\n    var chunks = decompile(script);\n    if (pubKeyHash.input.check(chunks))\n        return types.P2PKH;\n    if (scriptHash.input.check(chunks, allowIncomplete))\n        return types.P2SH;\n    if (multisig.input.check(chunks, allowIncomplete))\n        return types.MULTISIG;\n    if (smartTransaction.input.check(chunks))\n        return types.SMART_TRANSACTION;\n    if (pubKey.input.check(chunks))\n        return types.P2PK;\n    return types.NONSTANDARD;\n}\nfunction classifyWitness(script, allowIncomplete) {\n    // XXX: optimization, below functions .decompile before use\n    var chunks = decompile(script);\n    if (witnessPubKeyHash.input.check(chunks))\n        return types.P2WPKH;\n    if (witnessScriptHash.input.check(chunks, allowIncomplete))\n        return types.P2WSH;\n    return types.NONSTANDARD;\n}\nmodule.exports = {\n    classifyInput: classifyInput,\n    classifyOutput: classifyOutput,\n    classifyWitness: classifyWitness,\n    multisig: multisig,\n    nullData: nullData,\n    pubKey: pubKey,\n    pubKeyHash: pubKeyHash,\n    scriptHash: scriptHash,\n    smartTransaction: smartTransaction,\n    witnessPubKeyHash: witnessPubKeyHash,\n    witnessScriptHash: witnessScriptHash,\n    witnessCommitment: witnessCommitment,\n    types: types\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}