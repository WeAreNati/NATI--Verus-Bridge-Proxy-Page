{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.createOutputScript2of3 = exports.isScriptType2Of3 = exports.scriptTypes2Of3 = void 0;\n/**\n * @prettier\n */\nvar script = require(\"../script\");\nvar crypto = require(\"../crypto\");\nexports.scriptTypes2Of3 = ['p2sh', 'p2shP2wsh', 'p2wsh'];\nfunction isScriptType2Of3(t) {\n  return exports.scriptTypes2Of3.includes(t);\n}\nexports.isScriptType2Of3 = isScriptType2Of3;\n/**\n * Return scripts for 2-of-3 multisig output\n * @param pubkeys - the key array for multisig\n * @param scriptType\n * @returns {{redeemScript, witnessScript, address}}\n */\nfunction createOutputScript2of3(pubkeys, scriptType) {\n  if (pubkeys.length !== 3) {\n    throw new Error(\"must provide 3 pubkeys\");\n  }\n  pubkeys.forEach(function (key) {\n    if (key.length !== 33) {\n      throw new Error(\"Unexpected key length \" + key.length + \". Must use compressed keys.\");\n    }\n  });\n  var script2of3 = script.multisig.output.encode(2, pubkeys);\n  var p2wshOutputScript = script.witnessScriptHash.output.encode(crypto.sha256(script2of3));\n  var redeemScript;\n  var witnessScript;\n  switch (scriptType) {\n    case 'p2sh':\n      redeemScript = script2of3;\n      break;\n    case 'p2shP2wsh':\n      witnessScript = script2of3;\n      redeemScript = p2wshOutputScript;\n      break;\n    case 'p2wsh':\n      witnessScript = script2of3;\n      break;\n    default:\n      throw new Error(\"unknown multisig script type \" + scriptType);\n  }\n  var scriptPubKey;\n  if (scriptType === 'p2wsh') {\n    scriptPubKey = p2wshOutputScript;\n  } else {\n    var redeemScriptHash = crypto.hash160(redeemScript);\n    scriptPubKey = script.scriptHash.output.encode(redeemScriptHash);\n  }\n  return {\n    redeemScript: redeemScript,\n    witnessScript: witnessScript,\n    scriptPubKey: scriptPubKey\n  };\n}\nexports.createOutputScript2of3 = createOutputScript2of3;","map":{"version":3,"names":["exports","__esModule","createOutputScript2of3","isScriptType2Of3","scriptTypes2Of3","script","require","crypto","t","includes","pubkeys","scriptType","length","Error","forEach","key","script2of3","multisig","output","encode","p2wshOutputScript","witnessScriptHash","sha256","redeemScript","witnessScript","scriptPubKey","redeemScriptHash","hash160","scriptHash"],"sources":["/Users/oddfl3x/Code/varB/NATIBridgeWebsite-main/node_modules/@bitgo/utxo-lib/dist/src/bitgo/outputScripts.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.createOutputScript2of3 = exports.isScriptType2Of3 = exports.scriptTypes2Of3 = void 0;\n/**\n * @prettier\n */\nvar script = require(\"../script\");\nvar crypto = require(\"../crypto\");\nexports.scriptTypes2Of3 = ['p2sh', 'p2shP2wsh', 'p2wsh'];\nfunction isScriptType2Of3(t) {\n    return exports.scriptTypes2Of3.includes(t);\n}\nexports.isScriptType2Of3 = isScriptType2Of3;\n/**\n * Return scripts for 2-of-3 multisig output\n * @param pubkeys - the key array for multisig\n * @param scriptType\n * @returns {{redeemScript, witnessScript, address}}\n */\nfunction createOutputScript2of3(pubkeys, scriptType) {\n    if (pubkeys.length !== 3) {\n        throw new Error(\"must provide 3 pubkeys\");\n    }\n    pubkeys.forEach(function (key) {\n        if (key.length !== 33) {\n            throw new Error(\"Unexpected key length \" + key.length + \". Must use compressed keys.\");\n        }\n    });\n    var script2of3 = script.multisig.output.encode(2, pubkeys);\n    var p2wshOutputScript = script.witnessScriptHash.output.encode(crypto.sha256(script2of3));\n    var redeemScript;\n    var witnessScript;\n    switch (scriptType) {\n        case 'p2sh':\n            redeemScript = script2of3;\n            break;\n        case 'p2shP2wsh':\n            witnessScript = script2of3;\n            redeemScript = p2wshOutputScript;\n            break;\n        case 'p2wsh':\n            witnessScript = script2of3;\n            break;\n        default:\n            throw new Error(\"unknown multisig script type \" + scriptType);\n    }\n    var scriptPubKey;\n    if (scriptType === 'p2wsh') {\n        scriptPubKey = p2wshOutputScript;\n    }\n    else {\n        var redeemScriptHash = crypto.hash160(redeemScript);\n        scriptPubKey = script.scriptHash.output.encode(redeemScriptHash);\n    }\n    return { redeemScript: redeemScript, witnessScript: witnessScript, scriptPubKey: scriptPubKey };\n}\nexports.createOutputScript2of3 = createOutputScript2of3;\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,sBAAsB,GAAGF,OAAO,CAACG,gBAAgB,GAAGH,OAAO,CAACI,eAAe,GAAG,KAAK,CAAC;AAC5F;AACA;AACA;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;AACjCN,OAAO,CAACI,eAAe,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC;AACxD,SAASD,gBAAgBA,CAACK,CAAC,EAAE;EACzB,OAAOR,OAAO,CAACI,eAAe,CAACK,QAAQ,CAACD,CAAC,CAAC;AAC9C;AACAR,OAAO,CAACG,gBAAgB,GAAGA,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,sBAAsBA,CAACQ,OAAO,EAAEC,UAAU,EAAE;EACjD,IAAID,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7C;EACAH,OAAO,CAACI,OAAO,CAAC,UAAUC,GAAG,EAAE;IAC3B,IAAIA,GAAG,CAACH,MAAM,KAAK,EAAE,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,GAAGE,GAAG,CAACH,MAAM,GAAG,6BAA6B,CAAC;IAC1F;EACJ,CAAC,CAAC;EACF,IAAII,UAAU,GAAGX,MAAM,CAACY,QAAQ,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAET,OAAO,CAAC;EAC1D,IAAIU,iBAAiB,GAAGf,MAAM,CAACgB,iBAAiB,CAACH,MAAM,CAACC,MAAM,CAACZ,MAAM,CAACe,MAAM,CAACN,UAAU,CAAC,CAAC;EACzF,IAAIO,YAAY;EAChB,IAAIC,aAAa;EACjB,QAAQb,UAAU;IACd,KAAK,MAAM;MACPY,YAAY,GAAGP,UAAU;MACzB;IACJ,KAAK,WAAW;MACZQ,aAAa,GAAGR,UAAU;MAC1BO,YAAY,GAAGH,iBAAiB;MAChC;IACJ,KAAK,OAAO;MACRI,aAAa,GAAGR,UAAU;MAC1B;IACJ;MACI,MAAM,IAAIH,KAAK,CAAC,+BAA+B,GAAGF,UAAU,CAAC;EACrE;EACA,IAAIc,YAAY;EAChB,IAAId,UAAU,KAAK,OAAO,EAAE;IACxBc,YAAY,GAAGL,iBAAiB;EACpC,CAAC,MACI;IACD,IAAIM,gBAAgB,GAAGnB,MAAM,CAACoB,OAAO,CAACJ,YAAY,CAAC;IACnDE,YAAY,GAAGpB,MAAM,CAACuB,UAAU,CAACV,MAAM,CAACC,MAAM,CAACO,gBAAgB,CAAC;EACpE;EACA,OAAO;IAAEH,YAAY,EAAEA,YAAY;IAAEC,aAAa,EAAEA,aAAa;IAAEC,YAAY,EAAEA;EAAa,CAAC;AACnG;AACAzB,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script"}