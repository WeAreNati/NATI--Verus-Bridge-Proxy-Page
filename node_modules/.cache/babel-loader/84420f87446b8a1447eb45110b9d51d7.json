{"ast":null,"code":"var typeforce = require('typeforce');\nvar UINT31_MAX = Math.pow(2, 31) - 1;\nfunction UInt31(value) {\n  return typeforce.UInt32(value) && value <= UINT31_MAX;\n}\nfunction BIP32Path(value) {\n  return typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/);\n}\nBIP32Path.toJSON = function () {\n  return 'BIP32 derivation path';\n};\nvar SATOSHI_MAX = 21 * 1e14;\nfunction Satoshi(value) {\n  return typeforce.UInt53(value) && value <= SATOSHI_MAX;\n}\n// external dependent types\nvar BigInt = typeforce.quacksLike('BigInteger');\nvar ECPoint = typeforce.quacksLike('Point');\n// exposed, external API\nvar ECSignature = typeforce.compile({\n  r: BigInt,\n  s: BigInt\n});\nvar networkVersion = typeforce.oneOf(typeforce.UInt8, typeforce.UInt16);\nvar Network = typeforce.compile({\n  messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),\n  bip32: {\n    public: typeforce.UInt32,\n    private: typeforce.UInt32\n  },\n  pubKeyHash: networkVersion,\n  scriptHash: networkVersion,\n  wif: typeforce.UInt8\n});\n// extend typeforce types with ours\nvar types = {\n  BigInt: BigInt,\n  BIP32Path: BIP32Path,\n  Buffer256bit: typeforce.BufferN(32),\n  ECPoint: ECPoint,\n  ECSignature: ECSignature,\n  Hash160bit: typeforce.BufferN(20),\n  Hash256bit: typeforce.BufferN(32),\n  Network: Network,\n  Satoshi: Satoshi,\n  UInt31: UInt31,\n  NetworkVersion: networkVersion\n};\nfor (var typeName in typeforce) {\n  types[typeName] = typeforce[typeName];\n}\nmodule.exports = types;","map":{"version":3,"names":["typeforce","require","UINT31_MAX","Math","pow","UInt31","value","UInt32","BIP32Path","String","match","toJSON","SATOSHI_MAX","Satoshi","UInt53","BigInt","quacksLike","ECPoint","ECSignature","compile","r","s","networkVersion","oneOf","UInt8","UInt16","Network","messagePrefix","Buffer","bip32","public","private","pubKeyHash","scriptHash","wif","types","Buffer256bit","BufferN","Hash160bit","Hash256bit","NetworkVersion","typeName","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/@bitgo/utxo-lib/dist/src/types.js"],"sourcesContent":["var typeforce = require('typeforce');\nvar UINT31_MAX = Math.pow(2, 31) - 1;\nfunction UInt31(value) {\n    return typeforce.UInt32(value) && value <= UINT31_MAX;\n}\nfunction BIP32Path(value) {\n    return typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/);\n}\nBIP32Path.toJSON = function () { return 'BIP32 derivation path'; };\nvar SATOSHI_MAX = 21 * 1e14;\nfunction Satoshi(value) {\n    return typeforce.UInt53(value) && value <= SATOSHI_MAX;\n}\n// external dependent types\nvar BigInt = typeforce.quacksLike('BigInteger');\nvar ECPoint = typeforce.quacksLike('Point');\n// exposed, external API\nvar ECSignature = typeforce.compile({ r: BigInt, s: BigInt });\nvar networkVersion = typeforce.oneOf(typeforce.UInt8, typeforce.UInt16);\nvar Network = typeforce.compile({\n    messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),\n    bip32: {\n        public: typeforce.UInt32,\n        private: typeforce.UInt32\n    },\n    pubKeyHash: networkVersion,\n    scriptHash: networkVersion,\n    wif: typeforce.UInt8\n});\n// extend typeforce types with ours\nvar types = {\n    BigInt: BigInt,\n    BIP32Path: BIP32Path,\n    Buffer256bit: typeforce.BufferN(32),\n    ECPoint: ECPoint,\n    ECSignature: ECSignature,\n    Hash160bit: typeforce.BufferN(20),\n    Hash256bit: typeforce.BufferN(32),\n    Network: Network,\n    Satoshi: Satoshi,\n    UInt31: UInt31,\n    NetworkVersion: networkVersion\n};\nfor (var typeName in typeforce) {\n    types[typeName] = typeforce[typeName];\n}\nmodule.exports = types;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;AACpC,SAASC,MAAMA,CAACC,KAAK,EAAE;EACnB,OAAON,SAAS,CAACO,MAAM,CAACD,KAAK,CAAC,IAAIA,KAAK,IAAIJ,UAAU;AACzD;AACA,SAASM,SAASA,CAACF,KAAK,EAAE;EACtB,OAAON,SAAS,CAACS,MAAM,CAACH,KAAK,CAAC,IAAIA,KAAK,CAACI,KAAK,CAAC,yBAAyB,CAAC;AAC5E;AACAF,SAAS,CAACG,MAAM,GAAG,YAAY;EAAE,OAAO,uBAAuB;AAAE,CAAC;AAClE,IAAIC,WAAW,GAAG,EAAE,GAAG,IAAI;AAC3B,SAASC,OAAOA,CAACP,KAAK,EAAE;EACpB,OAAON,SAAS,CAACc,MAAM,CAACR,KAAK,CAAC,IAAIA,KAAK,IAAIM,WAAW;AAC1D;AACA;AACA,IAAIG,MAAM,GAAGf,SAAS,CAACgB,UAAU,CAAC,YAAY,CAAC;AAC/C,IAAIC,OAAO,GAAGjB,SAAS,CAACgB,UAAU,CAAC,OAAO,CAAC;AAC3C;AACA,IAAIE,WAAW,GAAGlB,SAAS,CAACmB,OAAO,CAAC;EAAEC,CAAC,EAAEL,MAAM;EAAEM,CAAC,EAAEN;AAAO,CAAC,CAAC;AAC7D,IAAIO,cAAc,GAAGtB,SAAS,CAACuB,KAAK,CAACvB,SAAS,CAACwB,KAAK,EAAExB,SAAS,CAACyB,MAAM,CAAC;AACvE,IAAIC,OAAO,GAAG1B,SAAS,CAACmB,OAAO,CAAC;EAC5BQ,aAAa,EAAE3B,SAAS,CAACuB,KAAK,CAACvB,SAAS,CAAC4B,MAAM,EAAE5B,SAAS,CAACS,MAAM,CAAC;EAClEoB,KAAK,EAAE;IACHC,MAAM,EAAE9B,SAAS,CAACO,MAAM;IACxBwB,OAAO,EAAE/B,SAAS,CAACO;EACvB,CAAC;EACDyB,UAAU,EAAEV,cAAc;EAC1BW,UAAU,EAAEX,cAAc;EAC1BY,GAAG,EAAElC,SAAS,CAACwB;AACnB,CAAC,CAAC;AACF;AACA,IAAIW,KAAK,GAAG;EACRpB,MAAM,EAAEA,MAAM;EACdP,SAAS,EAAEA,SAAS;EACpB4B,YAAY,EAAEpC,SAAS,CAACqC,OAAO,CAAC,EAAE,CAAC;EACnCpB,OAAO,EAAEA,OAAO;EAChBC,WAAW,EAAEA,WAAW;EACxBoB,UAAU,EAAEtC,SAAS,CAACqC,OAAO,CAAC,EAAE,CAAC;EACjCE,UAAU,EAAEvC,SAAS,CAACqC,OAAO,CAAC,EAAE,CAAC;EACjCX,OAAO,EAAEA,OAAO;EAChBb,OAAO,EAAEA,OAAO;EAChBR,MAAM,EAAEA,MAAM;EACdmC,cAAc,EAAElB;AACpB,CAAC;AACD,KAAK,IAAImB,QAAQ,IAAIzC,SAAS,EAAE;EAC5BmC,KAAK,CAACM,QAAQ,CAAC,GAAGzC,SAAS,CAACyC,QAAQ,CAAC;AACzC;AACAC,MAAM,CAACC,OAAO,GAAGR,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script"}