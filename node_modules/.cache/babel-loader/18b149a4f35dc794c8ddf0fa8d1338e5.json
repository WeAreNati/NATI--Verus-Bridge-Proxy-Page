{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { injectedConnector } from '../connectors/injectedConnector';\nconst useEagerConnect = () => {\n  _s();\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injectedConnector.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injectedConnector, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n};\n_s(useEagerConnect, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});\nexport default useEagerConnect;","map":{"version":3,"names":["useEffect","useState","useWeb3React","injectedConnector","useEagerConnect","_s","activate","active","tried","setTried","isAuthorized","then","undefined","catch"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/src/hooks/useEagerConnect.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useWeb3React } from '@web3-react/core';\n\nimport { injectedConnector } from '../connectors/injectedConnector';\n\nconst useEagerConnect = () => {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injectedConnector.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injectedConnector, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n};\n\nexport default useEagerConnect;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,YAAY,QAAQ,kBAAkB;AAE/C,SAASC,iBAAiB,QAAQ,iCAAiC;AAEnE,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAGL,YAAY,CAAC,CAAC;EAE3C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACdG,iBAAiB,CAACO,YAAY,CAAC,CAAC,CAACC,IAAI,CAAED,YAAY,IAAK;MACtD,IAAIA,YAAY,EAAE;QAChBJ,QAAQ,CAACH,iBAAiB,EAAES,SAAS,EAAE,IAAI,CAAC,CAACC,KAAK,CAAC,MAAM;UACvDJ,QAAQ,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLA,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACAN,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,KAAK,IAAID,MAAM,EAAE;MACpBE,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF,CAAC,EAAE,CAACD,KAAK,EAAED,MAAM,CAAC,CAAC;EAEnB,OAAOC,KAAK;AACd,CAAC;AAACH,EAAA,CAzBID,eAAe;EAAA,QACUF,YAAY;AAAA;AA0B3C,eAAeE,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}