{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Response = void 0;\nconst Decision_1 = require(\"./Decision\");\nconst __1 = require(\"../\");\nconst keys_1 = require(\"../keys\");\nconst Hash160_1 = require(\"./Hash160\");\nconst bufferutils_1 = require(\"../../utils/bufferutils\");\nconst vdxf_1 = require(\"../../constants/vdxf\");\nconst address_1 = require(\"../../utils/address\");\nconst createHash = require(\"create-hash\");\nclass Response extends __1.VDXFObject {\n  constructor() {\n    let response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      system_id: \"\",\n      signing_id: \"\",\n      decision: new Decision_1.Decision()\n    };\n    let vdxfkey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : __1.LOGIN_CONSENT_RESPONSE_VDXF_KEY.vdxfid;\n    super(vdxfkey);\n    this.system_id = response.system_id;\n    this.signing_id = response.signing_id;\n    this.decision = new Decision_1.Decision(response.decision);\n    if (response.signature) {\n      this.signature = new __1.VerusIDSignature(response.signature, keys_1.LOGIN_CONSENT_RESPONSE_SIG_VDXF_KEY);\n    }\n  }\n  getDecisionHash(signedBlockheight) {\n    let signatureVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var heightBufferWriter = new bufferutils_1.default.BufferWriter(Buffer.allocUnsafe(4));\n    heightBufferWriter.writeUInt32(signedBlockheight);\n    if (signatureVersion === 1) {\n      return createHash(\"sha256\").update(vdxf_1.VERUS_DATA_SIGNATURE_PREFIX).update((0, address_1.fromBase58Check)(this.system_id).hash).update(heightBufferWriter.buffer).update((0, address_1.fromBase58Check)(this.signing_id).hash).update(this.decision.toSha256()).digest();\n    } else {\n      return createHash(\"sha256\").update((0, address_1.fromBase58Check)(this.system_id).hash).update(heightBufferWriter.buffer).update((0, address_1.fromBase58Check)(this.signing_id).hash).update(vdxf_1.VERUS_DATA_SIGNATURE_PREFIX).update(this.decision.toSha256()).digest();\n    }\n  }\n  dataByteLength() {\n    let length = 0;\n    const _system_id = Hash160_1.Hash160.fromAddress(this.system_id);\n    const _signing_id = Hash160_1.Hash160.fromAddress(this.signing_id);\n    const _signature = this.signature ? this.signature : new __1.VerusIDSignature({\n      signature: \"\"\n    }, keys_1.LOGIN_CONSENT_RESPONSE_SIG_VDXF_KEY);\n    length += _system_id.byteLength();\n    length += _signing_id.byteLength();\n    length += _signature.byteLength();\n    length += this.decision.byteLength();\n    return length;\n  }\n  toDataBuffer() {\n    const writer = new bufferutils_1.default.BufferWriter(Buffer.alloc(this.dataByteLength()));\n    const _system_id = Hash160_1.Hash160.fromAddress(this.system_id);\n    const _signing_id = Hash160_1.Hash160.fromAddress(this.signing_id);\n    const _signature = this.signature ? this.signature : new __1.VerusIDSignature({\n      signature: \"\"\n    }, keys_1.LOGIN_CONSENT_RESPONSE_SIG_VDXF_KEY);\n    writer.writeSlice(_system_id.toBuffer());\n    writer.writeSlice(_signing_id.toBuffer());\n    writer.writeSlice(_signature.toBuffer());\n    writer.writeSlice(this.decision.toBuffer());\n    return writer.buffer;\n  }\n  fromDataBuffer(buffer, offset) {\n    const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n    const reqLength = reader.readCompactSize();\n    if (reqLength == 0) {\n      throw new Error(\"Cannot create request from empty buffer\");\n    } else {\n      this.system_id = (0, address_1.toBase58Check)(reader.readSlice(vdxf_1.HASH160_BYTE_LENGTH), vdxf_1.I_ADDR_VERSION);\n      this.signing_id = (0, address_1.toBase58Check)(reader.readSlice(vdxf_1.HASH160_BYTE_LENGTH), vdxf_1.I_ADDR_VERSION);\n      const _sig = new __1.VerusIDSignature();\n      reader.offset = _sig.fromBuffer(reader.buffer, reader.offset);\n      this.signature = _sig;\n      if (this.vdxfkey === __1.LOGIN_CONSENT_RESPONSE_VDXF_KEY.vdxfid) {\n        const _decision = new Decision_1.Decision();\n        reader.offset = _decision.fromBuffer(reader.buffer, reader.offset);\n        this.decision = _decision;\n      }\n    }\n    return reader.offset;\n  }\n  toJson() {\n    return {\n      vdxfkey: this.vdxfkey,\n      system_id: this.system_id,\n      signature: this.signature,\n      signing_id: this.signing_id,\n      decision: this.decision.toJson()\n    };\n  }\n}\nexports.Response = Response;","map":{"version":3,"names":["Object","defineProperty","exports","value","Response","Decision_1","require","__1","keys_1","Hash160_1","bufferutils_1","vdxf_1","address_1","createHash","VDXFObject","constructor","response","arguments","length","undefined","system_id","signing_id","decision","Decision","vdxfkey","LOGIN_CONSENT_RESPONSE_VDXF_KEY","vdxfid","signature","VerusIDSignature","LOGIN_CONSENT_RESPONSE_SIG_VDXF_KEY","getDecisionHash","signedBlockheight","signatureVersion","heightBufferWriter","default","BufferWriter","Buffer","allocUnsafe","writeUInt32","update","VERUS_DATA_SIGNATURE_PREFIX","fromBase58Check","hash","buffer","toSha256","digest","dataByteLength","_system_id","Hash160","fromAddress","_signing_id","_signature","byteLength","toDataBuffer","writer","alloc","writeSlice","toBuffer","fromDataBuffer","offset","reader","BufferReader","reqLength","readCompactSize","Error","toBase58Check","readSlice","HASH160_BYTE_LENGTH","I_ADDR_VERSION","_sig","fromBuffer","_decision","toJson"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/node_modules/verus-typescript-primitives/dist/vdxf/classes/Response.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Response = void 0;\nconst Decision_1 = require(\"./Decision\");\nconst __1 = require(\"../\");\nconst keys_1 = require(\"../keys\");\nconst Hash160_1 = require(\"./Hash160\");\nconst bufferutils_1 = require(\"../../utils/bufferutils\");\nconst vdxf_1 = require(\"../../constants/vdxf\");\nconst address_1 = require(\"../../utils/address\");\nconst createHash = require(\"create-hash\");\nclass Response extends __1.VDXFObject {\n    constructor(response = {\n        system_id: \"\",\n        signing_id: \"\",\n        decision: new Decision_1.Decision(),\n    }, vdxfkey = __1.LOGIN_CONSENT_RESPONSE_VDXF_KEY.vdxfid) {\n        super(vdxfkey);\n        this.system_id = response.system_id;\n        this.signing_id = response.signing_id;\n        this.decision = new Decision_1.Decision(response.decision);\n        if (response.signature) {\n            this.signature = new __1.VerusIDSignature(response.signature, keys_1.LOGIN_CONSENT_RESPONSE_SIG_VDXF_KEY);\n        }\n    }\n    getDecisionHash(signedBlockheight, signatureVersion = 2) {\n        var heightBufferWriter = new bufferutils_1.default.BufferWriter(Buffer.allocUnsafe(4));\n        heightBufferWriter.writeUInt32(signedBlockheight);\n        if (signatureVersion === 1) {\n            return createHash(\"sha256\")\n                .update(vdxf_1.VERUS_DATA_SIGNATURE_PREFIX)\n                .update((0, address_1.fromBase58Check)(this.system_id).hash)\n                .update(heightBufferWriter.buffer)\n                .update((0, address_1.fromBase58Check)(this.signing_id).hash)\n                .update(this.decision.toSha256())\n                .digest();\n        }\n        else {\n            return createHash(\"sha256\")\n                .update((0, address_1.fromBase58Check)(this.system_id).hash)\n                .update(heightBufferWriter.buffer)\n                .update((0, address_1.fromBase58Check)(this.signing_id).hash)\n                .update(vdxf_1.VERUS_DATA_SIGNATURE_PREFIX)\n                .update(this.decision.toSha256())\n                .digest();\n        }\n    }\n    dataByteLength() {\n        let length = 0;\n        const _system_id = Hash160_1.Hash160.fromAddress(this.system_id);\n        const _signing_id = Hash160_1.Hash160.fromAddress(this.signing_id);\n        const _signature = this.signature\n            ? this.signature\n            : new __1.VerusIDSignature({ signature: \"\" }, keys_1.LOGIN_CONSENT_RESPONSE_SIG_VDXF_KEY);\n        length += _system_id.byteLength();\n        length += _signing_id.byteLength();\n        length += _signature.byteLength();\n        length += this.decision.byteLength();\n        return length;\n    }\n    toDataBuffer() {\n        const writer = new bufferutils_1.default.BufferWriter(Buffer.alloc(this.dataByteLength()));\n        const _system_id = Hash160_1.Hash160.fromAddress(this.system_id);\n        const _signing_id = Hash160_1.Hash160.fromAddress(this.signing_id);\n        const _signature = this.signature\n            ? this.signature\n            : new __1.VerusIDSignature({ signature: \"\" }, keys_1.LOGIN_CONSENT_RESPONSE_SIG_VDXF_KEY);\n        writer.writeSlice(_system_id.toBuffer());\n        writer.writeSlice(_signing_id.toBuffer());\n        writer.writeSlice(_signature.toBuffer());\n        writer.writeSlice(this.decision.toBuffer());\n        return writer.buffer;\n    }\n    fromDataBuffer(buffer, offset) {\n        const reader = new bufferutils_1.default.BufferReader(buffer, offset);\n        const reqLength = reader.readCompactSize();\n        if (reqLength == 0) {\n            throw new Error(\"Cannot create request from empty buffer\");\n        }\n        else {\n            this.system_id = (0, address_1.toBase58Check)(reader.readSlice(vdxf_1.HASH160_BYTE_LENGTH), vdxf_1.I_ADDR_VERSION);\n            this.signing_id = (0, address_1.toBase58Check)(reader.readSlice(vdxf_1.HASH160_BYTE_LENGTH), vdxf_1.I_ADDR_VERSION);\n            const _sig = new __1.VerusIDSignature();\n            reader.offset = _sig.fromBuffer(reader.buffer, reader.offset);\n            this.signature = _sig;\n            if (this.vdxfkey === __1.LOGIN_CONSENT_RESPONSE_VDXF_KEY.vdxfid) {\n                const _decision = new Decision_1.Decision();\n                reader.offset = _decision.fromBuffer(reader.buffer, reader.offset);\n                this.decision = _decision;\n            }\n        }\n        return reader.offset;\n    }\n    toJson() {\n        return {\n            vdxfkey: this.vdxfkey,\n            system_id: this.system_id,\n            signature: this.signature,\n            signing_id: this.signing_id,\n            decision: this.decision.toJson(),\n        };\n    }\n}\nexports.Response = Response;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMG,SAAS,GAAGH,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMI,aAAa,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAMK,MAAM,GAAGL,OAAO,CAAC,sBAAsB,CAAC;AAC9C,MAAMM,SAAS,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMO,UAAU,GAAGP,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMF,QAAQ,SAASG,GAAG,CAACO,UAAU,CAAC;EAClCC,WAAWA,CAAA,EAI8C;IAAA,IAJ7CC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;MACnBG,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,IAAIjB,UAAU,CAACkB,QAAQ,CAAC;IACtC,CAAC;IAAA,IAAEC,OAAO,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,GAAG,CAACkB,+BAA+B,CAACC,MAAM;IACnD,KAAK,CAACF,OAAO,CAAC;IACd,IAAI,CAACJ,SAAS,GAAGJ,QAAQ,CAACI,SAAS;IACnC,IAAI,CAACC,UAAU,GAAGL,QAAQ,CAACK,UAAU;IACrC,IAAI,CAACC,QAAQ,GAAG,IAAIjB,UAAU,CAACkB,QAAQ,CAACP,QAAQ,CAACM,QAAQ,CAAC;IAC1D,IAAIN,QAAQ,CAACW,SAAS,EAAE;MACpB,IAAI,CAACA,SAAS,GAAG,IAAIpB,GAAG,CAACqB,gBAAgB,CAACZ,QAAQ,CAACW,SAAS,EAAEnB,MAAM,CAACqB,mCAAmC,CAAC;IAC7G;EACJ;EACAC,eAAeA,CAACC,iBAAiB,EAAwB;IAAA,IAAtBC,gBAAgB,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IACnD,IAAIgB,kBAAkB,GAAG,IAAIvB,aAAa,CAACwB,OAAO,CAACC,YAAY,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;IACtFJ,kBAAkB,CAACK,WAAW,CAACP,iBAAiB,CAAC;IACjD,IAAIC,gBAAgB,KAAK,CAAC,EAAE;MACxB,OAAOnB,UAAU,CAAC,QAAQ,CAAC,CACtB0B,MAAM,CAAC5B,MAAM,CAAC6B,2BAA2B,CAAC,CAC1CD,MAAM,CAAC,CAAC,CAAC,EAAE3B,SAAS,CAAC6B,eAAe,EAAE,IAAI,CAACrB,SAAS,CAAC,CAACsB,IAAI,CAAC,CAC3DH,MAAM,CAACN,kBAAkB,CAACU,MAAM,CAAC,CACjCJ,MAAM,CAAC,CAAC,CAAC,EAAE3B,SAAS,CAAC6B,eAAe,EAAE,IAAI,CAACpB,UAAU,CAAC,CAACqB,IAAI,CAAC,CAC5DH,MAAM,CAAC,IAAI,CAACjB,QAAQ,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAChCC,MAAM,CAAC,CAAC;IACjB,CAAC,MACI;MACD,OAAOhC,UAAU,CAAC,QAAQ,CAAC,CACtB0B,MAAM,CAAC,CAAC,CAAC,EAAE3B,SAAS,CAAC6B,eAAe,EAAE,IAAI,CAACrB,SAAS,CAAC,CAACsB,IAAI,CAAC,CAC3DH,MAAM,CAACN,kBAAkB,CAACU,MAAM,CAAC,CACjCJ,MAAM,CAAC,CAAC,CAAC,EAAE3B,SAAS,CAAC6B,eAAe,EAAE,IAAI,CAACpB,UAAU,CAAC,CAACqB,IAAI,CAAC,CAC5DH,MAAM,CAAC5B,MAAM,CAAC6B,2BAA2B,CAAC,CAC1CD,MAAM,CAAC,IAAI,CAACjB,QAAQ,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAChCC,MAAM,CAAC,CAAC;IACjB;EACJ;EACAC,cAAcA,CAAA,EAAG;IACb,IAAI5B,MAAM,GAAG,CAAC;IACd,MAAM6B,UAAU,GAAGtC,SAAS,CAACuC,OAAO,CAACC,WAAW,CAAC,IAAI,CAAC7B,SAAS,CAAC;IAChE,MAAM8B,WAAW,GAAGzC,SAAS,CAACuC,OAAO,CAACC,WAAW,CAAC,IAAI,CAAC5B,UAAU,CAAC;IAClE,MAAM8B,UAAU,GAAG,IAAI,CAACxB,SAAS,GAC3B,IAAI,CAACA,SAAS,GACd,IAAIpB,GAAG,CAACqB,gBAAgB,CAAC;MAAED,SAAS,EAAE;IAAG,CAAC,EAAEnB,MAAM,CAACqB,mCAAmC,CAAC;IAC7FX,MAAM,IAAI6B,UAAU,CAACK,UAAU,CAAC,CAAC;IACjClC,MAAM,IAAIgC,WAAW,CAACE,UAAU,CAAC,CAAC;IAClClC,MAAM,IAAIiC,UAAU,CAACC,UAAU,CAAC,CAAC;IACjClC,MAAM,IAAI,IAAI,CAACI,QAAQ,CAAC8B,UAAU,CAAC,CAAC;IACpC,OAAOlC,MAAM;EACjB;EACAmC,YAAYA,CAAA,EAAG;IACX,MAAMC,MAAM,GAAG,IAAI5C,aAAa,CAACwB,OAAO,CAACC,YAAY,CAACC,MAAM,CAACmB,KAAK,CAAC,IAAI,CAACT,cAAc,CAAC,CAAC,CAAC,CAAC;IAC1F,MAAMC,UAAU,GAAGtC,SAAS,CAACuC,OAAO,CAACC,WAAW,CAAC,IAAI,CAAC7B,SAAS,CAAC;IAChE,MAAM8B,WAAW,GAAGzC,SAAS,CAACuC,OAAO,CAACC,WAAW,CAAC,IAAI,CAAC5B,UAAU,CAAC;IAClE,MAAM8B,UAAU,GAAG,IAAI,CAACxB,SAAS,GAC3B,IAAI,CAACA,SAAS,GACd,IAAIpB,GAAG,CAACqB,gBAAgB,CAAC;MAAED,SAAS,EAAE;IAAG,CAAC,EAAEnB,MAAM,CAACqB,mCAAmC,CAAC;IAC7FyB,MAAM,CAACE,UAAU,CAACT,UAAU,CAACU,QAAQ,CAAC,CAAC,CAAC;IACxCH,MAAM,CAACE,UAAU,CAACN,WAAW,CAACO,QAAQ,CAAC,CAAC,CAAC;IACzCH,MAAM,CAACE,UAAU,CAACL,UAAU,CAACM,QAAQ,CAAC,CAAC,CAAC;IACxCH,MAAM,CAACE,UAAU,CAAC,IAAI,CAAClC,QAAQ,CAACmC,QAAQ,CAAC,CAAC,CAAC;IAC3C,OAAOH,MAAM,CAACX,MAAM;EACxB;EACAe,cAAcA,CAACf,MAAM,EAAEgB,MAAM,EAAE;IAC3B,MAAMC,MAAM,GAAG,IAAIlD,aAAa,CAACwB,OAAO,CAAC2B,YAAY,CAAClB,MAAM,EAAEgB,MAAM,CAAC;IACrE,MAAMG,SAAS,GAAGF,MAAM,CAACG,eAAe,CAAC,CAAC;IAC1C,IAAID,SAAS,IAAI,CAAC,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,yCAAyC,CAAC;IAC9D,CAAC,MACI;MACD,IAAI,CAAC5C,SAAS,GAAG,CAAC,CAAC,EAAER,SAAS,CAACqD,aAAa,EAAEL,MAAM,CAACM,SAAS,CAACvD,MAAM,CAACwD,mBAAmB,CAAC,EAAExD,MAAM,CAACyD,cAAc,CAAC;MAClH,IAAI,CAAC/C,UAAU,GAAG,CAAC,CAAC,EAAET,SAAS,CAACqD,aAAa,EAAEL,MAAM,CAACM,SAAS,CAACvD,MAAM,CAACwD,mBAAmB,CAAC,EAAExD,MAAM,CAACyD,cAAc,CAAC;MACnH,MAAMC,IAAI,GAAG,IAAI9D,GAAG,CAACqB,gBAAgB,CAAC,CAAC;MACvCgC,MAAM,CAACD,MAAM,GAAGU,IAAI,CAACC,UAAU,CAACV,MAAM,CAACjB,MAAM,EAAEiB,MAAM,CAACD,MAAM,CAAC;MAC7D,IAAI,CAAChC,SAAS,GAAG0C,IAAI;MACrB,IAAI,IAAI,CAAC7C,OAAO,KAAKjB,GAAG,CAACkB,+BAA+B,CAACC,MAAM,EAAE;QAC7D,MAAM6C,SAAS,GAAG,IAAIlE,UAAU,CAACkB,QAAQ,CAAC,CAAC;QAC3CqC,MAAM,CAACD,MAAM,GAAGY,SAAS,CAACD,UAAU,CAACV,MAAM,CAACjB,MAAM,EAAEiB,MAAM,CAACD,MAAM,CAAC;QAClE,IAAI,CAACrC,QAAQ,GAAGiD,SAAS;MAC7B;IACJ;IACA,OAAOX,MAAM,CAACD,MAAM;EACxB;EACAa,MAAMA,CAAA,EAAG;IACL,OAAO;MACHhD,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBJ,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBO,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBN,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACkD,MAAM,CAAC;IACnC,CAAC;EACL;AACJ;AACAtE,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}