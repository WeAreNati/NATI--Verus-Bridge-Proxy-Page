{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.createTransactionForNetwork = exports.createTransactionBuilderFromTransaction = exports.createTransactionBuilderForNetwork = exports.createTransactionFromHex = exports.createTransactionFromBuffer = void 0;\n/**\n * @prettier\n */\nvar networks = require(\"../networks\");\nvar coins_1 = require(\"../coins\");\nvar Transaction = require('../transaction');\nvar TransactionBuilder = require('../transaction_builder');\nfunction createTransactionFromBuffer(buf, network) {\n  switch (coins_1.getMainnet(network)) {\n    case networks.bitcoin:\n    case networks.bitcoincash:\n    case networks.bitcoinsv:\n    case networks.bitcoingold:\n    case networks.dash:\n    case networks.litecoin:\n    case networks.zcash:\n      return Transaction.fromBuffer(buf, network);\n  }\n  /* istanbul ignore next */\n  throw new Error(\"invalid network\");\n}\nexports.createTransactionFromBuffer = createTransactionFromBuffer;\nfunction createTransactionFromHex(hex, network) {\n  return createTransactionFromBuffer(Buffer.from(hex, 'hex'), network);\n}\nexports.createTransactionFromHex = createTransactionFromHex;\nfunction createTransactionBuilderForNetwork(network) {\n  switch (coins_1.getMainnet(network)) {\n    case networks.bitcoin:\n    case networks.bitcoincash:\n    case networks.bitcoinsv:\n    case networks.bitcoingold:\n    case networks.dash:\n    case networks.litecoin:\n      {\n        var txb = new TransactionBuilder(network);\n        switch (coins_1.getMainnet(network)) {\n          case networks.bitcoincash:\n          case networks.bitcoinsv:\n            txb.setVersion(2);\n        }\n        return txb;\n      }\n    case networks.zcash:\n      {\n        var txb = new TransactionBuilder(network);\n        txb.setVersion(4);\n        txb.setVersionGroupId(0x892f2085);\n        // Use \"Canopy\" consensus branch ID https://zips.z.cash/zip-0251\n        txb.setConsensusBranchId(0xc2d6d0b4);\n        return txb;\n      }\n  }\n  /* istanbul ignore next */\n  throw new Error(\"invalid network\");\n}\nexports.createTransactionBuilderForNetwork = createTransactionBuilderForNetwork;\nfunction createTransactionBuilderFromTransaction(tx) {\n  switch (coins_1.getMainnet(tx.network)) {\n    case networks.bitcoin:\n    case networks.bitcoincash:\n    case networks.bitcoinsv:\n    case networks.bitcoingold:\n    case networks.dash:\n    case networks.litecoin:\n    case networks.zcash:\n      return TransactionBuilder.fromTransaction(tx, tx.network);\n  }\n  /* istanbul ignore next */\n  throw new Error(\"invalid network\");\n}\nexports.createTransactionBuilderFromTransaction = createTransactionBuilderFromTransaction;\nfunction createTransactionForNetwork(network) {\n  switch (coins_1.getMainnet(network)) {\n    case networks.bitcoin:\n    case networks.bitcoincash:\n    case networks.bitcoinsv:\n    case networks.bitcoingold:\n    case networks.dash:\n    case networks.litecoin:\n    case networks.zcash:\n      return new Transaction(network);\n  }\n  /* istanbul ignore next */\n  throw new Error(\"invalid network\");\n}\nexports.createTransactionForNetwork = createTransactionForNetwork;","map":{"version":3,"names":["exports","__esModule","createTransactionForNetwork","createTransactionBuilderFromTransaction","createTransactionBuilderForNetwork","createTransactionFromHex","createTransactionFromBuffer","networks","require","coins_1","Transaction","TransactionBuilder","buf","network","getMainnet","bitcoin","bitcoincash","bitcoinsv","bitcoingold","dash","litecoin","zcash","fromBuffer","Error","hex","Buffer","from","txb","setVersion","setVersionGroupId","setConsensusBranchId","tx","fromTransaction"],"sources":["/Users/oddfl3x/Code/varB/NATIBridgeWebsite-main/node_modules/@bitgo/utxo-lib/dist/src/bitgo/transaction.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.createTransactionForNetwork = exports.createTransactionBuilderFromTransaction = exports.createTransactionBuilderForNetwork = exports.createTransactionFromHex = exports.createTransactionFromBuffer = void 0;\n/**\n * @prettier\n */\nvar networks = require(\"../networks\");\nvar coins_1 = require(\"../coins\");\nvar Transaction = require('../transaction');\nvar TransactionBuilder = require('../transaction_builder');\nfunction createTransactionFromBuffer(buf, network) {\n    switch (coins_1.getMainnet(network)) {\n        case networks.bitcoin:\n        case networks.bitcoincash:\n        case networks.bitcoinsv:\n        case networks.bitcoingold:\n        case networks.dash:\n        case networks.litecoin:\n        case networks.zcash:\n            return Transaction.fromBuffer(buf, network);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"invalid network\");\n}\nexports.createTransactionFromBuffer = createTransactionFromBuffer;\nfunction createTransactionFromHex(hex, network) {\n    return createTransactionFromBuffer(Buffer.from(hex, 'hex'), network);\n}\nexports.createTransactionFromHex = createTransactionFromHex;\nfunction createTransactionBuilderForNetwork(network) {\n    switch (coins_1.getMainnet(network)) {\n        case networks.bitcoin:\n        case networks.bitcoincash:\n        case networks.bitcoinsv:\n        case networks.bitcoingold:\n        case networks.dash:\n        case networks.litecoin: {\n            var txb = new TransactionBuilder(network);\n            switch (coins_1.getMainnet(network)) {\n                case networks.bitcoincash:\n                case networks.bitcoinsv:\n                    txb.setVersion(2);\n            }\n            return txb;\n        }\n        case networks.zcash: {\n            var txb = new TransactionBuilder(network);\n            txb.setVersion(4);\n            txb.setVersionGroupId(0x892f2085);\n            // Use \"Canopy\" consensus branch ID https://zips.z.cash/zip-0251\n            txb.setConsensusBranchId(0xc2d6d0b4);\n            return txb;\n        }\n    }\n    /* istanbul ignore next */\n    throw new Error(\"invalid network\");\n}\nexports.createTransactionBuilderForNetwork = createTransactionBuilderForNetwork;\nfunction createTransactionBuilderFromTransaction(tx) {\n    switch (coins_1.getMainnet(tx.network)) {\n        case networks.bitcoin:\n        case networks.bitcoincash:\n        case networks.bitcoinsv:\n        case networks.bitcoingold:\n        case networks.dash:\n        case networks.litecoin:\n        case networks.zcash:\n            return TransactionBuilder.fromTransaction(tx, tx.network);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"invalid network\");\n}\nexports.createTransactionBuilderFromTransaction = createTransactionBuilderFromTransaction;\nfunction createTransactionForNetwork(network) {\n    switch (coins_1.getMainnet(network)) {\n        case networks.bitcoin:\n        case networks.bitcoincash:\n        case networks.bitcoinsv:\n        case networks.bitcoingold:\n        case networks.dash:\n        case networks.litecoin:\n        case networks.zcash:\n            return new Transaction(network);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"invalid network\");\n}\nexports.createTransactionForNetwork = createTransactionForNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}