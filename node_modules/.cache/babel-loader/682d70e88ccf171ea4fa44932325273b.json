{"ast":null,"code":"// <scriptSig> {serialized scriptPubKey script}\nvar Buffer = require('safe-buffer').Buffer;\nvar bscript = require('../../script');\nvar typeforce = require('typeforce');\nvar p2ms = require('../multisig/');\nvar p2pk = require('../pubkey/');\nvar p2pkh = require('../pubkeyhash/');\nvar p2wpkho = require('../witnesspubkeyhash/output');\nvar p2wsho = require('../witnessscripthash/output');\nfunction check(script, allowIncomplete) {\n  var chunks = bscript.decompile(script);\n  if (chunks.length < 1) return false;\n  var lastChunk = chunks[chunks.length - 1];\n  if (!Buffer.isBuffer(lastChunk)) return false;\n  var scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)));\n  var redeemScriptChunks = bscript.decompile(lastChunk);\n  // is redeemScript a valid script?\n  if (redeemScriptChunks.length === 0) return false;\n  // is redeemScriptSig push only?\n  if (!bscript.isPushOnly(scriptSigChunks)) return false;\n  // is witness?\n  if (chunks.length === 1) {\n    return p2wsho.check(redeemScriptChunks) || p2wpkho.check(redeemScriptChunks);\n  }\n  // match types\n  if (p2pkh.input.check(scriptSigChunks) && p2pkh.output.check(redeemScriptChunks)) return true;\n  if (p2ms.input.check(scriptSigChunks, allowIncomplete) && p2ms.output.check(redeemScriptChunks)) return true;\n  if (p2pk.input.check(scriptSigChunks) && p2pk.output.check(redeemScriptChunks)) return true;\n  return false;\n}\ncheck.toJSON = function () {\n  return 'scriptHash input';\n};\nfunction encodeStack(redeemScriptStack, redeemScript) {\n  var serializedScriptPubKey = bscript.compile(redeemScript);\n  return [].concat(redeemScriptStack, serializedScriptPubKey);\n}\nfunction encode(redeemScriptSig, redeemScript) {\n  var redeemScriptStack = bscript.decompile(redeemScriptSig);\n  return bscript.compile(encodeStack(redeemScriptStack, redeemScript));\n}\nfunction decodeStack(stack) {\n  typeforce(check, stack);\n  return {\n    redeemScriptStack: stack.slice(0, -1),\n    redeemScript: stack[stack.length - 1]\n  };\n}\nfunction decode(buffer) {\n  var stack = bscript.decompile(buffer);\n  var result = decodeStack(stack);\n  result.redeemScriptSig = bscript.compile(result.redeemScriptStack);\n  delete result.redeemScriptStack;\n  return result;\n}\nmodule.exports = {\n  check: check,\n  decode: decode,\n  decodeStack: decodeStack,\n  encode: encode,\n  encodeStack: encodeStack\n};","map":{"version":3,"names":["Buffer","require","bscript","typeforce","p2ms","p2pk","p2pkh","p2wpkho","p2wsho","check","script","allowIncomplete","chunks","decompile","length","lastChunk","isBuffer","scriptSigChunks","compile","slice","redeemScriptChunks","isPushOnly","input","output","toJSON","encodeStack","redeemScriptStack","redeemScript","serializedScriptPubKey","concat","encode","redeemScriptSig","decodeStack","stack","decode","buffer","result","module","exports"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/node_modules/@bitgo/utxo-lib/dist/src/templates/scripthash/input.js"],"sourcesContent":["// <scriptSig> {serialized scriptPubKey script}\nvar Buffer = require('safe-buffer').Buffer;\nvar bscript = require('../../script');\nvar typeforce = require('typeforce');\nvar p2ms = require('../multisig/');\nvar p2pk = require('../pubkey/');\nvar p2pkh = require('../pubkeyhash/');\nvar p2wpkho = require('../witnesspubkeyhash/output');\nvar p2wsho = require('../witnessscripthash/output');\nfunction check(script, allowIncomplete) {\n    var chunks = bscript.decompile(script);\n    if (chunks.length < 1)\n        return false;\n    var lastChunk = chunks[chunks.length - 1];\n    if (!Buffer.isBuffer(lastChunk))\n        return false;\n    var scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)));\n    var redeemScriptChunks = bscript.decompile(lastChunk);\n    // is redeemScript a valid script?\n    if (redeemScriptChunks.length === 0)\n        return false;\n    // is redeemScriptSig push only?\n    if (!bscript.isPushOnly(scriptSigChunks))\n        return false;\n    // is witness?\n    if (chunks.length === 1) {\n        return p2wsho.check(redeemScriptChunks) ||\n            p2wpkho.check(redeemScriptChunks);\n    }\n    // match types\n    if (p2pkh.input.check(scriptSigChunks) &&\n        p2pkh.output.check(redeemScriptChunks))\n        return true;\n    if (p2ms.input.check(scriptSigChunks, allowIncomplete) &&\n        p2ms.output.check(redeemScriptChunks))\n        return true;\n    if (p2pk.input.check(scriptSigChunks) &&\n        p2pk.output.check(redeemScriptChunks))\n        return true;\n    return false;\n}\ncheck.toJSON = function () { return 'scriptHash input'; };\nfunction encodeStack(redeemScriptStack, redeemScript) {\n    var serializedScriptPubKey = bscript.compile(redeemScript);\n    return [].concat(redeemScriptStack, serializedScriptPubKey);\n}\nfunction encode(redeemScriptSig, redeemScript) {\n    var redeemScriptStack = bscript.decompile(redeemScriptSig);\n    return bscript.compile(encodeStack(redeemScriptStack, redeemScript));\n}\nfunction decodeStack(stack) {\n    typeforce(check, stack);\n    return {\n        redeemScriptStack: stack.slice(0, -1),\n        redeemScript: stack[stack.length - 1]\n    };\n}\nfunction decode(buffer) {\n    var stack = bscript.decompile(buffer);\n    var result = decodeStack(stack);\n    result.redeemScriptSig = bscript.compile(result.redeemScriptStack);\n    delete result.redeemScriptStack;\n    return result;\n}\nmodule.exports = {\n    check: check,\n    decode: decode,\n    decodeStack: decodeStack,\n    encode: encode,\n    encodeStack: encodeStack\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}