{"ast":null,"code":"var assert = require('assert');\nvar BigInteger = require('bigi');\nvar THREE = BigInteger.valueOf(3);\nfunction Point(curve, x, y, z) {\n  assert.notStrictEqual(z, undefined, 'Missing Z coordinate');\n  this.curve = curve;\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this._zInv = null;\n  this.compressed = true;\n}\nObject.defineProperty(Point.prototype, 'zInv', {\n  get: function () {\n    if (this._zInv === null) {\n      this._zInv = this.z.modInverse(this.curve.p);\n    }\n    return this._zInv;\n  }\n});\nObject.defineProperty(Point.prototype, 'affineX', {\n  get: function () {\n    return this.x.multiply(this.zInv).mod(this.curve.p);\n  }\n});\nObject.defineProperty(Point.prototype, 'affineY', {\n  get: function () {\n    return this.y.multiply(this.zInv).mod(this.curve.p);\n  }\n});\nPoint.fromAffine = function (curve, x, y) {\n  return new Point(curve, x, y, BigInteger.ONE);\n};\nPoint.prototype.equals = function (other) {\n  if (other === this) return true;\n  if (this.curve.isInfinity(this)) return this.curve.isInfinity(other);\n  if (this.curve.isInfinity(other)) return this.curve.isInfinity(this);\n\n  // u = Y2 * Z1 - Y1 * Z2\n  var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p);\n  if (u.signum() !== 0) return false;\n\n  // v = X2 * Z1 - X1 * Z2\n  var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p);\n  return v.signum() === 0;\n};\nPoint.prototype.negate = function () {\n  var y = this.curve.p.subtract(this.y);\n  return new Point(this.curve, this.x, y, this.z);\n};\nPoint.prototype.add = function (b) {\n  if (this.curve.isInfinity(this)) return b;\n  if (this.curve.isInfinity(b)) return this;\n  var x1 = this.x;\n  var y1 = this.y;\n  var x2 = b.x;\n  var y2 = b.y;\n\n  // u = Y2 * Z1 - Y1 * Z2\n  var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p);\n  // v = X2 * Z1 - X1 * Z2\n  var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p);\n  if (v.signum() === 0) {\n    if (u.signum() === 0) {\n      return this.twice(); // this == b, so double\n    }\n    return this.curve.infinity; // this = -b, so infinity\n  }\n  var v2 = v.square();\n  var v3 = v2.multiply(v);\n  var x1v2 = x1.multiply(v2);\n  var zu2 = u.square().multiply(this.z);\n\n  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p);\n  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p);\n  // z3 = v^3 * z1 * z2\n  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p);\n  return new Point(this.curve, x3, y3, z3);\n};\nPoint.prototype.twice = function () {\n  if (this.curve.isInfinity(this)) return this;\n  if (this.y.signum() === 0) return this.curve.infinity;\n  var x1 = this.x;\n  var y1 = this.y;\n  var y1z1 = y1.multiply(this.z);\n  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p);\n  var a = this.curve.a;\n\n  // w = 3 * x1^2 + a * z1^2\n  var w = x1.square().multiply(THREE);\n  if (a.signum() !== 0) {\n    w = w.add(this.z.square().multiply(a));\n  }\n  w = w.mod(this.curve.p);\n  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p);\n  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p);\n  // z3 = 8 * (y1 * z1)^3\n  var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p);\n  return new Point(this.curve, x3, y3, z3);\n};\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nPoint.prototype.multiply = function (k) {\n  if (this.curve.isInfinity(this)) return this;\n  if (k.signum() === 0) return this.curve.infinity;\n  var e = k;\n  var h = e.multiply(THREE);\n  var neg = this.negate();\n  var R = this;\n  for (var i = h.bitLength() - 2; i > 0; --i) {\n    R = R.twice();\n    var hBit = h.testBit(i);\n    var eBit = e.testBit(i);\n    if (hBit != eBit) {\n      R = R.add(hBit ? this : neg);\n    }\n  }\n  return R;\n};\n\n// Compute this*j + x*k (simultaneous multiplication)\nPoint.prototype.multiplyTwo = function (j, x, k) {\n  var i;\n  if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;else i = k.bitLength() - 1;\n  var R = this.curve.infinity;\n  var both = this.add(x);\n  while (i >= 0) {\n    R = R.twice();\n    var jBit = j.testBit(i);\n    var kBit = k.testBit(i);\n    if (jBit) {\n      if (kBit) {\n        R = R.add(both);\n      } else {\n        R = R.add(this);\n      }\n    } else {\n      if (kBit) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n  return R;\n};\nPoint.prototype.getEncoded = function (compressed) {\n  if (compressed == undefined) compressed = this.compressed;\n  if (this.curve.isInfinity(this)) return new Buffer('00', 'hex'); // Infinity point encoded is simply '00'\n\n  var x = this.affineX;\n  var y = this.affineY;\n  var buffer;\n\n  // Determine size of q in bytes\n  var byteLength = Math.floor((this.curve.p.bitLength() + 7) / 8);\n\n  // 0x02/0x03 | X\n  if (compressed) {\n    buffer = new Buffer(1 + byteLength);\n    buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0);\n\n    // 0x04 | X | Y\n  } else {\n    buffer = new Buffer(1 + byteLength + byteLength);\n    buffer.writeUInt8(0x04, 0);\n    y.toBuffer(byteLength).copy(buffer, 1 + byteLength);\n  }\n  x.toBuffer(byteLength).copy(buffer, 1);\n  return buffer;\n};\nPoint.decodeFrom = function (curve, buffer) {\n  var type = buffer.readUInt8(0);\n  var compressed = type !== 4;\n  var x = BigInteger.fromBuffer(buffer.slice(1, 33));\n  var byteLength = Math.floor((curve.p.bitLength() + 7) / 8);\n  var Q;\n  if (compressed) {\n    assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length');\n    assert(type === 0x02 || type === 0x03, 'Invalid sequence tag');\n    var isOdd = type === 0x03;\n    Q = curve.pointFromX(isOdd, x);\n  } else {\n    assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length');\n    var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength));\n    Q = Point.fromAffine(curve, x, y);\n  }\n  Q.compressed = compressed;\n  return Q;\n};\nPoint.prototype.toString = function () {\n  if (this.curve.isInfinity(this)) return '(INFINITY)';\n  return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')';\n};\nmodule.exports = Point;","map":{"version":3,"names":["assert","require","BigInteger","THREE","valueOf","Point","curve","x","y","z","notStrictEqual","undefined","_zInv","compressed","Object","defineProperty","prototype","get","modInverse","p","multiply","zInv","mod","fromAffine","ONE","equals","other","isInfinity","u","subtract","signum","v","negate","add","b","x1","y1","x2","y2","twice","infinity","v2","square","v3","x1v2","zu2","x3","shiftLeft","y3","z3","y1z1","y1sqz1","a","w","pow","k","e","h","neg","R","i","bitLength","hBit","testBit","eBit","multiplyTwo","j","both","jBit","kBit","getEncoded","Buffer","affineX","affineY","buffer","byteLength","Math","floor","writeUInt8","isEven","toBuffer","copy","decodeFrom","type","readUInt8","fromBuffer","slice","Q","equal","length","isOdd","pointFromX","toString","module","exports"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/node_modules/ecurve/lib/point.js"],"sourcesContent":["var assert = require('assert')\nvar BigInteger = require('bigi')\n\nvar THREE = BigInteger.valueOf(3)\n\nfunction Point(curve, x, y, z) {\n  assert.notStrictEqual(z, undefined, 'Missing Z coordinate')\n\n  this.curve = curve\n  this.x = x\n  this.y = y\n  this.z = z\n  this._zInv = null\n\n  this.compressed = true\n}\n\nObject.defineProperty(Point.prototype, 'zInv', {\n  get: function() {\n    if (this._zInv === null) {\n      this._zInv = this.z.modInverse(this.curve.p)\n    }\n\n    return this._zInv\n  }\n})\n\nObject.defineProperty(Point.prototype, 'affineX', {\n  get: function() {\n    return this.x.multiply(this.zInv).mod(this.curve.p)\n  }\n})\n\nObject.defineProperty(Point.prototype, 'affineY', {\n  get: function() {\n    return this.y.multiply(this.zInv).mod(this.curve.p)\n  }\n})\n\nPoint.fromAffine = function(curve, x, y) {\n  return new Point(curve, x, y, BigInteger.ONE)\n}\n\nPoint.prototype.equals = function(other) {\n  if (other === this) return true\n  if (this.curve.isInfinity(this)) return this.curve.isInfinity(other)\n  if (this.curve.isInfinity(other)) return this.curve.isInfinity(this)\n\n  // u = Y2 * Z1 - Y1 * Z2\n  var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p)\n\n  if (u.signum() !== 0) return false\n\n  // v = X2 * Z1 - X1 * Z2\n  var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p)\n\n  return v.signum() === 0\n}\n\nPoint.prototype.negate = function() {\n  var y = this.curve.p.subtract(this.y)\n\n  return new Point(this.curve, this.x, y, this.z)\n}\n\nPoint.prototype.add = function(b) {\n  if (this.curve.isInfinity(this)) return b\n  if (this.curve.isInfinity(b)) return this\n\n  var x1 = this.x\n  var y1 = this.y\n  var x2 = b.x\n  var y2 = b.y\n\n  // u = Y2 * Z1 - Y1 * Z2\n  var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p)\n  // v = X2 * Z1 - X1 * Z2\n  var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p)\n\n  if (v.signum() === 0) {\n    if (u.signum() === 0) {\n      return this.twice() // this == b, so double\n    }\n\n    return this.curve.infinity // this = -b, so infinity\n  }\n\n  var v2 = v.square()\n  var v3 = v2.multiply(v)\n  var x1v2 = x1.multiply(v2)\n  var zu2 = u.square().multiply(this.z)\n\n  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p)\n  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p)\n  // z3 = v^3 * z1 * z2\n  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p)\n\n  return new Point(this.curve, x3, y3, z3)\n}\n\nPoint.prototype.twice = function() {\n  if (this.curve.isInfinity(this)) return this\n  if (this.y.signum() === 0) return this.curve.infinity\n\n  var x1 = this.x\n  var y1 = this.y\n\n  var y1z1 = y1.multiply(this.z)\n  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p)\n  var a = this.curve.a\n\n  // w = 3 * x1^2 + a * z1^2\n  var w = x1.square().multiply(THREE)\n\n  if (a.signum() !== 0) {\n    w = w.add(this.z.square().multiply(a))\n  }\n\n  w = w.mod(this.curve.p)\n  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p)\n  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p)\n  // z3 = 8 * (y1 * z1)^3\n  var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p)\n\n  return new Point(this.curve, x3, y3, z3)\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nPoint.prototype.multiply = function(k) {\n  if (this.curve.isInfinity(this)) return this\n  if (k.signum() === 0) return this.curve.infinity\n\n  var e = k\n  var h = e.multiply(THREE)\n\n  var neg = this.negate()\n  var R = this\n\n  for (var i = h.bitLength() - 2; i > 0; --i) {\n    R = R.twice()\n\n    var hBit = h.testBit(i)\n    var eBit = e.testBit(i)\n\n    if (hBit != eBit) {\n      R = R.add(hBit ? this : neg)\n    }\n  }\n\n  return R\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nPoint.prototype.multiplyTwo = function(j, x, k) {\n  var i\n\n  if (j.bitLength() > k.bitLength())\n    i = j.bitLength() - 1\n  else\n    i = k.bitLength() - 1\n\n  var R = this.curve.infinity\n  var both = this.add(x)\n\n  while (i >= 0) {\n    R = R.twice()\n\n    var jBit = j.testBit(i)\n    var kBit = k.testBit(i)\n\n    if (jBit) {\n      if (kBit) {\n        R = R.add(both)\n\n      } else {\n        R = R.add(this)\n      }\n\n    } else {\n      if (kBit) {\n        R = R.add(x)\n      }\n    }\n    --i\n  }\n\n  return R\n}\n\nPoint.prototype.getEncoded = function(compressed) {\n  if (compressed == undefined) compressed = this.compressed\n  if (this.curve.isInfinity(this)) return new Buffer('00', 'hex') // Infinity point encoded is simply '00'\n\n  var x = this.affineX\n  var y = this.affineY\n\n  var buffer\n\n  // Determine size of q in bytes\n  var byteLength = Math.floor((this.curve.p.bitLength() + 7) / 8)\n\n  // 0x02/0x03 | X\n  if (compressed) {\n    buffer = new Buffer(1 + byteLength)\n    buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0)\n\n  // 0x04 | X | Y\n  } else {\n    buffer = new Buffer(1 + byteLength + byteLength)\n    buffer.writeUInt8(0x04, 0)\n\n    y.toBuffer(byteLength).copy(buffer, 1 + byteLength)\n  }\n\n  x.toBuffer(byteLength).copy(buffer, 1)\n\n  return buffer\n}\n\nPoint.decodeFrom = function(curve, buffer) {\n  var type = buffer.readUInt8(0)\n  var compressed = (type !== 4)\n\n  var x = BigInteger.fromBuffer(buffer.slice(1, 33))\n  var byteLength = Math.floor((curve.p.bitLength() + 7) / 8)\n\n  var Q\n  if (compressed) {\n    assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length')\n    assert(type === 0x02 || type === 0x03, 'Invalid sequence tag')\n\n    var isOdd = (type === 0x03)\n    Q = curve.pointFromX(isOdd, x)\n\n  } else {\n    assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length')\n\n    var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength))\n    Q = Point.fromAffine(curve, x, y)\n  }\n\n  Q.compressed = compressed\n  return Q\n}\n\nPoint.prototype.toString = function () {\n  if (this.curve.isInfinity(this)) return '(INFINITY)'\n\n  return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')'\n}\n\nmodule.exports = Point\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}