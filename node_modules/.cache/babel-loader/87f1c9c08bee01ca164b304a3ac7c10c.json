{"ast":null,"code":"// m [pubKeys ...] n OP_CHECKMULTISIG\nvar bscript = require('../../script');\nvar types = require('../../types');\nvar typeforce = require('typeforce');\nvar OPS = require('bitcoin-ops');\nvar OP_INT_BASE = OPS.OP_RESERVED; // OP_1 - 1\nfunction check(script, allowIncomplete) {\n  var chunks = bscript.decompile(script);\n  if (chunks.length < 4) return false;\n  if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG) return false;\n  if (!types.Number(chunks[0])) return false;\n  if (!types.Number(chunks[chunks.length - 2])) return false;\n  var m = chunks[0] - OP_INT_BASE;\n  var n = chunks[chunks.length - 2] - OP_INT_BASE;\n  if (m <= 0) return false;\n  if (n > 16) return false;\n  if (m > n) return false;\n  if (n !== chunks.length - 3) return false;\n  if (allowIncomplete) return true;\n  var keys = chunks.slice(1, -2);\n  return keys.every(bscript.isCanonicalPubKey);\n}\ncheck.toJSON = function () {\n  return 'multi-sig output';\n};\nfunction encode(m, pubKeys) {\n  typeforce({\n    m: types.Number,\n    pubKeys: [bscript.isCanonicalPubKey]\n  }, {\n    m: m,\n    pubKeys: pubKeys\n  });\n  var n = pubKeys.length;\n  if (n < m) throw new TypeError('Not enough pubKeys provided');\n  return bscript.compile([].concat(OP_INT_BASE + m, pubKeys, OP_INT_BASE + n, OPS.OP_CHECKMULTISIG));\n}\nfunction decode(buffer, allowIncomplete) {\n  var chunks = bscript.decompile(buffer);\n  typeforce(check, chunks, allowIncomplete);\n  return {\n    m: chunks[0] - OP_INT_BASE,\n    pubKeys: chunks.slice(1, -2)\n  };\n}\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n};","map":{"version":3,"names":["bscript","require","types","typeforce","OPS","OP_INT_BASE","OP_RESERVED","check","script","allowIncomplete","chunks","decompile","length","OP_CHECKMULTISIG","Number","m","n","keys","slice","every","isCanonicalPubKey","toJSON","encode","pubKeys","TypeError","compile","concat","decode","buffer","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/@bitgo/utxo-lib/dist/src/templates/multisig/output.js"],"sourcesContent":["// m [pubKeys ...] n OP_CHECKMULTISIG\nvar bscript = require('../../script');\nvar types = require('../../types');\nvar typeforce = require('typeforce');\nvar OPS = require('bitcoin-ops');\nvar OP_INT_BASE = OPS.OP_RESERVED; // OP_1 - 1\nfunction check(script, allowIncomplete) {\n    var chunks = bscript.decompile(script);\n    if (chunks.length < 4)\n        return false;\n    if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG)\n        return false;\n    if (!types.Number(chunks[0]))\n        return false;\n    if (!types.Number(chunks[chunks.length - 2]))\n        return false;\n    var m = chunks[0] - OP_INT_BASE;\n    var n = chunks[chunks.length - 2] - OP_INT_BASE;\n    if (m <= 0)\n        return false;\n    if (n > 16)\n        return false;\n    if (m > n)\n        return false;\n    if (n !== chunks.length - 3)\n        return false;\n    if (allowIncomplete)\n        return true;\n    var keys = chunks.slice(1, -2);\n    return keys.every(bscript.isCanonicalPubKey);\n}\ncheck.toJSON = function () { return 'multi-sig output'; };\nfunction encode(m, pubKeys) {\n    typeforce({\n        m: types.Number,\n        pubKeys: [bscript.isCanonicalPubKey]\n    }, {\n        m: m,\n        pubKeys: pubKeys\n    });\n    var n = pubKeys.length;\n    if (n < m)\n        throw new TypeError('Not enough pubKeys provided');\n    return bscript.compile([].concat(OP_INT_BASE + m, pubKeys, OP_INT_BASE + n, OPS.OP_CHECKMULTISIG));\n}\nfunction decode(buffer, allowIncomplete) {\n    var chunks = bscript.decompile(buffer);\n    typeforce(check, chunks, allowIncomplete);\n    return {\n        m: chunks[0] - OP_INT_BASE,\n        pubKeys: chunks.slice(1, -2)\n    };\n}\nmodule.exports = {\n    check: check,\n    decode: decode,\n    encode: encode\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}