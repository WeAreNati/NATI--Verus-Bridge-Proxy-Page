{"ast":null,"code":"module.exports = assert;\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError';\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert(t, m) {\n  if (!t) {\n    var err = new AssertionError(m);\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert);\n    throw err;\n  }\n}","map":{"version":3,"names":["module","exports","assert","AssertionError","Error","prototype","name","t","m","err","captureStackTrace"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/node_modules/nanoassert/index.js"],"sourcesContent":["module.exports = assert\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError'\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert (t, m) {\n  if (!t) {\n    var err = new AssertionError(m)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\n    throw err\n  }\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,MAAM;AAEvB,MAAMC,cAAc,SAASC,KAAK,CAAC;AACnCD,cAAc,CAACE,SAAS,CAACC,IAAI,GAAG,gBAAgB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,MAAMA,CAAEK,CAAC,EAAEC,CAAC,EAAE;EACrB,IAAI,CAACD,CAAC,EAAE;IACN,IAAIE,GAAG,GAAG,IAAIN,cAAc,CAACK,CAAC,CAAC;IAC/B,IAAIJ,KAAK,CAACM,iBAAiB,EAAEN,KAAK,CAACM,iBAAiB,CAACD,GAAG,EAAEP,MAAM,CAAC;IACjE,MAAMO,GAAG;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"script"}