{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.privateKeyBufferFromECPair = exports.privateKeyBufferToECPair = void 0;\n/**\n * @prettier\n */\nvar BigInteger = require('bigi');\nvar ECPair = require('../ecpair');\n/**\n * Create an ECPair from the raw private key bytes\n * @param {Buffer} buffer - Private key for the ECPair. Must be exactly 32 bytes.\n * @param {Network} [network] - Network for the ECPair. Defaults to bitcoin.\n * @return {ECPair}\n */\nfunction privateKeyBufferToECPair(buffer, network) {\n  if (!Buffer.isBuffer(buffer) || buffer.length !== 32) {\n    throw new Error('invalid private key buffer');\n  }\n  var d = BigInteger.fromBuffer(buffer);\n  return new ECPair(d, null, {\n    network: network\n  });\n}\nexports.privateKeyBufferToECPair = privateKeyBufferToECPair;\n/**\n * Get the private key as a 32 bytes buffer. If it is smaller than 32 bytes, pad it with zeros\n * @param {ECPair} ecPair\n * @return {Buffer} 32 bytes\n */\nfunction privateKeyBufferFromECPair(ecPair) {\n  if (!(ecPair instanceof ECPair)) {\n    throw new TypeError(\"invalid argument ecpair\");\n  }\n  if (!ecPair.d) throw new Error('Missing private key');\n  return ecPair.d.toBuffer(32);\n}\nexports.privateKeyBufferFromECPair = privateKeyBufferFromECPair;","map":{"version":3,"names":["exports","__esModule","privateKeyBufferFromECPair","privateKeyBufferToECPair","BigInteger","require","ECPair","buffer","network","Buffer","isBuffer","length","Error","d","fromBuffer","ecPair","TypeError","toBuffer"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/@bitgo/utxo-lib/dist/src/bitgo/keyutil.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.privateKeyBufferFromECPair = exports.privateKeyBufferToECPair = void 0;\n/**\n * @prettier\n */\nvar BigInteger = require('bigi');\nvar ECPair = require('../ecpair');\n/**\n * Create an ECPair from the raw private key bytes\n * @param {Buffer} buffer - Private key for the ECPair. Must be exactly 32 bytes.\n * @param {Network} [network] - Network for the ECPair. Defaults to bitcoin.\n * @return {ECPair}\n */\nfunction privateKeyBufferToECPair(buffer, network) {\n    if (!Buffer.isBuffer(buffer) || buffer.length !== 32) {\n        throw new Error('invalid private key buffer');\n    }\n    var d = BigInteger.fromBuffer(buffer);\n    return new ECPair(d, null, { network: network });\n}\nexports.privateKeyBufferToECPair = privateKeyBufferToECPair;\n/**\n * Get the private key as a 32 bytes buffer. If it is smaller than 32 bytes, pad it with zeros\n * @param {ECPair} ecPair\n * @return {Buffer} 32 bytes\n */\nfunction privateKeyBufferFromECPair(ecPair) {\n    if (!(ecPair instanceof ECPair)) {\n        throw new TypeError(\"invalid argument ecpair\");\n    }\n    if (!ecPair.d)\n        throw new Error('Missing private key');\n    return ecPair.d.toBuffer(32);\n}\nexports.privateKeyBufferFromECPair = privateKeyBufferFromECPair;\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,0BAA0B,GAAGF,OAAO,CAACG,wBAAwB,GAAG,KAAK,CAAC;AAC9E;AACA;AACA;AACA,IAAIC,UAAU,GAAGC,OAAO,CAAC,MAAM,CAAC;AAChC,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,wBAAwBA,CAACI,MAAM,EAAEC,OAAO,EAAE;EAC/C,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,IAAIA,MAAM,CAACI,MAAM,KAAK,EAAE,EAAE;IAClD,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EACjD;EACA,IAAIC,CAAC,GAAGT,UAAU,CAACU,UAAU,CAACP,MAAM,CAAC;EACrC,OAAO,IAAID,MAAM,CAACO,CAAC,EAAE,IAAI,EAAE;IAAEL,OAAO,EAAEA;EAAQ,CAAC,CAAC;AACpD;AACAR,OAAO,CAACG,wBAAwB,GAAGA,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA,SAASD,0BAA0BA,CAACa,MAAM,EAAE;EACxC,IAAI,EAAEA,MAAM,YAAYT,MAAM,CAAC,EAAE;IAC7B,MAAM,IAAIU,SAAS,CAAC,yBAAyB,CAAC;EAClD;EACA,IAAI,CAACD,MAAM,CAACF,CAAC,EACT,MAAM,IAAID,KAAK,CAAC,qBAAqB,CAAC;EAC1C,OAAOG,MAAM,CAACF,CAAC,CAACI,QAAQ,CAAC,EAAE,CAAC;AAChC;AACAjB,OAAO,CAACE,0BAA0B,GAAGA,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"script"}