{"ast":null,"code":"/* eslint-disable */\nvar types = require('./types');\nvar typeforce = require('typeforce');\nvar varuint = require('varuint-bitcoin');\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint(value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n}\nfunction readUInt64LE(buffer, offset) {\n  var a = buffer.readUInt32LE(offset);\n  var b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  var j = buffer.length - 1;\n  var tmp = 0;\n  for (var i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n  return buffer;\n}\n/**\n * Helper class for serialization of bitcoin data types into a pre-allocated buffer.\n */\nvar BufferWriter = /** @class */function () {\n  function BufferWriter(buffer, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n  BufferWriter.prototype.writeUInt8 = function (i) {\n    this.offset = this.buffer.writeUInt8(i, this.offset);\n  };\n  BufferWriter.prototype.writeInt32 = function (i) {\n    this.offset = this.buffer.writeInt32LE(i, this.offset);\n  };\n  BufferWriter.prototype.writeUInt32 = function (i) {\n    this.offset = this.buffer.writeUInt32LE(i, this.offset);\n  };\n  BufferWriter.prototype.writeUInt64 = function (i) {\n    this.offset = writeUInt64LE(this.buffer, i, this.offset);\n  };\n  BufferWriter.prototype.writeVarInt = function (i) {\n    varuint.encode(i, this.buffer, this.offset);\n    this.offset += varuint.encode.bytes;\n  };\n  BufferWriter.prototype.writeSlice = function (slice) {\n    if (this.buffer.length < this.offset + slice.length) {\n      throw new Error('Cannot write slice out of bounds');\n    }\n    this.offset += slice.copy(this.buffer, this.offset);\n  };\n  BufferWriter.prototype.writeVarSlice = function (slice) {\n    this.writeVarInt(slice.length);\n    this.writeSlice(slice);\n  };\n  BufferWriter.prototype.writeVector = function (vector) {\n    var _this = this;\n    this.writeVarInt(vector.length);\n    vector.forEach(function (buf) {\n      return _this.writeVarSlice(buf);\n    });\n  };\n  return BufferWriter;\n}();\n/**\n * Helper class for reading of bitcoin data types from a buffer.\n */\nvar BufferReader = /** @class */function () {\n  function BufferReader(buffer, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n    this.buffer = buffer;\n    this.offset = offset;\n    typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n  }\n  BufferReader.prototype.readUInt8 = function () {\n    var result = this.buffer.readUInt8(this.offset);\n    this.offset++;\n    return result;\n  };\n  BufferReader.prototype.readInt32 = function () {\n    var result = this.buffer.readInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  };\n  BufferReader.prototype.readUInt32 = function () {\n    var result = this.buffer.readUInt32LE(this.offset);\n    this.offset += 4;\n    return result;\n  };\n  BufferReader.prototype.readUInt64 = function () {\n    var result = readUInt64LE(this.buffer, this.offset);\n    this.offset += 8;\n    return result;\n  };\n  BufferReader.prototype.readVarInt = function () {\n    var vi = varuint.decode(this.buffer, this.offset);\n    this.offset += varuint.decode.bytes;\n    return vi;\n  };\n  BufferReader.prototype.readSlice = function (n) {\n    if (this.buffer.length < this.offset + n) {\n      throw new Error('Cannot read slice out of bounds');\n    }\n    var result = this.buffer.slice(this.offset, this.offset + n);\n    this.offset += n;\n    return result;\n  };\n  BufferReader.prototype.readVarSlice = function () {\n    return this.readSlice(this.readVarInt());\n  };\n  BufferReader.prototype.readVector = function () {\n    var count = this.readVarInt();\n    var vector = [];\n    for (var i = 0; i < count; i++) vector.push(this.readVarSlice());\n    return vector;\n  };\n  return BufferReader;\n}();\nmodule.exports = {\n  readUInt64LE: readUInt64LE,\n  writeUInt64LE: writeUInt64LE,\n  reverseBuffer: reverseBuffer,\n  BufferWriter: BufferWriter,\n  BufferReader: BufferReader\n};","map":{"version":3,"names":["types","require","typeforce","varuint","verifuint","value","max","Error","Math","floor","readUInt64LE","buffer","offset","a","readUInt32LE","b","writeUInt64LE","writeInt32LE","writeUInt32LE","reverseBuffer","length","j","tmp","i","BufferWriter","tuple","Buffer","UInt32","prototype","writeUInt8","writeInt32","writeUInt32","writeUInt64","writeVarInt","encode","bytes","writeSlice","slice","copy","writeVarSlice","writeVector","vector","_this","forEach","buf","BufferReader","readUInt8","result","readInt32","readInt32LE","readUInt32","readUInt64","readVarInt","vi","decode","readSlice","n","readVarSlice","readVector","count","push","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/@bitgo/utxo-lib/dist/src/bufferutils.js"],"sourcesContent":["/* eslint-disable */\nvar types = require('./types');\nvar typeforce = require('typeforce');\nvar varuint = require('varuint-bitcoin');\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint(value, max) {\n    if (typeof value !== 'number')\n        throw new Error('cannot write a non-number as a number');\n    if (value < 0)\n        throw new Error('specified a negative value for writing an unsigned value');\n    if (value > max)\n        throw new Error('RangeError: value out of range');\n    if (Math.floor(value) !== value)\n        throw new Error('value has a fractional component');\n}\nfunction readUInt64LE(buffer, offset) {\n    var a = buffer.readUInt32LE(offset);\n    var b = buffer.readUInt32LE(offset + 4);\n    b *= 0x100000000;\n    verifuint(b + a, 0x001fffffffffffff);\n    return b + a;\n}\nfunction writeUInt64LE(buffer, value, offset) {\n    verifuint(value, 0x001fffffffffffff);\n    buffer.writeInt32LE(value & -1, offset);\n    buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n    return offset + 8;\n}\nfunction reverseBuffer(buffer) {\n    if (buffer.length < 1)\n        return buffer;\n    var j = buffer.length - 1;\n    var tmp = 0;\n    for (var i = 0; i < buffer.length / 2; i++) {\n        tmp = buffer[i];\n        buffer[i] = buffer[j];\n        buffer[j] = tmp;\n        j--;\n    }\n    return buffer;\n}\n/**\n * Helper class for serialization of bitcoin data types into a pre-allocated buffer.\n */\nvar BufferWriter = /** @class */ (function () {\n    function BufferWriter(buffer, offset) {\n        if (offset === void 0) { offset = 0; }\n        this.buffer = buffer;\n        this.offset = offset;\n        typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n    }\n    BufferWriter.prototype.writeUInt8 = function (i) {\n        this.offset = this.buffer.writeUInt8(i, this.offset);\n    };\n    BufferWriter.prototype.writeInt32 = function (i) {\n        this.offset = this.buffer.writeInt32LE(i, this.offset);\n    };\n    BufferWriter.prototype.writeUInt32 = function (i) {\n        this.offset = this.buffer.writeUInt32LE(i, this.offset);\n    };\n    BufferWriter.prototype.writeUInt64 = function (i) {\n        this.offset = writeUInt64LE(this.buffer, i, this.offset);\n    };\n    BufferWriter.prototype.writeVarInt = function (i) {\n        varuint.encode(i, this.buffer, this.offset);\n        this.offset += varuint.encode.bytes;\n    };\n    BufferWriter.prototype.writeSlice = function (slice) {\n        if (this.buffer.length < this.offset + slice.length) {\n            throw new Error('Cannot write slice out of bounds');\n        }\n        this.offset += slice.copy(this.buffer, this.offset);\n    };\n    BufferWriter.prototype.writeVarSlice = function (slice) {\n        this.writeVarInt(slice.length);\n        this.writeSlice(slice);\n    };\n    BufferWriter.prototype.writeVector = function (vector) {\n        var _this = this;\n        this.writeVarInt(vector.length);\n        vector.forEach(function (buf) { return _this.writeVarSlice(buf); });\n    };\n    return BufferWriter;\n}());\n/**\n * Helper class for reading of bitcoin data types from a buffer.\n */\nvar BufferReader = /** @class */ (function () {\n    function BufferReader(buffer, offset) {\n        if (offset === void 0) { offset = 0; }\n        this.buffer = buffer;\n        this.offset = offset;\n        typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);\n    }\n    BufferReader.prototype.readUInt8 = function () {\n        var result = this.buffer.readUInt8(this.offset);\n        this.offset++;\n        return result;\n    };\n    BufferReader.prototype.readInt32 = function () {\n        var result = this.buffer.readInt32LE(this.offset);\n        this.offset += 4;\n        return result;\n    };\n    BufferReader.prototype.readUInt32 = function () {\n        var result = this.buffer.readUInt32LE(this.offset);\n        this.offset += 4;\n        return result;\n    };\n    BufferReader.prototype.readUInt64 = function () {\n        var result = readUInt64LE(this.buffer, this.offset);\n        this.offset += 8;\n        return result;\n    };\n    BufferReader.prototype.readVarInt = function () {\n        var vi = varuint.decode(this.buffer, this.offset);\n        this.offset += varuint.decode.bytes;\n        return vi;\n    };\n    BufferReader.prototype.readSlice = function (n) {\n        if (this.buffer.length < this.offset + n) {\n            throw new Error('Cannot read slice out of bounds');\n        }\n        var result = this.buffer.slice(this.offset, this.offset + n);\n        this.offset += n;\n        return result;\n    };\n    BufferReader.prototype.readVarSlice = function () {\n        return this.readSlice(this.readVarInt());\n    };\n    BufferReader.prototype.readVector = function () {\n        var count = this.readVarInt();\n        var vector = [];\n        for (var i = 0; i < count; i++)\n            vector.push(this.readVarSlice());\n        return vector;\n    };\n    return BufferReader;\n}());\nmodule.exports = {\n    readUInt64LE: readUInt64LE,\n    writeUInt64LE: writeUInt64LE,\n    reverseBuffer: reverseBuffer,\n    BufferWriter: BufferWriter,\n    BufferReader: BufferReader\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}