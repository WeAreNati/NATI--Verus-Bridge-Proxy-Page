{"ast":null,"code":"\"use strict\";\n\n/**\n * @prettier\n */\n/*\n\nThe values for the various fork coins can be found in these files:\n\nproperty       filename                  varname                           notes\n------------------------------------------------------------------------------------------------------------------------\nmessagePrefix  src/validation.cpp        strMessageMagic                   Format `${CoinName} Signed Message`\nbech32_hrp     src/chainparams.cpp       bech32_hrp                        Only for some networks\nbip32.public   src/chainparams.cpp       base58Prefixes[EXT_PUBLIC_KEY]    Mainnets have same value, testnets have same value\nbip32.private  src/chainparams.cpp       base58Prefixes[EXT_SECRET_KEY]    Mainnets have same value, testnets have same value\npubKeyHash     src/chainparams.cpp       base58Prefixes[PUBKEY_ADDRESS]\nscriptHash     src/chainparams.cpp       base58Prefixes[SCRIPT_ADDRESS]\nwif            src/chainparams.cpp       base58Prefixes[SECRET_KEY]        Testnets have same value\nforkId         src/script/interpreter.h  FORKID_*\n\n*/\nvar networkTypes_1 = require(\"./networkTypes\");\nfunction getDefaultBip32Mainnet() {\n  return {\n    // base58 'xpub'\n    public: 0x0488b21e,\n    // base58 'xprv'\n    private: 0x0488ade4\n  };\n}\nfunction getDogeBip32Mainnet() {\n  return {\n    public: 0x02facafd,\n    private: 0x02fac398\n  };\n}\nfunction getDefaultBip32Testnet() {\n  return {\n    // base58 'tpub'\n    public: 0x043587cf,\n    // base58 'tprv'\n    private: 0x04358394\n  };\n}\nvar networks = {\n  // https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp\n  // https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp\n  bitcoin: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bech32: 'bc',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x00,\n    scriptHash: 0x05,\n    wif: 0x80,\n    coin: networkTypes_1.coins.BTC\n  },\n  testnet: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bech32: 'tb',\n    bip32: getDefaultBip32Testnet(),\n    pubKeyHash: 0x6f,\n    scriptHash: 0xc4,\n    wif: 0xef,\n    coin: networkTypes_1.coins.BTC\n  },\n  // https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/validation.cpp\n  // https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/chainparams.cpp\n  // https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/cashaddr.md\n  bitcoincash: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x00,\n    scriptHash: 0x05,\n    wif: 0x80,\n    coin: networkTypes_1.coins.BCH,\n    forkId: 0x00,\n    cashAddr: {\n      prefix: 'bitcoincash',\n      pubKeyHash: 0x00,\n      scriptHash: 0x08\n    }\n  },\n  bitcoincashTestnet: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bip32: getDefaultBip32Testnet(),\n    pubKeyHash: 0x6f,\n    scriptHash: 0xc4,\n    wif: 0xef,\n    coin: networkTypes_1.coins.BCH,\n    cashAddr: {\n      prefix: 'bchtest',\n      pubKeyHash: 0x00,\n      scriptHash: 0x08\n    }\n  },\n  // https://github.com/BTCGPU/BTCGPU/blob/master/src/validation.cpp\n  // https://github.com/BTCGPU/BTCGPU/blob/master/src/chainparams.cpp\n  // https://github.com/BTCGPU/BTCGPU/blob/master/src/script/interpreter.h\n  bitcoingold: {\n    messagePrefix: '\\x18Bitcoin Gold Signed Message:\\n',\n    bech32: 'btg',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x26,\n    scriptHash: 0x17,\n    wif: 0x80,\n    forkId: 79,\n    coin: networkTypes_1.coins.BTG\n  },\n  bitcoingoldTestnet: {\n    messagePrefix: '\\x18Bitcoin Gold Signed Message:\\n',\n    bech32: 'tbtg',\n    bip32: getDefaultBip32Testnet(),\n    pubKeyHash: 111,\n    scriptHash: 196,\n    wif: 0xef,\n    forkId: 79,\n    coin: networkTypes_1.coins.BTG\n  },\n  // https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/validation.cpp\n  // https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/chainparams.cpp\n  bitcoinsv: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x00,\n    scriptHash: 0x05,\n    wif: 0x80,\n    coin: networkTypes_1.coins.BSV,\n    forkId: 0x00\n  },\n  bitcoinsvTestnet: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bip32: getDefaultBip32Testnet(),\n    pubKeyHash: 0x6f,\n    scriptHash: 0xc4,\n    wif: 0xef,\n    coin: networkTypes_1.coins.BSV\n  },\n  // https://github.com/dashpay/dash/blob/master/src/validation.cpp\n  // https://github.com/dashpay/dash/blob/master/src/chainparams.cpp\n  dash: {\n    messagePrefix: '\\x19DarkCoin Signed Message:\\n',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x4c,\n    scriptHash: 0x10,\n    wif: 0xcc,\n    coin: networkTypes_1.coins.DASH\n  },\n  dashTest: {\n    messagePrefix: '\\x19DarkCoin Signed Message:\\n',\n    bip32: getDefaultBip32Testnet(),\n    pubKeyHash: 0x8c,\n    scriptHash: 0x13,\n    wif: 0xef,\n    coin: networkTypes_1.coins.DASH\n  },\n  \"default\": {\n    messagePrefix: '\\x15Verus signed data:\\n',\n    bech32: 'bc',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x3c,\n    scriptHash: 0x55,\n    verusID: 0x66,\n    wif: 0xBC,\n    consensusBranchId: {\n      1: 0x00,\n      2: 0x00,\n      3: 0x5ba81b19,\n      4: 0x76b809bb\n    },\n    coin: networkTypes_1.coins.DEFAULT,\n    isPBaaS: true,\n    isZcashCompatible: true\n  },\n  digibyte: {\n    messagePrefix: '\\x19Digibyte Signed Message:\\n',\n    bip44: 20,\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x1e,\n    scriptHash: 0x5,\n    wif: 0x80,\n    coin: networkTypes_1.coins.DGB,\n    dustThreshold: 1000\n  },\n  doge: {\n    messagePrefix: '\\x19Dogecoin Signed Message:\\n',\n    bip44: 3,\n    bip32: getDogeBip32Mainnet(),\n    pubKeyHash: 0x1e,\n    scriptHash: 0x16,\n    wif: 0x9e,\n    coin: networkTypes_1.coins.DOGE,\n    dustThreshold: 0 // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/core.h#L155-L160\n  },\n  kmd: {\n    messagePrefix: '\\x18Komodo Signed Message:\\n',\n    bech32: 'bc',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x3c,\n    scriptHash: 0x55,\n    verusID: 0x66,\n    wif: 0xBC,\n    consensusBranchId: {\n      1: 0x00,\n      2: 0x00,\n      3: 0x5ba81b19,\n      4: 0x76b809bb\n    },\n    coin: networkTypes_1.coins.KMD,\n    isPBaaS: false,\n    isZcashCompatible: true\n  },\n  // https://github.com/litecoin-project/litecoin/blob/master/src/validation.cpp\n  // https://github.com/litecoin-project/litecoin/blob/master/src/chainparams.cpp\n  litecoin: {\n    messagePrefix: '\\x19Litecoin Signed Message:\\n',\n    bech32: 'ltc',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x30,\n    scriptHash: 0x32,\n    wif: 0xb0,\n    coin: networkTypes_1.coins.LTC\n  },\n  litecoinTest: {\n    messagePrefix: '\\x19Litecoin Signed Message:\\n',\n    bech32: 'tltc',\n    bip32: getDefaultBip32Testnet(),\n    pubKeyHash: 0x6f,\n    scriptHash: 0x3a,\n    wif: 0xef,\n    coin: networkTypes_1.coins.LTC\n  },\n  verus: {\n    messagePrefix: '\\x15Verus signed data:\\n',\n    bech32: 'bc',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x3c,\n    scriptHash: 0x55,\n    verusID: 0x66,\n    wif: 0xBC,\n    consensusBranchId: {\n      1: 0x00,\n      2: 0x00,\n      3: 0x5ba81b19,\n      4: 0x76b809bb\n    },\n    coin: networkTypes_1.coins.VRSC,\n    isPBaaS: true,\n    isZcashCompatible: true\n  },\n  verustest: {\n    messagePrefix: '\\x15Verus signed data:\\n',\n    bech32: 'bc',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x3c,\n    scriptHash: 0x55,\n    verusID: 0x66,\n    wif: 0xBC,\n    consensusBranchId: {\n      1: 0x00,\n      2: 0x00,\n      3: 0x5ba81b19,\n      4: 0x76b809bb\n    },\n    coin: networkTypes_1.coins.VRSC,\n    isPBaaS: true,\n    isZcashCompatible: true\n  },\n  // https://github.com/zcash/zcash/blob/master/src/validation.cpp\n  // https://github.com/zcash/zcash/blob/master/src/chainparams.cpp\n  zcash: {\n    messagePrefix: '\\x18ZCash Signed Message:\\n',\n    bip32: getDefaultBip32Mainnet(),\n    pubKeyHash: 0x1cb8,\n    scriptHash: 0x1cbd,\n    wif: 0x80,\n    // This parameter was introduced in version 3 to allow soft forks, for version 1 and 2 transactions we add a\n    // dummy value.\n    consensusBranchId: {\n      1: 0x00,\n      2: 0x00,\n      3: 0x5ba81b19,\n      // 4: 0x76b809bb (old Sapling branch id). Blossom branch id becomes effective after block 653600\n      // 4: 0x2bb40e60\n      // 4: 0xf5b9230b (Heartwood branch id, see https://zips.z.cash/zip-0250)\n      // 4: 0xe9ff75a6, // (Canopy branch id, see https://zips.z.cash/zip-0251)\n      // 4: 0x37519621 // NU5 Branch ID (backwards compatible with NU4)\n      4: 0xc2d6d0b4\n    },\n    coin: networkTypes_1.coins.ZEC,\n    isZcashCompatible: true\n  },\n  zcashTest: {\n    messagePrefix: '\\x18ZCash Signed Message:\\n',\n    bip32: getDefaultBip32Testnet(),\n    pubKeyHash: 0x1d25,\n    scriptHash: 0x1cba,\n    wif: 0xef,\n    consensusBranchId: {\n      1: 0x00,\n      2: 0x00,\n      3: 0x5ba81b19,\n      // 4: 0x76b809bb (old Sapling branch id)\n      // 4: 0x2bb40e60\n      // 4: 0xf5b9230b (Heartwood branch id, see https://zips.z.cash/zip-0250)\n      // 4: 0xe9ff75a6, // (Canopy branch id, see https://zips.z.cash/zip-0251)\n      4: 0x37519621 // NU5 Branch ID (backwards compatible with NU4)\n    },\n    coin: networkTypes_1.coins.ZEC,\n    isZcashCompatible: true\n  }\n};\nmodule.exports = networks;","map":{"version":3,"names":["networkTypes_1","require","getDefaultBip32Mainnet","public","private","getDogeBip32Mainnet","getDefaultBip32Testnet","networks","bitcoin","messagePrefix","bech32","bip32","pubKeyHash","scriptHash","wif","coin","coins","BTC","testnet","bitcoincash","BCH","forkId","cashAddr","prefix","bitcoincashTestnet","bitcoingold","BTG","bitcoingoldTestnet","bitcoinsv","BSV","bitcoinsvTestnet","dash","DASH","dashTest","verusID","consensusBranchId","DEFAULT","isPBaaS","isZcashCompatible","digibyte","bip44","DGB","dustThreshold","doge","DOGE","kmd","KMD","litecoin","LTC","litecoinTest","verus","VRSC","verustest","zcash","ZEC","zcashTest","module","exports"],"sources":["/Users/oddfl3x/Code/varB/NATIBridgeWebsite-main/node_modules/@bitgo/utxo-lib/dist/src/networks.js"],"sourcesContent":["\"use strict\";\n/**\n * @prettier\n */\n/*\n\nThe values for the various fork coins can be found in these files:\n\nproperty       filename                  varname                           notes\n------------------------------------------------------------------------------------------------------------------------\nmessagePrefix  src/validation.cpp        strMessageMagic                   Format `${CoinName} Signed Message`\nbech32_hrp     src/chainparams.cpp       bech32_hrp                        Only for some networks\nbip32.public   src/chainparams.cpp       base58Prefixes[EXT_PUBLIC_KEY]    Mainnets have same value, testnets have same value\nbip32.private  src/chainparams.cpp       base58Prefixes[EXT_SECRET_KEY]    Mainnets have same value, testnets have same value\npubKeyHash     src/chainparams.cpp       base58Prefixes[PUBKEY_ADDRESS]\nscriptHash     src/chainparams.cpp       base58Prefixes[SCRIPT_ADDRESS]\nwif            src/chainparams.cpp       base58Prefixes[SECRET_KEY]        Testnets have same value\nforkId         src/script/interpreter.h  FORKID_*\n\n*/\nvar networkTypes_1 = require(\"./networkTypes\");\nfunction getDefaultBip32Mainnet() {\n    return {\n        // base58 'xpub'\n        public: 0x0488b21e,\n        // base58 'xprv'\n        private: 0x0488ade4\n    };\n}\nfunction getDogeBip32Mainnet() {\n    return {\n        public: 0x02facafd,\n        private: 0x02fac398\n    };\n}\nfunction getDefaultBip32Testnet() {\n    return {\n        // base58 'tpub'\n        public: 0x043587cf,\n        // base58 'tprv'\n        private: 0x04358394\n    };\n}\nvar networks = {\n    // https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp\n    // https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp\n    bitcoin: {\n        messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n        bech32: 'bc',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x00,\n        scriptHash: 0x05,\n        wif: 0x80,\n        coin: networkTypes_1.coins.BTC\n    },\n    testnet: {\n        messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n        bech32: 'tb',\n        bip32: getDefaultBip32Testnet(),\n        pubKeyHash: 0x6f,\n        scriptHash: 0xc4,\n        wif: 0xef,\n        coin: networkTypes_1.coins.BTC\n    },\n    // https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/validation.cpp\n    // https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/chainparams.cpp\n    // https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/cashaddr.md\n    bitcoincash: {\n        messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x00,\n        scriptHash: 0x05,\n        wif: 0x80,\n        coin: networkTypes_1.coins.BCH,\n        forkId: 0x00,\n        cashAddr: {\n            prefix: 'bitcoincash',\n            pubKeyHash: 0x00,\n            scriptHash: 0x08\n        }\n    },\n    bitcoincashTestnet: {\n        messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n        bip32: getDefaultBip32Testnet(),\n        pubKeyHash: 0x6f,\n        scriptHash: 0xc4,\n        wif: 0xef,\n        coin: networkTypes_1.coins.BCH,\n        cashAddr: {\n            prefix: 'bchtest',\n            pubKeyHash: 0x00,\n            scriptHash: 0x08\n        }\n    },\n    // https://github.com/BTCGPU/BTCGPU/blob/master/src/validation.cpp\n    // https://github.com/BTCGPU/BTCGPU/blob/master/src/chainparams.cpp\n    // https://github.com/BTCGPU/BTCGPU/blob/master/src/script/interpreter.h\n    bitcoingold: {\n        messagePrefix: '\\x18Bitcoin Gold Signed Message:\\n',\n        bech32: 'btg',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x26,\n        scriptHash: 0x17,\n        wif: 0x80,\n        forkId: 79,\n        coin: networkTypes_1.coins.BTG\n    },\n    bitcoingoldTestnet: {\n        messagePrefix: '\\x18Bitcoin Gold Signed Message:\\n',\n        bech32: 'tbtg',\n        bip32: getDefaultBip32Testnet(),\n        pubKeyHash: 111,\n        scriptHash: 196,\n        wif: 0xef,\n        forkId: 79,\n        coin: networkTypes_1.coins.BTG\n    },\n    // https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/validation.cpp\n    // https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/chainparams.cpp\n    bitcoinsv: {\n        messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x00,\n        scriptHash: 0x05,\n        wif: 0x80,\n        coin: networkTypes_1.coins.BSV,\n        forkId: 0x00\n    },\n    bitcoinsvTestnet: {\n        messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n        bip32: getDefaultBip32Testnet(),\n        pubKeyHash: 0x6f,\n        scriptHash: 0xc4,\n        wif: 0xef,\n        coin: networkTypes_1.coins.BSV\n    },\n    // https://github.com/dashpay/dash/blob/master/src/validation.cpp\n    // https://github.com/dashpay/dash/blob/master/src/chainparams.cpp\n    dash: {\n        messagePrefix: '\\x19DarkCoin Signed Message:\\n',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x4c,\n        scriptHash: 0x10,\n        wif: 0xcc,\n        coin: networkTypes_1.coins.DASH\n    },\n    dashTest: {\n        messagePrefix: '\\x19DarkCoin Signed Message:\\n',\n        bip32: getDefaultBip32Testnet(),\n        pubKeyHash: 0x8c,\n        scriptHash: 0x13,\n        wif: 0xef,\n        coin: networkTypes_1.coins.DASH\n    },\n    \"default\": {\n        messagePrefix: '\\x15Verus signed data:\\n',\n        bech32: 'bc',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x3c,\n        scriptHash: 0x55,\n        verusID: 0x66,\n        wif: 0xBC,\n        consensusBranchId: {\n            1: 0x00,\n            2: 0x00,\n            3: 0x5ba81b19,\n            4: 0x76b809bb\n        },\n        coin: networkTypes_1.coins.DEFAULT,\n        isPBaaS: true,\n        isZcashCompatible: true\n    },\n    digibyte: {\n        messagePrefix: '\\x19Digibyte Signed Message:\\n',\n        bip44: 20,\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x1e,\n        scriptHash: 0x5,\n        wif: 0x80,\n        coin: networkTypes_1.coins.DGB,\n        dustThreshold: 1000\n    },\n    doge: {\n        messagePrefix: '\\x19Dogecoin Signed Message:\\n',\n        bip44: 3,\n        bip32: getDogeBip32Mainnet(),\n        pubKeyHash: 0x1e,\n        scriptHash: 0x16,\n        wif: 0x9e,\n        coin: networkTypes_1.coins.DOGE,\n        dustThreshold: 0 // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/core.h#L155-L160\n    },\n    kmd: {\n        messagePrefix: '\\x18Komodo Signed Message:\\n',\n        bech32: 'bc',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x3c,\n        scriptHash: 0x55,\n        verusID: 0x66,\n        wif: 0xBC,\n        consensusBranchId: {\n            1: 0x00,\n            2: 0x00,\n            3: 0x5ba81b19,\n            4: 0x76b809bb\n        },\n        coin: networkTypes_1.coins.KMD,\n        isPBaaS: false,\n        isZcashCompatible: true\n    },\n    // https://github.com/litecoin-project/litecoin/blob/master/src/validation.cpp\n    // https://github.com/litecoin-project/litecoin/blob/master/src/chainparams.cpp\n    litecoin: {\n        messagePrefix: '\\x19Litecoin Signed Message:\\n',\n        bech32: 'ltc',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x30,\n        scriptHash: 0x32,\n        wif: 0xb0,\n        coin: networkTypes_1.coins.LTC\n    },\n    litecoinTest: {\n        messagePrefix: '\\x19Litecoin Signed Message:\\n',\n        bech32: 'tltc',\n        bip32: getDefaultBip32Testnet(),\n        pubKeyHash: 0x6f,\n        scriptHash: 0x3a,\n        wif: 0xef,\n        coin: networkTypes_1.coins.LTC\n    },\n    verus: {\n        messagePrefix: '\\x15Verus signed data:\\n',\n        bech32: 'bc',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x3c,\n        scriptHash: 0x55,\n        verusID: 0x66,\n        wif: 0xBC,\n        consensusBranchId: {\n            1: 0x00,\n            2: 0x00,\n            3: 0x5ba81b19,\n            4: 0x76b809bb\n        },\n        coin: networkTypes_1.coins.VRSC,\n        isPBaaS: true,\n        isZcashCompatible: true\n    },\n    verustest: {\n        messagePrefix: '\\x15Verus signed data:\\n',\n        bech32: 'bc',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x3c,\n        scriptHash: 0x55,\n        verusID: 0x66,\n        wif: 0xBC,\n        consensusBranchId: {\n            1: 0x00,\n            2: 0x00,\n            3: 0x5ba81b19,\n            4: 0x76b809bb\n        },\n        coin: networkTypes_1.coins.VRSC,\n        isPBaaS: true,\n        isZcashCompatible: true\n    },\n    // https://github.com/zcash/zcash/blob/master/src/validation.cpp\n    // https://github.com/zcash/zcash/blob/master/src/chainparams.cpp\n    zcash: {\n        messagePrefix: '\\x18ZCash Signed Message:\\n',\n        bip32: getDefaultBip32Mainnet(),\n        pubKeyHash: 0x1cb8,\n        scriptHash: 0x1cbd,\n        wif: 0x80,\n        // This parameter was introduced in version 3 to allow soft forks, for version 1 and 2 transactions we add a\n        // dummy value.\n        consensusBranchId: {\n            1: 0x00,\n            2: 0x00,\n            3: 0x5ba81b19,\n            // 4: 0x76b809bb (old Sapling branch id). Blossom branch id becomes effective after block 653600\n            // 4: 0x2bb40e60\n            // 4: 0xf5b9230b (Heartwood branch id, see https://zips.z.cash/zip-0250)\n            // 4: 0xe9ff75a6, // (Canopy branch id, see https://zips.z.cash/zip-0251)\n            // 4: 0x37519621 // NU5 Branch ID (backwards compatible with NU4)\n            4: 0xc2d6d0b4\n        },\n        coin: networkTypes_1.coins.ZEC,\n        isZcashCompatible: true\n    },\n    zcashTest: {\n        messagePrefix: '\\x18ZCash Signed Message:\\n',\n        bip32: getDefaultBip32Testnet(),\n        pubKeyHash: 0x1d25,\n        scriptHash: 0x1cba,\n        wif: 0xef,\n        consensusBranchId: {\n            1: 0x00,\n            2: 0x00,\n            3: 0x5ba81b19,\n            // 4: 0x76b809bb (old Sapling branch id)\n            // 4: 0x2bb40e60\n            // 4: 0xf5b9230b (Heartwood branch id, see https://zips.z.cash/zip-0250)\n            // 4: 0xe9ff75a6, // (Canopy branch id, see https://zips.z.cash/zip-0251)\n            4: 0x37519621 // NU5 Branch ID (backwards compatible with NU4)\n        },\n        coin: networkTypes_1.coins.ZEC,\n        isZcashCompatible: true\n    }\n};\nmodule.exports = networks;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}