{"ast":null,"code":"// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nmodule.exports = function base(ALPHABET) {\n  var ALPHABET_MAP = {};\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n\n  // pre-compute lookup table\n  for (var i = 0; i < ALPHABET.length; i++) {\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n  }\n  function encode(source) {\n    if (source.length === 0) return '';\n    var digits = [0];\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % BASE;\n        carry = carry / BASE | 0;\n      }\n      while (carry > 0) {\n        digits.push(carry % BASE);\n        carry = carry / BASE | 0;\n      }\n    }\n    var string = '';\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += ALPHABET[0];\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]];\n    return string;\n  }\n  function decodeUnsafe(string) {\n    if (string.length === 0) return [];\n    var bytes = [0];\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]];\n      if (value === undefined) return;\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE;\n        bytes[j] = carry & 0xff;\n        carry >>= 8;\n      }\n      while (carry > 0) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0);\n    }\n    return bytes.reverse();\n  }\n  function decode(string) {\n    var array = decodeUnsafe(string);\n    if (array) return array;\n    throw new Error('Non-base' + BASE + ' character');\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n};","map":{"version":3,"names":["module","exports","base","ALPHABET","ALPHABET_MAP","BASE","length","LEADER","charAt","i","encode","source","digits","j","carry","push","string","k","q","decodeUnsafe","bytes","value","undefined","reverse","decode","array","Error"],"sources":["/Users/oddfl3x/Code/varB/NATI<>Verus Bridge Proxy Page/node_modules/wif/node_modules/base-x/index.js"],"sourcesContent":["// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nmodule.exports = function base (ALPHABET) {\n  var ALPHABET_MAP = {}\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n\n  // pre-compute lookup table\n  for (var i = 0; i < ALPHABET.length; i++) {\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i\n  }\n\n  function encode (source) {\n    if (source.length === 0) return ''\n\n    var digits = [0]\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8\n        digits[j] = carry % BASE\n        carry = (carry / BASE) | 0\n      }\n\n      while (carry > 0) {\n        digits.push(carry % BASE)\n        carry = (carry / BASE) | 0\n      }\n    }\n\n    var string = ''\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += ALPHABET[0]\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]\n\n    return string\n  }\n\n  function decodeUnsafe (string) {\n    if (string.length === 0) return []\n\n    var bytes = [0]\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]]\n      if (value === undefined) return\n\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE\n        bytes[j] = carry & 0xff\n        carry >>= 8\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff)\n        carry >>= 8\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0)\n    }\n\n    return bytes.reverse()\n  }\n\n  function decode (string) {\n    var array = decodeUnsafe(string)\n    if (array) return array\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}