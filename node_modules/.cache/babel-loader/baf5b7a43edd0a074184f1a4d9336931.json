{"ast":null,"code":"import React,{useEffect,useState,useRef}from'react';import{address as baddress,crypto as bcrypto}from'@bitgo/utxo-lib';import{LoadingButton}from'@mui/lab';import{Alert,Typography,Button}from'@mui/material';import FormControlLabel from'@mui/material/FormControlLabel';import FormGroup from'@mui/material/FormGroup';import Grid from'@mui/material/Grid';import Switch from'@mui/material/Switch';import Tooltip from'@mui/material/Tooltip';import{Box}from'@mui/system';import{useWeb3React}from'@web3-react/core';import{utils}from'ethers';import{useForm}from'react-hook-form';import{Link}from\"react-router-dom\";import web3 from'web3';import DELEGATOR_ABI from'abis/DelegatorAbi.json';import{DELEGATOR_ADD}from'constants/contractAddress';import useContract from'hooks/useContract';import{validateClaimAddress,isRAddress,isiAddress,uint64ToVerusFloat}from'utils/rules';import AddressAddressFieldField from'./ClaimAddressField';import bitGoUTXO from'../../utils/bitUTXO';import TokenField from'../ConvertForm/TokenField';import{useToast}from'../Toast/ToastProvider';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const maxGas=800000;const maxGasClaim=80000;const TYPE_FEE=1;const TYPE_REFUND=2;const TYPE_REFUND_CHECK=3;const TYPE_PUBLICKEY=4;// const TYPE_NOTARY_FEE = 5;\n// const TYPE_DAI_BURN_BACK = 6;\nfunction usePreviousValue(value){const ref=useRef();useEffect(()=>{ref.current=value;});return ref.current;}export default function ClaimForm(){const[isTxPending,setIsTxPending]=useState(false);const[alert,setAlert]=useState(null);const[feeToClaim,setFeeToClaim]=useState(null);const{addToast,removeAllToasts}=useToast();const{account}=useWeb3React();const previousValue=usePreviousValue(account);const delegatorContract=useContract(DELEGATOR_ADD,DELEGATOR_ABI);const[usePublicKey,setUsePublicKey]=useState(false);const[claimRefund,setclaimRefund]=useState(false);const{handleSubmit,control,watch,reset}=useForm({mode:'all'});const address=watch('address');const refundCurrency=watch('token');const handleUsePublicKeyChange=event=>{reset({address:\"\"});setUsePublicKey(event.target.checked);setAlert(null);if(claimRefund){setclaimRefund(false);}};const handleRefundsEnable=event=>{setclaimRefund(event.target.checked);setAlert(null);if(!event.target.checked){reset({address:\"\"});}else{setUsePublicKey(false);}};const formatHexAddress=(address,type)=>{try{const verusAddress=bitGoUTXO.address.fromBase58Check(address);let retval;switch(verusAddress.version){case 60:// case R address\nretval=\"0214\".concat(verusAddress.hash.toString('hex'));break;case 102:// case i address\nretval=\"0414\".concat(verusAddress.hash.toString('hex'));break;default:return null;}if(type===TYPE_REFUND_CHECK){retval=Buffer.from(\"\".concat(web3.utils.padLeft(retval,64)),'hex');retval[1]=16;return\"0x\".concat(retval.toString('hex'));}if(type===TYPE_FEE||type===TYPE_PUBLICKEY){retval=Buffer.from(\"\".concat(web3.utils.padLeft(retval,64)),'hex');return\"0x\".concat(retval.toString('hex'));}return\"0x\".concat(retval);}catch(error){throw new Error(\"Invalid Address\");}};const checkForAssets=async(address,type,currency)=>{const formattedAddress=formatHexAddress(address,type);let feeSats;let fees;if(type===TYPE_FEE){feeSats=await delegatorContract.callStatic.claimableFees(formattedAddress);fees=uint64ToVerusFloat(feeSats);if(fees===\"0.00000000\"||parseFloat(fees)<0.006){setAlert({state:\"warning\",message:\"\".concat(fees,\" ETH available to claim, minimum amount claimable is 0.006 ETH to cover import cost.\")});setFeeToClaim(null);return fees;}setAlert({state:\"info\",message:\"\".concat(fees,\" ETH available to claim\")});}else if(type===TYPE_REFUND_CHECK){feeSats=await delegatorContract.callStatic.refunds(formattedAddress,currency);fees=uint64ToVerusFloat(feeSats);setAlert({state:fees===\"0.00000000\"?\"warning\":\"info\",message:\"\".concat(fees,\" Available to refund\")});}else if(type===TYPE_PUBLICKEY){feeSats=await delegatorContract.callStatic.claimableFees(formattedAddress);fees=uint64ToVerusFloat(feeSats);}setFeeToClaim(fees);return fees;};useEffect(()=>{if(address&&(isRAddress(address)||isiAddress(address))){if(!claimRefund){if(previousValue?previousValue!==address||feeToClaim===null||feeToClaim===\"0.00000000\":true){checkForAssets(address,TYPE_FEE);}}else if(refundCurrency&&refundCurrency.value){checkForAssets(address,TYPE_REFUND_CHECK,refundCurrency.value);}else{removeAllToasts();setFeeToClaim(null);setAlert(null);}}else if(address&&validateClaimAddress(address)!==true&&feeToClaim!==null){removeAllToasts();setFeeToClaim(null);setAlert(null);}},[address,claimRefund,refundCurrency]);const onSubmit=async values=>{const{address}=values;setAlert(null);setIsTxPending(true);try{if(usePublicKey){try{const from=account;// For historical reasons, you must submit the message to sign in hex-encoded UTF-8.\n// This uses a Node.js-style buffer shim in the browser.\nconst msg=\"0x\".concat(Buffer.from(\"Agreeing to this will create a public key address for Verus Refunds.\",'utf8').toString('hex'));const sign=await window.ethereum.request({method:'personal_sign',params:[msg,from]});const messageHash=utils.hashMessage(\"Agreeing to this will create a public key address for Verus Refunds.\");const messageHashBytes=utils.arrayify(messageHash);// Now you have the digest,\nconst publicKey=utils.recoverPublicKey(messageHashBytes,sign);const compressed=utils.computePublicKey(publicKey,true);const check=bcrypto.hash160(Buffer.from(compressed.slice(2),'hex'));const rAddress=baddress.toBase58Check(check,60);const checkfees=await checkForAssets(rAddress,TYPE_PUBLICKEY);if(checkfees===\"0.00000000\"){setAlert({state:\"warning\",message:\"\".concat(\"\".concat(rAddress,\"\\n\"),\" has \",checkfees,\" fees to claim. Please try again with a different Ethereum account.\")});setIsTxPending(false);return;}setAlert({state:\"info\",message:\"\".concat(\"\".concat(rAddress,\"\\n\"),\" has \",checkfees,\" ETH to claim.\")});const{x,y}={x:publicKey.slice(4,68),y:publicKey.slice(68,132)};const txResult=await delegatorContract.sendfees(\"0x\".concat(x),\"0x\".concat(y),{from:account,gasLimit:maxGasClaim});await txResult.wait();setAlert(null);setIsTxPending(false);addToast({type:\"success\",description:'Claim to ETH Transaction Success!'});setFeeToClaim(null);}catch(err){setAlert(\"\\n                         Error with public key: \".concat(err.message,\" \"));throw err;}}else if(claimRefund){const hexResult=formatHexAddress(address,TYPE_REFUND);// const txEstimation = await delegatorContract.estimateGas.claimRefund(hexResult, refundCurrency.value);\nconst testClaim=await delegatorContract.callStatic.claimRefund(hexResult,refundCurrency.value);if(testClaim===\"0x\"){setAlert({state:\"warning\",message:\"No \".concat(refundCurrency.value,\" available to refund\")});setIsTxPending(false);return;}const txResult=await delegatorContract.claimRefund(hexResult,refundCurrency.value,{from:account,gasLimit:maxGas});await txResult.wait();setAlert(null);setIsTxPending(false);addToast({type:\"success\",description:'Refund Transaction Success!'});setFeeToClaim(null);}else{const hexResult=formatHexAddress(address,TYPE_FEE);// const txEstimation = await delegatorContract.estimateGas.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`);\nif(address.slice(0,1)===\"R\"){setAlert({state:\"warning\",message:\"Please import the private key for \".concat(address,\" into metamask, and use the 'Public Key' claim option to be paid directly to that ETH address.\")});setIsTxPending(false);return;}await delegatorContract.callStatic.sendfees(hexResult,\"0x\".concat(Buffer.alloc(32).toString('hex')));const txResult=await delegatorContract.sendfees(hexResult,\"0x\".concat(Buffer.alloc(32).toString('hex')),{from:account,gasLimit:maxGas});await txResult.wait();setAlert(null);setIsTxPending(false);addToast({type:\"success\",description:'Fee reimburse Transaction Success!'});setFeeToClaim(null);}}catch(error){if(error.message){addToast({type:\"error\",description:error.message});}else{addToast({type:\"error\",description:'Transaction Failed!'});}setAlert(null);setIsTxPending(false);}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit(onSubmit),children:[alert&&/*#__PURE__*/_jsx(Alert,{severity:alert.state,sx:{mb:3},children:/*#__PURE__*/_jsx(Typography,{children:alert.message})}),!account&&/*#__PURE__*/_jsx(Alert,{severity:\"info\",sx:{mb:3},children:/*#__PURE__*/_jsx(Typography,{children:/*#__PURE__*/_jsx(\"b\",{children:\"Wallet not connected\"})})}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(AddressAddressFieldField,{control:control,usePublicKey:usePublicKey,disabled:usePublicKey})}),/*#__PURE__*/_jsx(Box,{mt:\"30px\",textAlign:\"center\",width:\"100%\",children:/*#__PURE__*/_jsx(LoadingButton,{loading:isTxPending,disabled:(feeToClaim===null||feeToClaim===\"0.00000000\")&&!usePublicKey,type:\"submit\",color:\"primary\",variant:\"contained\",children:\"Claim\"})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormGroup,{sx:{flexWrap:'nowrap'},children:[/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Switch,{checked:usePublicKey,onChange:handleUsePublicKeyChange,name:\"usePublicKey\"}),sx:{fontSize:'20px'}// add this line to set the font size\n}),/*#__PURE__*/_jsx(Tooltip,{title:\"The private Key for your refundaddress should be imported into metamask in order for you to receive refunds\",arrow:true,placement:\"bottom\",PopperProps:{style:{marginTop:-12}},children:/*#__PURE__*/_jsx(Typography,{sx:{fontSize:12,flexWrap:'nowrap'},children:\"Use your Public Key to claim\"})})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Switch,{checked:claimRefund,onChange:handleRefundsEnable,name:\"claimRefund\"}),sx:{fontSize:'20px'}// add this line to set the font size\n}),/*#__PURE__*/_jsx(Typography,{sx:{fontSize:12},children:\"Fees / Refund (Claim Type)\"})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:claimRefund&&/*#__PURE__*/_jsx(TokenField,{control:control,poolAvailable:false,token:\"Refund Currency\"})})]}),/*#__PURE__*/_jsx(\"div\",{style:{alignItems:'center',paddingTop:42},children:/*#__PURE__*/_jsx(Link,{to:\"/\",children:/*#__PURE__*/_jsx(Button,{variant:\"outlined\",children:\"BACK\"})})})]})});}","map":{"version":3,"names":["React","useEffect","useState","useRef","address","baddress","crypto","bcrypto","LoadingButton","Alert","Typography","Button","FormControlLabel","FormGroup","Grid","Switch","Tooltip","Box","useWeb3React","utils","useForm","Link","web3","DELEGATOR_ABI","DELEGATOR_ADD","useContract","validateClaimAddress","isRAddress","isiAddress","uint64ToVerusFloat","AddressAddressFieldField","bitGoUTXO","TokenField","useToast","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","maxGas","maxGasClaim","TYPE_FEE","TYPE_REFUND","TYPE_REFUND_CHECK","TYPE_PUBLICKEY","usePreviousValue","value","ref","current","ClaimForm","isTxPending","setIsTxPending","alert","setAlert","feeToClaim","setFeeToClaim","addToast","removeAllToasts","account","previousValue","delegatorContract","usePublicKey","setUsePublicKey","claimRefund","setclaimRefund","handleSubmit","control","watch","reset","mode","refundCurrency","handleUsePublicKeyChange","event","target","checked","handleRefundsEnable","formatHexAddress","type","verusAddress","fromBase58Check","retval","version","concat","hash","toString","Buffer","from","padLeft","error","Error","checkForAssets","currency","formattedAddress","feeSats","fees","callStatic","claimableFees","parseFloat","state","message","refunds","onSubmit","values","msg","sign","window","ethereum","request","method","params","messageHash","hashMessage","messageHashBytes","arrayify","publicKey","recoverPublicKey","compressed","computePublicKey","check","hash160","slice","rAddress","toBase58Check","checkfees","x","y","txResult","sendfees","gasLimit","wait","description","err","hexResult","testClaim","alloc","children","severity","sx","mb","container","spacing","item","xs","disabled","mt","textAlign","width","loading","color","variant","flexWrap","onChange","name","fontSize","title","arrow","placement","PopperProps","style","marginTop","poolAvailable","token","alignItems","paddingTop","to"],"sources":["/Users/oddfl3x/Code/varB/vARRRBridgeWebsite-main/src/components/ClaimForm/ClaimForm.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nimport { address as baddress, crypto as bcrypto } from '@bitgo/utxo-lib';\nimport { LoadingButton } from '@mui/lab';\nimport { Alert, Typography, Button } from '@mui/material';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport Grid from '@mui/material/Grid';\nimport Switch from '@mui/material/Switch';\nimport Tooltip from '@mui/material/Tooltip';\nimport { Box } from '@mui/system';\nimport { useWeb3React } from '@web3-react/core';\nimport { utils } from 'ethers'\nimport { useForm } from 'react-hook-form';\nimport { Link } from \"react-router-dom\";\nimport web3 from 'web3';\n\nimport DELEGATOR_ABI from 'abis/DelegatorAbi.json';\nimport {\n    DELEGATOR_ADD\n} from 'constants/contractAddress';\nimport useContract from 'hooks/useContract';\nimport { validateClaimAddress, isRAddress, isiAddress, uint64ToVerusFloat } from 'utils/rules';\n\nimport AddressAddressFieldField from './ClaimAddressField';\nimport bitGoUTXO from '../../utils/bitUTXO';\nimport TokenField from '../ConvertForm/TokenField';\nimport { useToast } from '../Toast/ToastProvider';\n\nconst maxGas = 800000;\nconst maxGasClaim = 80000;\nconst TYPE_FEE = 1;\nconst TYPE_REFUND = 2;\nconst TYPE_REFUND_CHECK = 3;\nconst TYPE_PUBLICKEY = 4;\n// const TYPE_NOTARY_FEE = 5;\n// const TYPE_DAI_BURN_BACK = 6;\n\nfunction usePreviousValue(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nexport default function ClaimForm() {\n    const [isTxPending, setIsTxPending] = useState(false);\n    const [alert, setAlert] = useState(null);\n    const [feeToClaim, setFeeToClaim] = useState(null);\n    const { addToast, removeAllToasts } = useToast();\n    const { account } = useWeb3React();\n    const previousValue = usePreviousValue(account);\n    const delegatorContract = useContract(DELEGATOR_ADD, DELEGATOR_ABI);\n    const [usePublicKey, setUsePublicKey] = useState(false);\n    const [claimRefund, setclaimRefund] = useState(false);\n    const { handleSubmit, control, watch, reset } = useForm({\n        mode: 'all'\n    });\n    const address = watch('address');\n    const refundCurrency = watch('token');\n\n    const handleUsePublicKeyChange = (event) => {\n        reset({ address: \"\" });\n        setUsePublicKey(event.target.checked);\n        setAlert(null);\n        if (claimRefund) {\n            setclaimRefund(false);\n        }\n    };\n\n    const handleRefundsEnable = (event) => {\n\n        setclaimRefund(event.target.checked);\n        setAlert(null);\n        if (!event.target.checked) {\n            reset({ address: \"\" });\n        } else {\n            setUsePublicKey(false);\n        }\n    };\n\n\n    const formatHexAddress = (address, type) => {\n        try {\n            const verusAddress = bitGoUTXO.address.fromBase58Check(address);\n            let retval;\n            switch (verusAddress.version) {\n                case 60: // case R address\n                    retval = `0214${verusAddress.hash.toString('hex')}`;\n                    break;\n                case 102: // case i address\n                    retval = `0414${verusAddress.hash.toString('hex')}`;\n                    break;\n                default:\n                    return null;\n            }\n            if (type === TYPE_REFUND_CHECK) {\n                retval = Buffer.from(`${web3.utils.padLeft(retval, 64)}`, 'hex');\n                retval[1] = 16;\n                return `0x${retval.toString('hex')}`;\n            }\n\n            if (type === TYPE_FEE || type === TYPE_PUBLICKEY) {\n                retval = Buffer.from(`${web3.utils.padLeft(retval, 64)}`, 'hex');\n                return `0x${retval.toString('hex')}`;\n            }\n\n            return `0x${retval}`;\n\n\n\n        } catch (error) {\n            throw new Error(\"Invalid Address\");\n        }\n    }\n\n    const checkForAssets = async (address, type, currency) => {\n\n        const formattedAddress = formatHexAddress(address, type);\n        let feeSats;\n        let fees;\n        if (type === TYPE_FEE) {\n            feeSats = await delegatorContract.callStatic.claimableFees(formattedAddress);\n            fees = uint64ToVerusFloat(feeSats);\n            if (fees === \"0.00000000\" || (parseFloat(fees) < 0.006)) {\n                setAlert({ state: \"warning\", message: `${fees} ETH available to claim, minimum amount claimable is 0.006 ETH to cover import cost.` });\n                setFeeToClaim(null);\n                return fees;\n            }\n            setAlert({ state: \"info\", message: `${fees} ETH available to claim` });\n\n\n        } else if (type === TYPE_REFUND_CHECK) {\n            feeSats = await delegatorContract.callStatic.refunds(formattedAddress, currency);\n            fees = uint64ToVerusFloat(feeSats);\n            setAlert({ state: fees === \"0.00000000\" ? \"warning\" : \"info\", message: `${fees} Available to refund` });\n        } else if (type === TYPE_PUBLICKEY) {\n            feeSats = await delegatorContract.callStatic.claimableFees(formattedAddress);\n            fees = uint64ToVerusFloat(feeSats);\n        }\n        setFeeToClaim(fees);\n        return fees;\n    }\n\n    useEffect(() => {\n        if (address && (isRAddress(address) || isiAddress(address))) {\n            if (!claimRefund) {\n                if (previousValue ? (previousValue !== address || feeToClaim === null || feeToClaim === \"0.00000000\") : true) {\n                    checkForAssets(address, TYPE_FEE);\n                }\n            } else if (refundCurrency && refundCurrency.value) {\n                checkForAssets(address, TYPE_REFUND_CHECK, refundCurrency.value);\n\n            } else {\n                removeAllToasts();\n                setFeeToClaim(null)\n                setAlert(null);\n            }\n        } else if (address && validateClaimAddress(address) !== true && feeToClaim !== null) {\n            removeAllToasts();\n            setFeeToClaim(null)\n            setAlert(null);\n        }\n    }, [address, claimRefund, refundCurrency])\n\n    const onSubmit = async (values) => {\n        const { address } = values;\n        setAlert(null);\n        setIsTxPending(true);\n\n        try {\n            if (usePublicKey) {\n                try {\n                    const from = account;\n                    // For historical reasons, you must submit the message to sign in hex-encoded UTF-8.\n                    // This uses a Node.js-style buffer shim in the browser.\n                    const msg = `0x${Buffer.from(\"Agreeing to this will create a public key address for Verus Refunds.\", 'utf8').toString('hex')}`;\n                    const sign = await window.ethereum.request({\n                        method: 'personal_sign',\n                        params: [msg, from]\n                    });\n\n                    const messageHash = utils.hashMessage(\"Agreeing to this will create a public key address for Verus Refunds.\");\n                    const messageHashBytes = utils.arrayify(messageHash);\n\n                    // Now you have the digest,\n                    const publicKey = utils.recoverPublicKey(messageHashBytes, sign);\n                    const compressed = utils.computePublicKey(publicKey, true);\n\n                    const check = bcrypto.hash160(Buffer.from(compressed.slice(2), 'hex'));\n                    const rAddress = baddress.toBase58Check(check, 60)\n\n                    const checkfees = await checkForAssets(rAddress, TYPE_PUBLICKEY);\n                    if (checkfees === \"0.00000000\") {\n                        setAlert({ state: \"warning\", message: `${`${rAddress}\\n`} has ${checkfees} fees to claim. Please try again with a different Ethereum account.` });\n                        setIsTxPending(false);\n                        return;\n                    }\n                    setAlert({ state: \"info\", message: `${`${rAddress}\\n`} has ${checkfees} ETH to claim.` });\n\n                    const { x, y } = { x: publicKey.slice(4, 68), y: publicKey.slice(68, 132) };\n\n                    const txResult = await delegatorContract.sendfees(`0x${x}`, `0x${y}`, { from: account, gasLimit: maxGasClaim });\n                    await txResult.wait();\n                    setAlert(null);\n                    setIsTxPending(false);\n                    addToast({ type: \"success\", description: 'Claim to ETH Transaction Success!' });\n                    setFeeToClaim(null)\n                } catch (err) {\n                    setAlert(`\n                         Error with public key: ${err.message} `\n                    );\n                    throw err\n                }\n            } else if (claimRefund) {\n                const hexResult = formatHexAddress(address, TYPE_REFUND);\n                // const txEstimation = await delegatorContract.estimateGas.claimRefund(hexResult, refundCurrency.value);\n                const testClaim = await delegatorContract.callStatic.claimRefund(hexResult, refundCurrency.value);\n                if (testClaim === \"0x\") {\n                    setAlert({ state: \"warning\", message: `No ${refundCurrency.value} available to refund` });\n                    setIsTxPending(false);\n                    return;\n                }\n                const txResult = await delegatorContract.claimRefund(hexResult, refundCurrency.value, { from: account, gasLimit: maxGas });\n                await txResult.wait();\n                setAlert(null);\n                setIsTxPending(false);\n                addToast({ type: \"success\", description: 'Refund Transaction Success!' });\n                setFeeToClaim(null)\n            }\n            else {\n                const hexResult = formatHexAddress(address, TYPE_FEE);\n                // const txEstimation = await delegatorContract.estimateGas.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`);\n                if (address.slice(0, 1) === \"R\") {\n                    setAlert({ state: \"warning\", message: `Please import the private key for ${address} into metamask, and use the 'Public Key' claim option to be paid directly to that ETH address.` });\n                    setIsTxPending(false);\n                    return;\n                }\n                await delegatorContract.callStatic.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`);\n                const txResult = await delegatorContract.sendfees(hexResult, `0x${Buffer.alloc(32).toString('hex')}`, { from: account, gasLimit: maxGas });\n                await txResult.wait();\n                setAlert(null);\n                setIsTxPending(false);\n                addToast({ type: \"success\", description: 'Fee reimburse Transaction Success!' });\n                setFeeToClaim(null)\n            }\n        } catch (error) {\n            if (error.message) {\n                addToast({ type: \"error\", description: error.message })\n            } else {\n                addToast({ type: \"error\", description: 'Transaction Failed!' })\n            }\n            setAlert(null);\n            setIsTxPending(false);\n        }\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                {alert &&\n                    <Alert severity={alert.state} sx={{ mb: 3 }}>\n                        <Typography>\n                            {alert.message}\n                        </Typography>\n                    </Alert>\n                }\n                {!account && (<Alert severity=\"info\" sx={{ mb: 3 }}>\n                    <Typography>\n                        <b>Wallet not connected</b>\n                    </Typography>\n                </Alert>)\n                }\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <AddressAddressFieldField\n                            control={control}\n                            usePublicKey={usePublicKey}\n                            disabled={usePublicKey}\n                        />\n                    </Grid>\n                    <Box mt=\"30px\" textAlign=\"center\" width=\"100%\">\n                        <LoadingButton loading={isTxPending} disabled={(feeToClaim === null || feeToClaim === \"0.00000000\") && !usePublicKey} type=\"submit\" color=\"primary\" variant=\"contained\">Claim</LoadingButton>\n                    </Box>\n                    <Grid item xs={12}>\n                        <FormGroup sx={{ flexWrap: 'nowrap' }}>\n\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={usePublicKey}\n                                        onChange={handleUsePublicKeyChange}\n                                        name=\"usePublicKey\"\n                                    />\n                                }\n                                sx={{ fontSize: '20px' }} // add this line to set the font size\n                            />\n                            <Tooltip title=\"The private Key for your refundaddress should be imported into metamask in order for you to receive refunds\"\n                                arrow\n                                placement=\"bottom\"\n                                PopperProps={{ style: { marginTop: -12 } }}>\n                                <Typography sx={{ fontSize: 12, flexWrap: 'nowrap' }}>\n                                    Use your Public Key to claim\n                                </Typography>\n                            </Tooltip>\n\n                        </FormGroup>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={claimRefund}\n                                        onChange={handleRefundsEnable}\n                                        name=\"claimRefund\"\n                                    />\n                                }\n                                sx={{ fontSize: '20px' }} // add this line to set the font size\n                            />\n                            <Typography sx={{ fontSize: 12 }}>\n                                Fees / Refund (Claim Type)\n                            </Typography>\n                        </FormGroup>\n                    </Grid>\n                    <Grid item xs={12}>\n                        {claimRefund && (<TokenField\n                            control={control}\n                            poolAvailable={false}\n                            token=\"Refund Currency\"\n                        />)}\n                    </Grid>\n\n                </Grid>\n                <div style={{ alignItems: 'center', paddingTop: 42 }}>\n                    <Link to=\"/\">\n                        <Button variant=\"outlined\">\n                            BACK\n                        </Button>\n                    </Link>\n                </div>\n            </form>\n\n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}